
final_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a80  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000108  08006c20  08006c20  00007c20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006d28  08006d28  0000805c  2**0
                  CONTENTS
  4 .ARM          00000008  08006d28  08006d28  00007d28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006d30  08006d30  0000805c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006d30  08006d30  00007d30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006d34  08006d34  00007d34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08006d38  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000042c  2000005c  08006d94  0000805c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000488  08006d94  00008488  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000805c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000117d4  00000000  00000000  0000808c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002245  00000000  00000000  00019860  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001120  00000000  00000000  0001baa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d9c  00000000  00000000  0001cbc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000170b9  00000000  00000000  0001d964  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013c6f  00000000  00000000  00034a1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092871  00000000  00000000  0004868c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000daefd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005048  00000000  00000000  000daf40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007d  00000000  00000000  000dff88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006c08 	.word	0x08006c08

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	08006c08 	.word	0x08006c08

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2f>:
 8000a1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a20:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a24:	bf24      	itt	cs
 8000a26:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a2a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a2e:	d90d      	bls.n	8000a4c <__aeabi_d2f+0x30>
 8000a30:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a34:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a38:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a3c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a40:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a44:	bf08      	it	eq
 8000a46:	f020 0001 	biceq.w	r0, r0, #1
 8000a4a:	4770      	bx	lr
 8000a4c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a50:	d121      	bne.n	8000a96 <__aeabi_d2f+0x7a>
 8000a52:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a56:	bfbc      	itt	lt
 8000a58:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a5c:	4770      	bxlt	lr
 8000a5e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a62:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a66:	f1c2 0218 	rsb	r2, r2, #24
 8000a6a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a6e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a72:	fa20 f002 	lsr.w	r0, r0, r2
 8000a76:	bf18      	it	ne
 8000a78:	f040 0001 	orrne.w	r0, r0, #1
 8000a7c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a80:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a84:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a88:	ea40 000c 	orr.w	r0, r0, ip
 8000a8c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a90:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a94:	e7cc      	b.n	8000a30 <__aeabi_d2f+0x14>
 8000a96:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a9a:	d107      	bne.n	8000aac <__aeabi_d2f+0x90>
 8000a9c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aa0:	bf1e      	ittt	ne
 8000aa2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000aa6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000aaa:	4770      	bxne	lr
 8000aac:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ab0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ab4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop

08000abc <__aeabi_uldivmod>:
 8000abc:	b953      	cbnz	r3, 8000ad4 <__aeabi_uldivmod+0x18>
 8000abe:	b94a      	cbnz	r2, 8000ad4 <__aeabi_uldivmod+0x18>
 8000ac0:	2900      	cmp	r1, #0
 8000ac2:	bf08      	it	eq
 8000ac4:	2800      	cmpeq	r0, #0
 8000ac6:	bf1c      	itt	ne
 8000ac8:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000acc:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000ad0:	f000 b96a 	b.w	8000da8 <__aeabi_idiv0>
 8000ad4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ad8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000adc:	f000 f806 	bl	8000aec <__udivmoddi4>
 8000ae0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ae4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ae8:	b004      	add	sp, #16
 8000aea:	4770      	bx	lr

08000aec <__udivmoddi4>:
 8000aec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000af0:	9d08      	ldr	r5, [sp, #32]
 8000af2:	460c      	mov	r4, r1
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d14e      	bne.n	8000b96 <__udivmoddi4+0xaa>
 8000af8:	4694      	mov	ip, r2
 8000afa:	458c      	cmp	ip, r1
 8000afc:	4686      	mov	lr, r0
 8000afe:	fab2 f282 	clz	r2, r2
 8000b02:	d962      	bls.n	8000bca <__udivmoddi4+0xde>
 8000b04:	b14a      	cbz	r2, 8000b1a <__udivmoddi4+0x2e>
 8000b06:	f1c2 0320 	rsb	r3, r2, #32
 8000b0a:	4091      	lsls	r1, r2
 8000b0c:	fa20 f303 	lsr.w	r3, r0, r3
 8000b10:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b14:	4319      	orrs	r1, r3
 8000b16:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b1a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b1e:	fa1f f68c 	uxth.w	r6, ip
 8000b22:	fbb1 f4f7 	udiv	r4, r1, r7
 8000b26:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b2a:	fb07 1114 	mls	r1, r7, r4, r1
 8000b2e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b32:	fb04 f106 	mul.w	r1, r4, r6
 8000b36:	4299      	cmp	r1, r3
 8000b38:	d90a      	bls.n	8000b50 <__udivmoddi4+0x64>
 8000b3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b3e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000b42:	f080 8112 	bcs.w	8000d6a <__udivmoddi4+0x27e>
 8000b46:	4299      	cmp	r1, r3
 8000b48:	f240 810f 	bls.w	8000d6a <__udivmoddi4+0x27e>
 8000b4c:	3c02      	subs	r4, #2
 8000b4e:	4463      	add	r3, ip
 8000b50:	1a59      	subs	r1, r3, r1
 8000b52:	fa1f f38e 	uxth.w	r3, lr
 8000b56:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b5a:	fb07 1110 	mls	r1, r7, r0, r1
 8000b5e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b62:	fb00 f606 	mul.w	r6, r0, r6
 8000b66:	429e      	cmp	r6, r3
 8000b68:	d90a      	bls.n	8000b80 <__udivmoddi4+0x94>
 8000b6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b6e:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000b72:	f080 80fc 	bcs.w	8000d6e <__udivmoddi4+0x282>
 8000b76:	429e      	cmp	r6, r3
 8000b78:	f240 80f9 	bls.w	8000d6e <__udivmoddi4+0x282>
 8000b7c:	4463      	add	r3, ip
 8000b7e:	3802      	subs	r0, #2
 8000b80:	1b9b      	subs	r3, r3, r6
 8000b82:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b86:	2100      	movs	r1, #0
 8000b88:	b11d      	cbz	r5, 8000b92 <__udivmoddi4+0xa6>
 8000b8a:	40d3      	lsrs	r3, r2
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	e9c5 3200 	strd	r3, r2, [r5]
 8000b92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b96:	428b      	cmp	r3, r1
 8000b98:	d905      	bls.n	8000ba6 <__udivmoddi4+0xba>
 8000b9a:	b10d      	cbz	r5, 8000ba0 <__udivmoddi4+0xb4>
 8000b9c:	e9c5 0100 	strd	r0, r1, [r5]
 8000ba0:	2100      	movs	r1, #0
 8000ba2:	4608      	mov	r0, r1
 8000ba4:	e7f5      	b.n	8000b92 <__udivmoddi4+0xa6>
 8000ba6:	fab3 f183 	clz	r1, r3
 8000baa:	2900      	cmp	r1, #0
 8000bac:	d146      	bne.n	8000c3c <__udivmoddi4+0x150>
 8000bae:	42a3      	cmp	r3, r4
 8000bb0:	d302      	bcc.n	8000bb8 <__udivmoddi4+0xcc>
 8000bb2:	4290      	cmp	r0, r2
 8000bb4:	f0c0 80f0 	bcc.w	8000d98 <__udivmoddi4+0x2ac>
 8000bb8:	1a86      	subs	r6, r0, r2
 8000bba:	eb64 0303 	sbc.w	r3, r4, r3
 8000bbe:	2001      	movs	r0, #1
 8000bc0:	2d00      	cmp	r5, #0
 8000bc2:	d0e6      	beq.n	8000b92 <__udivmoddi4+0xa6>
 8000bc4:	e9c5 6300 	strd	r6, r3, [r5]
 8000bc8:	e7e3      	b.n	8000b92 <__udivmoddi4+0xa6>
 8000bca:	2a00      	cmp	r2, #0
 8000bcc:	f040 8090 	bne.w	8000cf0 <__udivmoddi4+0x204>
 8000bd0:	eba1 040c 	sub.w	r4, r1, ip
 8000bd4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bd8:	fa1f f78c 	uxth.w	r7, ip
 8000bdc:	2101      	movs	r1, #1
 8000bde:	fbb4 f6f8 	udiv	r6, r4, r8
 8000be2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000be6:	fb08 4416 	mls	r4, r8, r6, r4
 8000bea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bee:	fb07 f006 	mul.w	r0, r7, r6
 8000bf2:	4298      	cmp	r0, r3
 8000bf4:	d908      	bls.n	8000c08 <__udivmoddi4+0x11c>
 8000bf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000bfa:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000bfe:	d202      	bcs.n	8000c06 <__udivmoddi4+0x11a>
 8000c00:	4298      	cmp	r0, r3
 8000c02:	f200 80cd 	bhi.w	8000da0 <__udivmoddi4+0x2b4>
 8000c06:	4626      	mov	r6, r4
 8000c08:	1a1c      	subs	r4, r3, r0
 8000c0a:	fa1f f38e 	uxth.w	r3, lr
 8000c0e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000c12:	fb08 4410 	mls	r4, r8, r0, r4
 8000c16:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c1a:	fb00 f707 	mul.w	r7, r0, r7
 8000c1e:	429f      	cmp	r7, r3
 8000c20:	d908      	bls.n	8000c34 <__udivmoddi4+0x148>
 8000c22:	eb1c 0303 	adds.w	r3, ip, r3
 8000c26:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000c2a:	d202      	bcs.n	8000c32 <__udivmoddi4+0x146>
 8000c2c:	429f      	cmp	r7, r3
 8000c2e:	f200 80b0 	bhi.w	8000d92 <__udivmoddi4+0x2a6>
 8000c32:	4620      	mov	r0, r4
 8000c34:	1bdb      	subs	r3, r3, r7
 8000c36:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c3a:	e7a5      	b.n	8000b88 <__udivmoddi4+0x9c>
 8000c3c:	f1c1 0620 	rsb	r6, r1, #32
 8000c40:	408b      	lsls	r3, r1
 8000c42:	fa22 f706 	lsr.w	r7, r2, r6
 8000c46:	431f      	orrs	r7, r3
 8000c48:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c4c:	fa04 f301 	lsl.w	r3, r4, r1
 8000c50:	ea43 030c 	orr.w	r3, r3, ip
 8000c54:	40f4      	lsrs	r4, r6
 8000c56:	fa00 f801 	lsl.w	r8, r0, r1
 8000c5a:	0c38      	lsrs	r0, r7, #16
 8000c5c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c60:	fbb4 fef0 	udiv	lr, r4, r0
 8000c64:	fa1f fc87 	uxth.w	ip, r7
 8000c68:	fb00 441e 	mls	r4, r0, lr, r4
 8000c6c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c70:	fb0e f90c 	mul.w	r9, lr, ip
 8000c74:	45a1      	cmp	r9, r4
 8000c76:	fa02 f201 	lsl.w	r2, r2, r1
 8000c7a:	d90a      	bls.n	8000c92 <__udivmoddi4+0x1a6>
 8000c7c:	193c      	adds	r4, r7, r4
 8000c7e:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000c82:	f080 8084 	bcs.w	8000d8e <__udivmoddi4+0x2a2>
 8000c86:	45a1      	cmp	r9, r4
 8000c88:	f240 8081 	bls.w	8000d8e <__udivmoddi4+0x2a2>
 8000c8c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c90:	443c      	add	r4, r7
 8000c92:	eba4 0409 	sub.w	r4, r4, r9
 8000c96:	fa1f f983 	uxth.w	r9, r3
 8000c9a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c9e:	fb00 4413 	mls	r4, r0, r3, r4
 8000ca2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ca6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000caa:	45a4      	cmp	ip, r4
 8000cac:	d907      	bls.n	8000cbe <__udivmoddi4+0x1d2>
 8000cae:	193c      	adds	r4, r7, r4
 8000cb0:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000cb4:	d267      	bcs.n	8000d86 <__udivmoddi4+0x29a>
 8000cb6:	45a4      	cmp	ip, r4
 8000cb8:	d965      	bls.n	8000d86 <__udivmoddi4+0x29a>
 8000cba:	3b02      	subs	r3, #2
 8000cbc:	443c      	add	r4, r7
 8000cbe:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000cc2:	fba0 9302 	umull	r9, r3, r0, r2
 8000cc6:	eba4 040c 	sub.w	r4, r4, ip
 8000cca:	429c      	cmp	r4, r3
 8000ccc:	46ce      	mov	lr, r9
 8000cce:	469c      	mov	ip, r3
 8000cd0:	d351      	bcc.n	8000d76 <__udivmoddi4+0x28a>
 8000cd2:	d04e      	beq.n	8000d72 <__udivmoddi4+0x286>
 8000cd4:	b155      	cbz	r5, 8000cec <__udivmoddi4+0x200>
 8000cd6:	ebb8 030e 	subs.w	r3, r8, lr
 8000cda:	eb64 040c 	sbc.w	r4, r4, ip
 8000cde:	fa04 f606 	lsl.w	r6, r4, r6
 8000ce2:	40cb      	lsrs	r3, r1
 8000ce4:	431e      	orrs	r6, r3
 8000ce6:	40cc      	lsrs	r4, r1
 8000ce8:	e9c5 6400 	strd	r6, r4, [r5]
 8000cec:	2100      	movs	r1, #0
 8000cee:	e750      	b.n	8000b92 <__udivmoddi4+0xa6>
 8000cf0:	f1c2 0320 	rsb	r3, r2, #32
 8000cf4:	fa20 f103 	lsr.w	r1, r0, r3
 8000cf8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cfc:	fa24 f303 	lsr.w	r3, r4, r3
 8000d00:	4094      	lsls	r4, r2
 8000d02:	430c      	orrs	r4, r1
 8000d04:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d08:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d0c:	fa1f f78c 	uxth.w	r7, ip
 8000d10:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d14:	fb08 3110 	mls	r1, r8, r0, r3
 8000d18:	0c23      	lsrs	r3, r4, #16
 8000d1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d1e:	fb00 f107 	mul.w	r1, r0, r7
 8000d22:	4299      	cmp	r1, r3
 8000d24:	d908      	bls.n	8000d38 <__udivmoddi4+0x24c>
 8000d26:	eb1c 0303 	adds.w	r3, ip, r3
 8000d2a:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000d2e:	d22c      	bcs.n	8000d8a <__udivmoddi4+0x29e>
 8000d30:	4299      	cmp	r1, r3
 8000d32:	d92a      	bls.n	8000d8a <__udivmoddi4+0x29e>
 8000d34:	3802      	subs	r0, #2
 8000d36:	4463      	add	r3, ip
 8000d38:	1a5b      	subs	r3, r3, r1
 8000d3a:	b2a4      	uxth	r4, r4
 8000d3c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d40:	fb08 3311 	mls	r3, r8, r1, r3
 8000d44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d48:	fb01 f307 	mul.w	r3, r1, r7
 8000d4c:	42a3      	cmp	r3, r4
 8000d4e:	d908      	bls.n	8000d62 <__udivmoddi4+0x276>
 8000d50:	eb1c 0404 	adds.w	r4, ip, r4
 8000d54:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000d58:	d213      	bcs.n	8000d82 <__udivmoddi4+0x296>
 8000d5a:	42a3      	cmp	r3, r4
 8000d5c:	d911      	bls.n	8000d82 <__udivmoddi4+0x296>
 8000d5e:	3902      	subs	r1, #2
 8000d60:	4464      	add	r4, ip
 8000d62:	1ae4      	subs	r4, r4, r3
 8000d64:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d68:	e739      	b.n	8000bde <__udivmoddi4+0xf2>
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	e6f0      	b.n	8000b50 <__udivmoddi4+0x64>
 8000d6e:	4608      	mov	r0, r1
 8000d70:	e706      	b.n	8000b80 <__udivmoddi4+0x94>
 8000d72:	45c8      	cmp	r8, r9
 8000d74:	d2ae      	bcs.n	8000cd4 <__udivmoddi4+0x1e8>
 8000d76:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d7a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d7e:	3801      	subs	r0, #1
 8000d80:	e7a8      	b.n	8000cd4 <__udivmoddi4+0x1e8>
 8000d82:	4631      	mov	r1, r6
 8000d84:	e7ed      	b.n	8000d62 <__udivmoddi4+0x276>
 8000d86:	4603      	mov	r3, r0
 8000d88:	e799      	b.n	8000cbe <__udivmoddi4+0x1d2>
 8000d8a:	4630      	mov	r0, r6
 8000d8c:	e7d4      	b.n	8000d38 <__udivmoddi4+0x24c>
 8000d8e:	46d6      	mov	lr, sl
 8000d90:	e77f      	b.n	8000c92 <__udivmoddi4+0x1a6>
 8000d92:	4463      	add	r3, ip
 8000d94:	3802      	subs	r0, #2
 8000d96:	e74d      	b.n	8000c34 <__udivmoddi4+0x148>
 8000d98:	4606      	mov	r6, r0
 8000d9a:	4623      	mov	r3, r4
 8000d9c:	4608      	mov	r0, r1
 8000d9e:	e70f      	b.n	8000bc0 <__udivmoddi4+0xd4>
 8000da0:	3e02      	subs	r6, #2
 8000da2:	4463      	add	r3, ip
 8000da4:	e730      	b.n	8000c08 <__udivmoddi4+0x11c>
 8000da6:	bf00      	nop

08000da8 <__aeabi_idiv0>:
 8000da8:	4770      	bx	lr
 8000daa:	bf00      	nop

08000dac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b086      	sub	sp, #24
 8000db0:	af04      	add	r7, sp, #16

  /* USER CODE BEGIN 1 */
	//controller parameters initially
	kp=500;
 8000db2:	4b9e      	ldr	r3, [pc, #632]	@ (800102c <main+0x280>)
 8000db4:	4a9e      	ldr	r2, [pc, #632]	@ (8001030 <main+0x284>)
 8000db6:	601a      	str	r2, [r3, #0]
	kd=0;
 8000db8:	4b9e      	ldr	r3, [pc, #632]	@ (8001034 <main+0x288>)
 8000dba:	f04f 0200 	mov.w	r2, #0
 8000dbe:	601a      	str	r2, [r3, #0]
	pos_setpoint=0;
 8000dc0:	4b9d      	ldr	r3, [pc, #628]	@ (8001038 <main+0x28c>)
 8000dc2:	f04f 0200 	mov.w	r2, #0
 8000dc6:	601a      	str	r2, [r3, #0]
	actuation_acc_prev=0;
 8000dc8:	4b9c      	ldr	r3, [pc, #624]	@ (800103c <main+0x290>)
 8000dca:	f04f 0200 	mov.w	r2, #0
 8000dce:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dd0:	f001 f8b4 	bl	8001f3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dd4:	f000 f9f2 	bl	80011bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dd8:	f000 fc26 	bl	8001628 <MX_GPIO_Init>
  MX_TIM3_Init();
 8000ddc:	f000 faba 	bl	8001354 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000de0:	f000 fb1c 	bl	800141c <MX_TIM4_Init>
  MX_USART2_UART_Init();
 8000de4:	f000 fbf6 	bl	80015d4 <MX_USART2_UART_Init>
  MX_TIM5_Init();
 8000de8:	f000 fb98 	bl	800151c <MX_TIM5_Init>
  MX_SPI1_Init();
 8000dec:	f000 fa7c 	bl	80012e8 <MX_SPI1_Init>
  MX_I2C2_Init();
 8000df0:	f000 fa4c 	bl	800128c <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 8000df4:	2100      	movs	r1, #0
 8000df6:	4892      	ldr	r0, [pc, #584]	@ (8001040 <main+0x294>)
 8000df8:	f003 fb06 	bl	8004408 <HAL_TIM_PWM_Start>
  HAL_I2C_Init(&hi2c2);
 8000dfc:	4891      	ldr	r0, [pc, #580]	@ (8001044 <main+0x298>)
 8000dfe:	f001 fc75 	bl	80026ec <HAL_I2C_Init>


  //testing stuff
  	  n = sprintf(transmit_buff,"UART initialized \r\n");
 8000e02:	4991      	ldr	r1, [pc, #580]	@ (8001048 <main+0x29c>)
 8000e04:	4891      	ldr	r0, [pc, #580]	@ (800104c <main+0x2a0>)
 8000e06:	f005 fa5f 	bl	80062c8 <siprintf>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	b29a      	uxth	r2, r3
 8000e0e:	4b90      	ldr	r3, [pc, #576]	@ (8001050 <main+0x2a4>)
 8000e10:	801a      	strh	r2, [r3, #0]
  	  HAL_UART_Transmit(&huart2, (uint8_t *) &transmit_buff, n, HAL_MAX_DELAY); //transmit the read data
 8000e12:	4b8f      	ldr	r3, [pc, #572]	@ (8001050 <main+0x2a4>)
 8000e14:	881a      	ldrh	r2, [r3, #0]
 8000e16:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000e1a:	498c      	ldr	r1, [pc, #560]	@ (800104c <main+0x2a0>)
 8000e1c:	488d      	ldr	r0, [pc, #564]	@ (8001054 <main+0x2a8>)
 8000e1e:	f004 faa1 	bl	8005364 <HAL_UART_Transmit>
  	//I2C initialization stuff

  	    	  for (i = 1; i < 128; i++) {
 8000e22:	4b8d      	ldr	r3, [pc, #564]	@ (8001058 <main+0x2ac>)
 8000e24:	2201      	movs	r2, #1
 8000e26:	601a      	str	r2, [r3, #0]
 8000e28:	e029      	b.n	8000e7e <main+0xd2>
  	    	          result = HAL_I2C_IsDeviceReady(&hi2c2, (uint16_t)(i << 1), 1, 10);
 8000e2a:	4b8b      	ldr	r3, [pc, #556]	@ (8001058 <main+0x2ac>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	b29b      	uxth	r3, r3
 8000e30:	005b      	lsls	r3, r3, #1
 8000e32:	b299      	uxth	r1, r3
 8000e34:	230a      	movs	r3, #10
 8000e36:	2201      	movs	r2, #1
 8000e38:	4882      	ldr	r0, [pc, #520]	@ (8001044 <main+0x298>)
 8000e3a:	f002 f8c7 	bl	8002fcc <HAL_I2C_IsDeviceReady>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	461a      	mov	r2, r3
 8000e42:	4b86      	ldr	r3, [pc, #536]	@ (800105c <main+0x2b0>)
 8000e44:	601a      	str	r2, [r3, #0]

  	    	          if (result == HAL_OK) {
 8000e46:	4b85      	ldr	r3, [pc, #532]	@ (800105c <main+0x2b0>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d112      	bne.n	8000e74 <main+0xc8>
  	    	              n=sprintf(transmit_buff,"Device found at address 0x%02d\n\r",(int) i);
 8000e4e:	4b82      	ldr	r3, [pc, #520]	@ (8001058 <main+0x2ac>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	461a      	mov	r2, r3
 8000e54:	4982      	ldr	r1, [pc, #520]	@ (8001060 <main+0x2b4>)
 8000e56:	487d      	ldr	r0, [pc, #500]	@ (800104c <main+0x2a0>)
 8000e58:	f005 fa36 	bl	80062c8 <siprintf>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	b29a      	uxth	r2, r3
 8000e60:	4b7b      	ldr	r3, [pc, #492]	@ (8001050 <main+0x2a4>)
 8000e62:	801a      	strh	r2, [r3, #0]
  	    	              HAL_UART_Transmit(&huart2, (uint8_t *) &transmit_buff, n, HAL_MAX_DELAY); //transmit the read data
 8000e64:	4b7a      	ldr	r3, [pc, #488]	@ (8001050 <main+0x2a4>)
 8000e66:	881a      	ldrh	r2, [r3, #0]
 8000e68:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000e6c:	4977      	ldr	r1, [pc, #476]	@ (800104c <main+0x2a0>)
 8000e6e:	4879      	ldr	r0, [pc, #484]	@ (8001054 <main+0x2a8>)
 8000e70:	f004 fa78 	bl	8005364 <HAL_UART_Transmit>
  	    	  for (i = 1; i < 128; i++) {
 8000e74:	4b78      	ldr	r3, [pc, #480]	@ (8001058 <main+0x2ac>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	3301      	adds	r3, #1
 8000e7a:	4a77      	ldr	r2, [pc, #476]	@ (8001058 <main+0x2ac>)
 8000e7c:	6013      	str	r3, [r2, #0]
 8000e7e:	4b76      	ldr	r3, [pc, #472]	@ (8001058 <main+0x2ac>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	2b7f      	cmp	r3, #127	@ 0x7f
 8000e84:	d9d1      	bls.n	8000e2a <main+0x7e>
  	    	          }
  	    	      }
  	    	      n=sprintf(transmit_buff,"Scan completed.\n\r");
 8000e86:	4977      	ldr	r1, [pc, #476]	@ (8001064 <main+0x2b8>)
 8000e88:	4870      	ldr	r0, [pc, #448]	@ (800104c <main+0x2a0>)
 8000e8a:	f005 fa1d 	bl	80062c8 <siprintf>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	b29a      	uxth	r2, r3
 8000e92:	4b6f      	ldr	r3, [pc, #444]	@ (8001050 <main+0x2a4>)
 8000e94:	801a      	strh	r2, [r3, #0]
  	    	      HAL_UART_Transmit(&huart2, (uint8_t *) &transmit_buff, n, HAL_MAX_DELAY); //transmit the read data
 8000e96:	4b6e      	ldr	r3, [pc, #440]	@ (8001050 <main+0x2a4>)
 8000e98:	881a      	ldrh	r2, [r3, #0]
 8000e9a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000e9e:	496b      	ldr	r1, [pc, #428]	@ (800104c <main+0x2a0>)
 8000ea0:	486c      	ldr	r0, [pc, #432]	@ (8001054 <main+0x2a8>)
 8000ea2:	f004 fa5f 	bl	8005364 <HAL_UART_Transmit>


  	    	      scan = HAL_I2C_IsDeviceReady(&hi2c2,(uint16_t)(IMU_ADDR << 1) , 1, 10);
 8000ea6:	230a      	movs	r3, #10
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	2150      	movs	r1, #80	@ 0x50
 8000eac:	4865      	ldr	r0, [pc, #404]	@ (8001044 <main+0x298>)
 8000eae:	f002 f88d 	bl	8002fcc <HAL_I2C_IsDeviceReady>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	461a      	mov	r2, r3
 8000eb6:	4b6c      	ldr	r3, [pc, #432]	@ (8001068 <main+0x2bc>)
 8000eb8:	601a      	str	r2, [r3, #0]

  	    	          if (scan == HAL_OK) {
 8000eba:	4b6b      	ldr	r3, [pc, #428]	@ (8001068 <main+0x2bc>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d10f      	bne.n	8000ee2 <main+0x136>
  	    	              n=sprintf(transmit_buff,"IMU Found at 40\n\r");
 8000ec2:	496a      	ldr	r1, [pc, #424]	@ (800106c <main+0x2c0>)
 8000ec4:	4861      	ldr	r0, [pc, #388]	@ (800104c <main+0x2a0>)
 8000ec6:	f005 f9ff 	bl	80062c8 <siprintf>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	b29a      	uxth	r2, r3
 8000ece:	4b60      	ldr	r3, [pc, #384]	@ (8001050 <main+0x2a4>)
 8000ed0:	801a      	strh	r2, [r3, #0]
  	    	              HAL_UART_Transmit(&huart2, (uint8_t *) &transmit_buff, n, HAL_MAX_DELAY); //transmit the read data
 8000ed2:	4b5f      	ldr	r3, [pc, #380]	@ (8001050 <main+0x2a4>)
 8000ed4:	881a      	ldrh	r2, [r3, #0]
 8000ed6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000eda:	495c      	ldr	r1, [pc, #368]	@ (800104c <main+0x2a0>)
 8000edc:	485d      	ldr	r0, [pc, #372]	@ (8001054 <main+0x2a8>)
 8000ede:	f004 fa41 	bl	8005364 <HAL_UART_Transmit>

  	    	          }
  	    	          if (scan != HAL_OK) {
 8000ee2:	4b61      	ldr	r3, [pc, #388]	@ (8001068 <main+0x2bc>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d00f      	beq.n	8000f0a <main+0x15e>
  	    	             n=sprintf(transmit_buff,"No IMU found\n\r");
 8000eea:	4961      	ldr	r1, [pc, #388]	@ (8001070 <main+0x2c4>)
 8000eec:	4857      	ldr	r0, [pc, #348]	@ (800104c <main+0x2a0>)
 8000eee:	f005 f9eb 	bl	80062c8 <siprintf>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	b29a      	uxth	r2, r3
 8000ef6:	4b56      	ldr	r3, [pc, #344]	@ (8001050 <main+0x2a4>)
 8000ef8:	801a      	strh	r2, [r3, #0]
  	    	             HAL_UART_Transmit(&huart2, (uint8_t *) &transmit_buff, n, HAL_MAX_DELAY); //transmit the read data
 8000efa:	4b55      	ldr	r3, [pc, #340]	@ (8001050 <main+0x2a4>)
 8000efc:	881a      	ldrh	r2, [r3, #0]
 8000efe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000f02:	4952      	ldr	r1, [pc, #328]	@ (800104c <main+0x2a0>)
 8000f04:	4853      	ldr	r0, [pc, #332]	@ (8001054 <main+0x2a8>)
 8000f06:	f004 fa2d 	bl	8005364 <HAL_UART_Transmit>
  	    	          }
//put the devise in NDOF mode
i2c_buff_write[0]=NDOF_MODE;
 8000f0a:	4b5a      	ldr	r3, [pc, #360]	@ (8001074 <main+0x2c8>)
 8000f0c:	220c      	movs	r2, #12
 8000f0e:	801a      	strh	r2, [r3, #0]

HAL_I2C_Mem_Write (&hi2c2,IMU_ADDR << 1, OP_MODE_REG, I2C_MEMADD_SIZE_8BIT , (uint8_t *) &i2c_buff_write, 1 , HAL_MAX_DELAY );
 8000f10:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000f14:	9302      	str	r3, [sp, #8]
 8000f16:	2301      	movs	r3, #1
 8000f18:	9301      	str	r3, [sp, #4]
 8000f1a:	4b56      	ldr	r3, [pc, #344]	@ (8001074 <main+0x2c8>)
 8000f1c:	9300      	str	r3, [sp, #0]
 8000f1e:	2301      	movs	r3, #1
 8000f20:	223d      	movs	r2, #61	@ 0x3d
 8000f22:	2150      	movs	r1, #80	@ 0x50
 8000f24:	4847      	ldr	r0, [pc, #284]	@ (8001044 <main+0x298>)
 8000f26:	f001 fd25 	bl	8002974 <HAL_I2C_Mem_Write>
//find offset for euler angle y
for (i=0; i<20;i++){
 8000f2a:	4b4b      	ldr	r3, [pc, #300]	@ (8001058 <main+0x2ac>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	601a      	str	r2, [r3, #0]
 8000f30:	e014      	b.n	8000f5c <main+0x1b0>
HAL_I2C_Mem_Read(&hi2c2, IMU_ADDR << 1,  EUL_X  , I2C_MEMADD_SIZE_8BIT,(uint8_t *)&i2c_buff_read,6,HAL_MAX_DELAY);
 8000f32:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000f36:	9302      	str	r3, [sp, #8]
 8000f38:	2306      	movs	r3, #6
 8000f3a:	9301      	str	r3, [sp, #4]
 8000f3c:	4b4e      	ldr	r3, [pc, #312]	@ (8001078 <main+0x2cc>)
 8000f3e:	9300      	str	r3, [sp, #0]
 8000f40:	2301      	movs	r3, #1
 8000f42:	221a      	movs	r2, #26
 8000f44:	2150      	movs	r1, #80	@ 0x50
 8000f46:	483f      	ldr	r0, [pc, #252]	@ (8001044 <main+0x298>)
 8000f48:	f001 fe0e 	bl	8002b68 <HAL_I2C_Mem_Read>
HAL_Delay(20);
 8000f4c:	2014      	movs	r0, #20
 8000f4e:	f001 f867 	bl	8002020 <HAL_Delay>
for (i=0; i<20;i++){
 8000f52:	4b41      	ldr	r3, [pc, #260]	@ (8001058 <main+0x2ac>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	3301      	adds	r3, #1
 8000f58:	4a3f      	ldr	r2, [pc, #252]	@ (8001058 <main+0x2ac>)
 8000f5a:	6013      	str	r3, [r2, #0]
 8000f5c:	4b3e      	ldr	r3, [pc, #248]	@ (8001058 <main+0x2ac>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	2b13      	cmp	r3, #19
 8000f62:	d9e6      	bls.n	8000f32 <main+0x186>
}
HAL_I2C_Mem_Read(&hi2c2, IMU_ADDR << 1,  EUL_X  , I2C_MEMADD_SIZE_8BIT,(uint8_t *)&i2c_buff_read,6,HAL_MAX_DELAY);
 8000f64:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000f68:	9302      	str	r3, [sp, #8]
 8000f6a:	2306      	movs	r3, #6
 8000f6c:	9301      	str	r3, [sp, #4]
 8000f6e:	4b42      	ldr	r3, [pc, #264]	@ (8001078 <main+0x2cc>)
 8000f70:	9300      	str	r3, [sp, #0]
 8000f72:	2301      	movs	r3, #1
 8000f74:	221a      	movs	r2, #26
 8000f76:	2150      	movs	r1, #80	@ 0x50
 8000f78:	4832      	ldr	r0, [pc, #200]	@ (8001044 <main+0x298>)
 8000f7a:	f001 fdf5 	bl	8002b68 <HAL_I2C_Mem_Read>
eul_y_offset=((i2c_buff_read[3]<<8 | i2c_buff_read[2])/16);
 8000f7e:	4b3e      	ldr	r3, [pc, #248]	@ (8001078 <main+0x2cc>)
 8000f80:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000f84:	021b      	lsls	r3, r3, #8
 8000f86:	4a3c      	ldr	r2, [pc, #240]	@ (8001078 <main+0x2cc>)
 8000f88:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8000f8c:	4313      	orrs	r3, r2
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	da00      	bge.n	8000f94 <main+0x1e8>
 8000f92:	330f      	adds	r3, #15
 8000f94:	111b      	asrs	r3, r3, #4
 8000f96:	ee07 3a90 	vmov	s15, r3
 8000f9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f9e:	4b37      	ldr	r3, [pc, #220]	@ (800107c <main+0x2d0>)
 8000fa0:	edc3 7a00 	vstr	s15, [r3]
//initialize motor

start_motor();
 8000fa4:	f000 fbc6 	bl	8001734 <start_motor>
set_motor(160000);
 8000fa8:	4835      	ldr	r0, [pc, #212]	@ (8001080 <main+0x2d4>)
 8000faa:	f000 fbb3 	bl	8001714 <set_motor>
HAL_Delay(3000);
 8000fae:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000fb2:	f001 f835 	bl	8002020 <HAL_Delay>

int go=1;
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	607b      	str	r3, [r7, #4]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (go)
 8000fba:	e0d8      	b.n	800116e <main+0x3c2>
    {
	  for (count = 0; count < 20; count++) {
 8000fbc:	4b31      	ldr	r3, [pc, #196]	@ (8001084 <main+0x2d8>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	601a      	str	r2, [r3, #0]
 8000fc2:	e0ca      	b.n	800115a <main+0x3ae>

  	  //measure velocity and position

  	  pos_meas= get_pos();
 8000fc4:	f000 fbde 	bl	8001784 <get_pos>
 8000fc8:	eef0 7a40 	vmov.f32	s15, s0
 8000fcc:	4b2e      	ldr	r3, [pc, #184]	@ (8001088 <main+0x2dc>)
 8000fce:	edc3 7a00 	vstr	s15, [r3]
      velo_meas=get_vel();
 8000fd2:	f000 fc81 	bl	80018d8 <get_vel>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	b29a      	uxth	r2, r3
 8000fda:	4b2c      	ldr	r3, [pc, #176]	@ (800108c <main+0x2e0>)
 8000fdc:	801a      	strh	r2, [r3, #0]
      pos_error=pos_setpoint-pos_meas;
 8000fde:	4b16      	ldr	r3, [pc, #88]	@ (8001038 <main+0x28c>)
 8000fe0:	ed93 7a00 	vldr	s14, [r3]
 8000fe4:	4b28      	ldr	r3, [pc, #160]	@ (8001088 <main+0x2dc>)
 8000fe6:	edd3 7a00 	vldr	s15, [r3]
 8000fea:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fee:	4b28      	ldr	r3, [pc, #160]	@ (8001090 <main+0x2e4>)
 8000ff0:	edc3 7a00 	vstr	s15, [r3]


  	  actuation_pwm=kp*pos_error+kd*velo_error+actuation_acc_prev;
 8000ff4:	4b0d      	ldr	r3, [pc, #52]	@ (800102c <main+0x280>)
 8000ff6:	ed93 7a00 	vldr	s14, [r3]
 8000ffa:	4b25      	ldr	r3, [pc, #148]	@ (8001090 <main+0x2e4>)
 8000ffc:	edd3 7a00 	vldr	s15, [r3]
 8001000:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001004:	4b21      	ldr	r3, [pc, #132]	@ (800108c <main+0x2e0>)
 8001006:	881b      	ldrh	r3, [r3, #0]
 8001008:	ee07 3a90 	vmov	s15, r3
 800100c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001010:	4b08      	ldr	r3, [pc, #32]	@ (8001034 <main+0x288>)
 8001012:	edd3 7a00 	vldr	s15, [r3]
 8001016:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800101a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800101e:	4b1d      	ldr	r3, [pc, #116]	@ (8001094 <main+0x2e8>)
 8001020:	edc3 7a00 	vstr	s15, [r3]
  	  //for loop to do the ramp input of pwm
  	  for (i = 1; i < 5; i++) {
 8001024:	4b0c      	ldr	r3, [pc, #48]	@ (8001058 <main+0x2ac>)
 8001026:	2201      	movs	r2, #1
 8001028:	601a      	str	r2, [r3, #0]
 800102a:	e076      	b.n	800111a <main+0x36e>
 800102c:	20000330 	.word	0x20000330
 8001030:	43fa0000 	.word	0x43fa0000
 8001034:	20000334 	.word	0x20000334
 8001038:	20000328 	.word	0x20000328
 800103c:	20000080 	.word	0x20000080
 8001040:	20000260 	.word	0x20000260
 8001044:	20000124 	.word	0x20000124
 8001048:	08006c20 	.word	0x08006c20
 800104c:	2000008c 	.word	0x2000008c
 8001050:	20000122 	.word	0x20000122
 8001054:	200002a8 	.word	0x200002a8
 8001058:	20000084 	.word	0x20000084
 800105c:	200002f4 	.word	0x200002f4
 8001060:	08006c34 	.word	0x08006c34
 8001064:	08006c58 	.word	0x08006c58
 8001068:	200002f0 	.word	0x200002f0
 800106c:	08006c6c 	.word	0x08006c6c
 8001070:	08006c80 	.word	0x08006c80
 8001074:	200002f8 	.word	0x200002f8
 8001078:	200002fc 	.word	0x200002fc
 800107c:	2000031c 	.word	0x2000031c
 8001080:	00027100 	.word	0x00027100
 8001084:	20000088 	.word	0x20000088
 8001088:	20000320 	.word	0x20000320
 800108c:	20000324 	.word	0x20000324
 8001090:	2000032c 	.word	0x2000032c
 8001094:	20000078 	.word	0x20000078

  		  actuation_acc=i*actuation_pwm+160000;
 8001098:	4b39      	ldr	r3, [pc, #228]	@ (8001180 <main+0x3d4>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	ee07 3a90 	vmov	s15, r3
 80010a0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80010a4:	4b37      	ldr	r3, [pc, #220]	@ (8001184 <main+0x3d8>)
 80010a6:	edd3 7a00 	vldr	s15, [r3]
 80010aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010ae:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 8001188 <main+0x3dc>
 80010b2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80010b6:	4b35      	ldr	r3, [pc, #212]	@ (800118c <main+0x3e0>)
 80010b8:	edc3 7a00 	vstr	s15, [r3]
          actuation_acc_prev=actuation_acc;
 80010bc:	4b33      	ldr	r3, [pc, #204]	@ (800118c <main+0x3e0>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a33      	ldr	r2, [pc, #204]	@ (8001190 <main+0x3e4>)
 80010c2:	6013      	str	r3, [r2, #0]
  		  //these if statements limit pwm control within available range
  		  if(actuation_acc>190000){
 80010c4:	4b31      	ldr	r3, [pc, #196]	@ (800118c <main+0x3e0>)
 80010c6:	edd3 7a00 	vldr	s15, [r3]
 80010ca:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8001194 <main+0x3e8>
 80010ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010d6:	dd02      	ble.n	80010de <main+0x332>
  			actuation_acc=190000;
 80010d8:	4b2c      	ldr	r3, [pc, #176]	@ (800118c <main+0x3e0>)
 80010da:	4a2f      	ldr	r2, [pc, #188]	@ (8001198 <main+0x3ec>)
 80010dc:	601a      	str	r2, [r3, #0]
  		  }
  		 if(actuation_acc<96000){
 80010de:	4b2b      	ldr	r3, [pc, #172]	@ (800118c <main+0x3e0>)
 80010e0:	edd3 7a00 	vldr	s15, [r3]
 80010e4:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 800119c <main+0x3f0>
 80010e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010f0:	d502      	bpl.n	80010f8 <main+0x34c>
  		   actuation_acc=96000;
 80010f2:	4b26      	ldr	r3, [pc, #152]	@ (800118c <main+0x3e0>)
 80010f4:	4a2a      	ldr	r2, [pc, #168]	@ (80011a0 <main+0x3f4>)
 80010f6:	601a      	str	r2, [r3, #0]
  		  }
  		HAL_Delay(10);
 80010f8:	200a      	movs	r0, #10
 80010fa:	f000 ff91 	bl	8002020 <HAL_Delay>
  		set_motor(actuation_acc);
 80010fe:	4b23      	ldr	r3, [pc, #140]	@ (800118c <main+0x3e0>)
 8001100:	edd3 7a00 	vldr	s15, [r3]
 8001104:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001108:	ee17 0a90 	vmov	r0, s15
 800110c:	f000 fb02 	bl	8001714 <set_motor>
  	  for (i = 1; i < 5; i++) {
 8001110:	4b1b      	ldr	r3, [pc, #108]	@ (8001180 <main+0x3d4>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	3301      	adds	r3, #1
 8001116:	4a1a      	ldr	r2, [pc, #104]	@ (8001180 <main+0x3d4>)
 8001118:	6013      	str	r3, [r2, #0]
 800111a:	4b19      	ldr	r3, [pc, #100]	@ (8001180 <main+0x3d4>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	2b04      	cmp	r3, #4
 8001120:	d9ba      	bls.n	8001098 <main+0x2ec>



  	  }
  	 n=sprintf(transmit_buff,"PWM: %ld\n\r",(int32_t)actuation_acc);
 8001122:	4b1a      	ldr	r3, [pc, #104]	@ (800118c <main+0x3e0>)
 8001124:	edd3 7a00 	vldr	s15, [r3]
 8001128:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800112c:	ee17 2a90 	vmov	r2, s15
 8001130:	491c      	ldr	r1, [pc, #112]	@ (80011a4 <main+0x3f8>)
 8001132:	481d      	ldr	r0, [pc, #116]	@ (80011a8 <main+0x3fc>)
 8001134:	f005 f8c8 	bl	80062c8 <siprintf>
 8001138:	4603      	mov	r3, r0
 800113a:	b29a      	uxth	r2, r3
 800113c:	4b1b      	ldr	r3, [pc, #108]	@ (80011ac <main+0x400>)
 800113e:	801a      	strh	r2, [r3, #0]
  	  	 	HAL_UART_Transmit(&huart2, (uint8_t *) &transmit_buff, n, HAL_MAX_DELAY); //transmit the read data
 8001140:	4b1a      	ldr	r3, [pc, #104]	@ (80011ac <main+0x400>)
 8001142:	881a      	ldrh	r2, [r3, #0]
 8001144:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001148:	4917      	ldr	r1, [pc, #92]	@ (80011a8 <main+0x3fc>)
 800114a:	4819      	ldr	r0, [pc, #100]	@ (80011b0 <main+0x404>)
 800114c:	f004 f90a 	bl	8005364 <HAL_UART_Transmit>
	  for (count = 0; count < 20; count++) {
 8001150:	4b18      	ldr	r3, [pc, #96]	@ (80011b4 <main+0x408>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	3301      	adds	r3, #1
 8001156:	4a17      	ldr	r2, [pc, #92]	@ (80011b4 <main+0x408>)
 8001158:	6013      	str	r3, [r2, #0]
 800115a:	4b16      	ldr	r3, [pc, #88]	@ (80011b4 <main+0x408>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	2b13      	cmp	r3, #19
 8001160:	f67f af30 	bls.w	8000fc4 <main+0x218>



	  }
	  set_motor(143000);
 8001164:	4814      	ldr	r0, [pc, #80]	@ (80011b8 <main+0x40c>)
 8001166:	f000 fad5 	bl	8001714 <set_motor>
	  go=0;
 800116a:	2300      	movs	r3, #0
 800116c:	607b      	str	r3, [r7, #4]
  while (go)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	2b00      	cmp	r3, #0
 8001172:	f47f af23 	bne.w	8000fbc <main+0x210>
 8001176:	2300      	movs	r3, #0
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 8001178:	4618      	mov	r0, r3
 800117a:	3708      	adds	r7, #8
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	20000084 	.word	0x20000084
 8001184:	20000078 	.word	0x20000078
 8001188:	481c4000 	.word	0x481c4000
 800118c:	2000007c 	.word	0x2000007c
 8001190:	20000080 	.word	0x20000080
 8001194:	48398c00 	.word	0x48398c00
 8001198:	48398c00 	.word	0x48398c00
 800119c:	47bb8000 	.word	0x47bb8000
 80011a0:	47bb8000 	.word	0x47bb8000
 80011a4:	08006c90 	.word	0x08006c90
 80011a8:	2000008c 	.word	0x2000008c
 80011ac:	20000122 	.word	0x20000122
 80011b0:	200002a8 	.word	0x200002a8
 80011b4:	20000088 	.word	0x20000088
 80011b8:	00022e98 	.word	0x00022e98

080011bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b094      	sub	sp, #80	@ 0x50
 80011c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011c2:	f107 0320 	add.w	r3, r7, #32
 80011c6:	2230      	movs	r2, #48	@ 0x30
 80011c8:	2100      	movs	r1, #0
 80011ca:	4618      	mov	r0, r3
 80011cc:	f005 f89c 	bl	8006308 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011d0:	f107 030c 	add.w	r3, r7, #12
 80011d4:	2200      	movs	r2, #0
 80011d6:	601a      	str	r2, [r3, #0]
 80011d8:	605a      	str	r2, [r3, #4]
 80011da:	609a      	str	r2, [r3, #8]
 80011dc:	60da      	str	r2, [r3, #12]
 80011de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011e0:	2300      	movs	r3, #0
 80011e2:	60bb      	str	r3, [r7, #8]
 80011e4:	4b27      	ldr	r3, [pc, #156]	@ (8001284 <SystemClock_Config+0xc8>)
 80011e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011e8:	4a26      	ldr	r2, [pc, #152]	@ (8001284 <SystemClock_Config+0xc8>)
 80011ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011ee:	6413      	str	r3, [r2, #64]	@ 0x40
 80011f0:	4b24      	ldr	r3, [pc, #144]	@ (8001284 <SystemClock_Config+0xc8>)
 80011f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011f8:	60bb      	str	r3, [r7, #8]
 80011fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011fc:	2300      	movs	r3, #0
 80011fe:	607b      	str	r3, [r7, #4]
 8001200:	4b21      	ldr	r3, [pc, #132]	@ (8001288 <SystemClock_Config+0xcc>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4a20      	ldr	r2, [pc, #128]	@ (8001288 <SystemClock_Config+0xcc>)
 8001206:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800120a:	6013      	str	r3, [r2, #0]
 800120c:	4b1e      	ldr	r3, [pc, #120]	@ (8001288 <SystemClock_Config+0xcc>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001214:	607b      	str	r3, [r7, #4]
 8001216:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001218:	2302      	movs	r3, #2
 800121a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800121c:	2301      	movs	r3, #1
 800121e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001220:	2310      	movs	r3, #16
 8001222:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001224:	2302      	movs	r3, #2
 8001226:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001228:	2300      	movs	r3, #0
 800122a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800122c:	2308      	movs	r3, #8
 800122e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001230:	2360      	movs	r3, #96	@ 0x60
 8001232:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001234:	2302      	movs	r3, #2
 8001236:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001238:	2304      	movs	r3, #4
 800123a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800123c:	f107 0320 	add.w	r3, r7, #32
 8001240:	4618      	mov	r0, r3
 8001242:	f002 fbb1 	bl	80039a8 <HAL_RCC_OscConfig>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d001      	beq.n	8001250 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800124c:	f000 fb9e 	bl	800198c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001250:	230f      	movs	r3, #15
 8001252:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001254:	2302      	movs	r3, #2
 8001256:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001258:	2300      	movs	r3, #0
 800125a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800125c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001260:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001262:	2300      	movs	r3, #0
 8001264:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001266:	f107 030c 	add.w	r3, r7, #12
 800126a:	2103      	movs	r1, #3
 800126c:	4618      	mov	r0, r3
 800126e:	f002 fe13 	bl	8003e98 <HAL_RCC_ClockConfig>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001278:	f000 fb88 	bl	800198c <Error_Handler>
  }
}
 800127c:	bf00      	nop
 800127e:	3750      	adds	r7, #80	@ 0x50
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	40023800 	.word	0x40023800
 8001288:	40007000 	.word	0x40007000

0800128c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001290:	4b12      	ldr	r3, [pc, #72]	@ (80012dc <MX_I2C2_Init+0x50>)
 8001292:	4a13      	ldr	r2, [pc, #76]	@ (80012e0 <MX_I2C2_Init+0x54>)
 8001294:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 200000;
 8001296:	4b11      	ldr	r3, [pc, #68]	@ (80012dc <MX_I2C2_Init+0x50>)
 8001298:	4a12      	ldr	r2, [pc, #72]	@ (80012e4 <MX_I2C2_Init+0x58>)
 800129a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800129c:	4b0f      	ldr	r3, [pc, #60]	@ (80012dc <MX_I2C2_Init+0x50>)
 800129e:	2200      	movs	r2, #0
 80012a0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80012a2:	4b0e      	ldr	r3, [pc, #56]	@ (80012dc <MX_I2C2_Init+0x50>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012a8:	4b0c      	ldr	r3, [pc, #48]	@ (80012dc <MX_I2C2_Init+0x50>)
 80012aa:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80012ae:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012b0:	4b0a      	ldr	r3, [pc, #40]	@ (80012dc <MX_I2C2_Init+0x50>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80012b6:	4b09      	ldr	r3, [pc, #36]	@ (80012dc <MX_I2C2_Init+0x50>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012bc:	4b07      	ldr	r3, [pc, #28]	@ (80012dc <MX_I2C2_Init+0x50>)
 80012be:	2200      	movs	r2, #0
 80012c0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012c2:	4b06      	ldr	r3, [pc, #24]	@ (80012dc <MX_I2C2_Init+0x50>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80012c8:	4804      	ldr	r0, [pc, #16]	@ (80012dc <MX_I2C2_Init+0x50>)
 80012ca:	f001 fa0f 	bl	80026ec <HAL_I2C_Init>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d001      	beq.n	80012d8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80012d4:	f000 fb5a 	bl	800198c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80012d8:	bf00      	nop
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	20000124 	.word	0x20000124
 80012e0:	40005800 	.word	0x40005800
 80012e4:	00030d40 	.word	0x00030d40

080012e8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80012ec:	4b17      	ldr	r3, [pc, #92]	@ (800134c <MX_SPI1_Init+0x64>)
 80012ee:	4a18      	ldr	r2, [pc, #96]	@ (8001350 <MX_SPI1_Init+0x68>)
 80012f0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80012f2:	4b16      	ldr	r3, [pc, #88]	@ (800134c <MX_SPI1_Init+0x64>)
 80012f4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80012f8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80012fa:	4b14      	ldr	r3, [pc, #80]	@ (800134c <MX_SPI1_Init+0x64>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001300:	4b12      	ldr	r3, [pc, #72]	@ (800134c <MX_SPI1_Init+0x64>)
 8001302:	2200      	movs	r2, #0
 8001304:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001306:	4b11      	ldr	r3, [pc, #68]	@ (800134c <MX_SPI1_Init+0x64>)
 8001308:	2202      	movs	r2, #2
 800130a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800130c:	4b0f      	ldr	r3, [pc, #60]	@ (800134c <MX_SPI1_Init+0x64>)
 800130e:	2200      	movs	r2, #0
 8001310:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001312:	4b0e      	ldr	r3, [pc, #56]	@ (800134c <MX_SPI1_Init+0x64>)
 8001314:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001318:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800131a:	4b0c      	ldr	r3, [pc, #48]	@ (800134c <MX_SPI1_Init+0x64>)
 800131c:	2218      	movs	r2, #24
 800131e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001320:	4b0a      	ldr	r3, [pc, #40]	@ (800134c <MX_SPI1_Init+0x64>)
 8001322:	2200      	movs	r2, #0
 8001324:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001326:	4b09      	ldr	r3, [pc, #36]	@ (800134c <MX_SPI1_Init+0x64>)
 8001328:	2200      	movs	r2, #0
 800132a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800132c:	4b07      	ldr	r3, [pc, #28]	@ (800134c <MX_SPI1_Init+0x64>)
 800132e:	2200      	movs	r2, #0
 8001330:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001332:	4b06      	ldr	r3, [pc, #24]	@ (800134c <MX_SPI1_Init+0x64>)
 8001334:	220a      	movs	r2, #10
 8001336:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001338:	4804      	ldr	r0, [pc, #16]	@ (800134c <MX_SPI1_Init+0x64>)
 800133a:	f002 ff8d 	bl	8004258 <HAL_SPI_Init>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d001      	beq.n	8001348 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001344:	f000 fb22 	bl	800198c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001348:	bf00      	nop
 800134a:	bd80      	pop	{r7, pc}
 800134c:	20000178 	.word	0x20000178
 8001350:	40013000 	.word	0x40013000

08001354 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b08a      	sub	sp, #40	@ 0x28
 8001358:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800135a:	f107 0320 	add.w	r3, r7, #32
 800135e:	2200      	movs	r2, #0
 8001360:	601a      	str	r2, [r3, #0]
 8001362:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001364:	1d3b      	adds	r3, r7, #4
 8001366:	2200      	movs	r2, #0
 8001368:	601a      	str	r2, [r3, #0]
 800136a:	605a      	str	r2, [r3, #4]
 800136c:	609a      	str	r2, [r3, #8]
 800136e:	60da      	str	r2, [r3, #12]
 8001370:	611a      	str	r2, [r3, #16]
 8001372:	615a      	str	r2, [r3, #20]
 8001374:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001376:	4b27      	ldr	r3, [pc, #156]	@ (8001414 <MX_TIM3_Init+0xc0>)
 8001378:	4a27      	ldr	r2, [pc, #156]	@ (8001418 <MX_TIM3_Init+0xc4>)
 800137a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800137c:	4b25      	ldr	r3, [pc, #148]	@ (8001414 <MX_TIM3_Init+0xc0>)
 800137e:	2200      	movs	r2, #0
 8001380:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001382:	4b24      	ldr	r3, [pc, #144]	@ (8001414 <MX_TIM3_Init+0xc0>)
 8001384:	2200      	movs	r2, #0
 8001386:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 3999;
 8001388:	4b22      	ldr	r3, [pc, #136]	@ (8001414 <MX_TIM3_Init+0xc0>)
 800138a:	f640 729f 	movw	r2, #3999	@ 0xf9f
 800138e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001390:	4b20      	ldr	r3, [pc, #128]	@ (8001414 <MX_TIM3_Init+0xc0>)
 8001392:	2200      	movs	r2, #0
 8001394:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001396:	4b1f      	ldr	r3, [pc, #124]	@ (8001414 <MX_TIM3_Init+0xc0>)
 8001398:	2200      	movs	r2, #0
 800139a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800139c:	481d      	ldr	r0, [pc, #116]	@ (8001414 <MX_TIM3_Init+0xc0>)
 800139e:	f002 ffe4 	bl	800436a <HAL_TIM_PWM_Init>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d001      	beq.n	80013ac <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80013a8:	f000 faf0 	bl	800198c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013ac:	2300      	movs	r3, #0
 80013ae:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013b0:	2300      	movs	r3, #0
 80013b2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80013b4:	f107 0320 	add.w	r3, r7, #32
 80013b8:	4619      	mov	r1, r3
 80013ba:	4816      	ldr	r0, [pc, #88]	@ (8001414 <MX_TIM3_Init+0xc0>)
 80013bc:	f003 ff00 	bl	80051c0 <HAL_TIMEx_MasterConfigSynchronization>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d001      	beq.n	80013ca <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80013c6:	f000 fae1 	bl	800198c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013ca:	2360      	movs	r3, #96	@ 0x60
 80013cc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80013ce:	2300      	movs	r3, #0
 80013d0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013d2:	2300      	movs	r3, #0
 80013d4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013d6:	2300      	movs	r3, #0
 80013d8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80013da:	1d3b      	adds	r3, r7, #4
 80013dc:	2208      	movs	r2, #8
 80013de:	4619      	mov	r1, r3
 80013e0:	480c      	ldr	r0, [pc, #48]	@ (8001414 <MX_TIM3_Init+0xc0>)
 80013e2:	f003 fa9d 	bl	8004920 <HAL_TIM_PWM_ConfigChannel>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d001      	beq.n	80013f0 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80013ec:	f000 face 	bl	800198c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80013f0:	1d3b      	adds	r3, r7, #4
 80013f2:	220c      	movs	r2, #12
 80013f4:	4619      	mov	r1, r3
 80013f6:	4807      	ldr	r0, [pc, #28]	@ (8001414 <MX_TIM3_Init+0xc0>)
 80013f8:	f003 fa92 	bl	8004920 <HAL_TIM_PWM_ConfigChannel>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001402:	f000 fac3 	bl	800198c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001406:	4803      	ldr	r0, [pc, #12]	@ (8001414 <MX_TIM3_Init+0xc0>)
 8001408:	f000 fc26 	bl	8001c58 <HAL_TIM_MspPostInit>

}
 800140c:	bf00      	nop
 800140e:	3728      	adds	r7, #40	@ 0x28
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	200001d0 	.word	0x200001d0
 8001418:	40000400 	.word	0x40000400

0800141c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b086      	sub	sp, #24
 8001420:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001422:	f107 0310 	add.w	r3, r7, #16
 8001426:	2200      	movs	r2, #0
 8001428:	601a      	str	r2, [r3, #0]
 800142a:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800142c:	463b      	mov	r3, r7
 800142e:	2200      	movs	r2, #0
 8001430:	601a      	str	r2, [r3, #0]
 8001432:	605a      	str	r2, [r3, #4]
 8001434:	609a      	str	r2, [r3, #8]
 8001436:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001438:	4b36      	ldr	r3, [pc, #216]	@ (8001514 <MX_TIM4_Init+0xf8>)
 800143a:	4a37      	ldr	r2, [pc, #220]	@ (8001518 <MX_TIM4_Init+0xfc>)
 800143c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 95;
 800143e:	4b35      	ldr	r3, [pc, #212]	@ (8001514 <MX_TIM4_Init+0xf8>)
 8001440:	225f      	movs	r2, #95	@ 0x5f
 8001442:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001444:	4b33      	ldr	r3, [pc, #204]	@ (8001514 <MX_TIM4_Init+0xf8>)
 8001446:	2200      	movs	r2, #0
 8001448:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800144a:	4b32      	ldr	r3, [pc, #200]	@ (8001514 <MX_TIM4_Init+0xf8>)
 800144c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001450:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001452:	4b30      	ldr	r3, [pc, #192]	@ (8001514 <MX_TIM4_Init+0xf8>)
 8001454:	2200      	movs	r2, #0
 8001456:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001458:	4b2e      	ldr	r3, [pc, #184]	@ (8001514 <MX_TIM4_Init+0xf8>)
 800145a:	2200      	movs	r2, #0
 800145c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 800145e:	482d      	ldr	r0, [pc, #180]	@ (8001514 <MX_TIM4_Init+0xf8>)
 8001460:	f003 f882 	bl	8004568 <HAL_TIM_IC_Init>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800146a:	f000 fa8f 	bl	800198c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800146e:	2300      	movs	r3, #0
 8001470:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001472:	2300      	movs	r3, #0
 8001474:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001476:	f107 0310 	add.w	r3, r7, #16
 800147a:	4619      	mov	r1, r3
 800147c:	4825      	ldr	r0, [pc, #148]	@ (8001514 <MX_TIM4_Init+0xf8>)
 800147e:	f003 fe9f 	bl	80051c0 <HAL_TIMEx_MasterConfigSynchronization>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d001      	beq.n	800148c <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8001488:	f000 fa80 	bl	800198c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800148c:	2300      	movs	r3, #0
 800148e:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001490:	2301      	movs	r3, #1
 8001492:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001494:	2300      	movs	r3, #0
 8001496:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001498:	2300      	movs	r3, #0
 800149a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800149c:	463b      	mov	r3, r7
 800149e:	2200      	movs	r2, #0
 80014a0:	4619      	mov	r1, r3
 80014a2:	481c      	ldr	r0, [pc, #112]	@ (8001514 <MX_TIM4_Init+0xf8>)
 80014a4:	f003 f99f 	bl	80047e6 <HAL_TIM_IC_ConfigChannel>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 80014ae:	f000 fa6d 	bl	800198c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80014b2:	2302      	movs	r3, #2
 80014b4:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80014b6:	2302      	movs	r3, #2
 80014b8:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80014ba:	463b      	mov	r3, r7
 80014bc:	2204      	movs	r2, #4
 80014be:	4619      	mov	r1, r3
 80014c0:	4814      	ldr	r0, [pc, #80]	@ (8001514 <MX_TIM4_Init+0xf8>)
 80014c2:	f003 f990 	bl	80047e6 <HAL_TIM_IC_ConfigChannel>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d001      	beq.n	80014d0 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 80014cc:	f000 fa5e 	bl	800198c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80014d0:	2300      	movs	r3, #0
 80014d2:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80014d4:	2301      	movs	r3, #1
 80014d6:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 80014d8:	463b      	mov	r3, r7
 80014da:	2208      	movs	r2, #8
 80014dc:	4619      	mov	r1, r3
 80014de:	480d      	ldr	r0, [pc, #52]	@ (8001514 <MX_TIM4_Init+0xf8>)
 80014e0:	f003 f981 	bl	80047e6 <HAL_TIM_IC_ConfigChannel>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <MX_TIM4_Init+0xd2>
  {
    Error_Handler();
 80014ea:	f000 fa4f 	bl	800198c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80014ee:	2302      	movs	r3, #2
 80014f0:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80014f2:	2302      	movs	r3, #2
 80014f4:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 80014f6:	463b      	mov	r3, r7
 80014f8:	220c      	movs	r2, #12
 80014fa:	4619      	mov	r1, r3
 80014fc:	4805      	ldr	r0, [pc, #20]	@ (8001514 <MX_TIM4_Init+0xf8>)
 80014fe:	f003 f972 	bl	80047e6 <HAL_TIM_IC_ConfigChannel>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d001      	beq.n	800150c <MX_TIM4_Init+0xf0>
  {
    Error_Handler();
 8001508:	f000 fa40 	bl	800198c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800150c:	bf00      	nop
 800150e:	3718      	adds	r7, #24
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}
 8001514:	20000218 	.word	0x20000218
 8001518:	40000800 	.word	0x40000800

0800151c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b08a      	sub	sp, #40	@ 0x28
 8001520:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001522:	f107 0320 	add.w	r3, r7, #32
 8001526:	2200      	movs	r2, #0
 8001528:	601a      	str	r2, [r3, #0]
 800152a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800152c:	1d3b      	adds	r3, r7, #4
 800152e:	2200      	movs	r2, #0
 8001530:	601a      	str	r2, [r3, #0]
 8001532:	605a      	str	r2, [r3, #4]
 8001534:	609a      	str	r2, [r3, #8]
 8001536:	60da      	str	r2, [r3, #12]
 8001538:	611a      	str	r2, [r3, #16]
 800153a:	615a      	str	r2, [r3, #20]
 800153c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800153e:	4b21      	ldr	r3, [pc, #132]	@ (80015c4 <MX_TIM5_Init+0xa8>)
 8001540:	4a21      	ldr	r2, [pc, #132]	@ (80015c8 <MX_TIM5_Init+0xac>)
 8001542:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001544:	4b1f      	ldr	r3, [pc, #124]	@ (80015c4 <MX_TIM5_Init+0xa8>)
 8001546:	2200      	movs	r2, #0
 8001548:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800154a:	4b1e      	ldr	r3, [pc, #120]	@ (80015c4 <MX_TIM5_Init+0xa8>)
 800154c:	2200      	movs	r2, #0
 800154e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1919999;
 8001550:	4b1c      	ldr	r3, [pc, #112]	@ (80015c4 <MX_TIM5_Init+0xa8>)
 8001552:	4a1e      	ldr	r2, [pc, #120]	@ (80015cc <MX_TIM5_Init+0xb0>)
 8001554:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001556:	4b1b      	ldr	r3, [pc, #108]	@ (80015c4 <MX_TIM5_Init+0xa8>)
 8001558:	2200      	movs	r2, #0
 800155a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800155c:	4b19      	ldr	r3, [pc, #100]	@ (80015c4 <MX_TIM5_Init+0xa8>)
 800155e:	2200      	movs	r2, #0
 8001560:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001562:	4818      	ldr	r0, [pc, #96]	@ (80015c4 <MX_TIM5_Init+0xa8>)
 8001564:	f002 ff01 	bl	800436a <HAL_TIM_PWM_Init>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d001      	beq.n	8001572 <MX_TIM5_Init+0x56>
  {
    Error_Handler();
 800156e:	f000 fa0d 	bl	800198c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001572:	2300      	movs	r3, #0
 8001574:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001576:	2300      	movs	r3, #0
 8001578:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800157a:	f107 0320 	add.w	r3, r7, #32
 800157e:	4619      	mov	r1, r3
 8001580:	4810      	ldr	r0, [pc, #64]	@ (80015c4 <MX_TIM5_Init+0xa8>)
 8001582:	f003 fe1d 	bl	80051c0 <HAL_TIMEx_MasterConfigSynchronization>
 8001586:	4603      	mov	r3, r0
 8001588:	2b00      	cmp	r3, #0
 800158a:	d001      	beq.n	8001590 <MX_TIM5_Init+0x74>
  {
    Error_Handler();
 800158c:	f000 f9fe 	bl	800198c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001590:	2360      	movs	r3, #96	@ 0x60
 8001592:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 96000;
 8001594:	4b0e      	ldr	r3, [pc, #56]	@ (80015d0 <MX_TIM5_Init+0xb4>)
 8001596:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001598:	2300      	movs	r3, #0
 800159a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800159c:	2300      	movs	r3, #0
 800159e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015a0:	1d3b      	adds	r3, r7, #4
 80015a2:	2200      	movs	r2, #0
 80015a4:	4619      	mov	r1, r3
 80015a6:	4807      	ldr	r0, [pc, #28]	@ (80015c4 <MX_TIM5_Init+0xa8>)
 80015a8:	f003 f9ba 	bl	8004920 <HAL_TIM_PWM_ConfigChannel>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d001      	beq.n	80015b6 <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 80015b2:	f000 f9eb 	bl	800198c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80015b6:	4803      	ldr	r0, [pc, #12]	@ (80015c4 <MX_TIM5_Init+0xa8>)
 80015b8:	f000 fb4e 	bl	8001c58 <HAL_TIM_MspPostInit>

}
 80015bc:	bf00      	nop
 80015be:	3728      	adds	r7, #40	@ 0x28
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	20000260 	.word	0x20000260
 80015c8:	40000c00 	.word	0x40000c00
 80015cc:	001d4bff 	.word	0x001d4bff
 80015d0:	00017700 	.word	0x00017700

080015d4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80015d8:	4b11      	ldr	r3, [pc, #68]	@ (8001620 <MX_USART2_UART_Init+0x4c>)
 80015da:	4a12      	ldr	r2, [pc, #72]	@ (8001624 <MX_USART2_UART_Init+0x50>)
 80015dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80015de:	4b10      	ldr	r3, [pc, #64]	@ (8001620 <MX_USART2_UART_Init+0x4c>)
 80015e0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80015e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80015e6:	4b0e      	ldr	r3, [pc, #56]	@ (8001620 <MX_USART2_UART_Init+0x4c>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80015ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001620 <MX_USART2_UART_Init+0x4c>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80015f2:	4b0b      	ldr	r3, [pc, #44]	@ (8001620 <MX_USART2_UART_Init+0x4c>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80015f8:	4b09      	ldr	r3, [pc, #36]	@ (8001620 <MX_USART2_UART_Init+0x4c>)
 80015fa:	220c      	movs	r2, #12
 80015fc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015fe:	4b08      	ldr	r3, [pc, #32]	@ (8001620 <MX_USART2_UART_Init+0x4c>)
 8001600:	2200      	movs	r2, #0
 8001602:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001604:	4b06      	ldr	r3, [pc, #24]	@ (8001620 <MX_USART2_UART_Init+0x4c>)
 8001606:	2200      	movs	r2, #0
 8001608:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800160a:	4805      	ldr	r0, [pc, #20]	@ (8001620 <MX_USART2_UART_Init+0x4c>)
 800160c:	f003 fe5a 	bl	80052c4 <HAL_UART_Init>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d001      	beq.n	800161a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001616:	f000 f9b9 	bl	800198c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800161a:	bf00      	nop
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	200002a8 	.word	0x200002a8
 8001624:	40004400 	.word	0x40004400

08001628 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b08a      	sub	sp, #40	@ 0x28
 800162c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800162e:	f107 0314 	add.w	r3, r7, #20
 8001632:	2200      	movs	r2, #0
 8001634:	601a      	str	r2, [r3, #0]
 8001636:	605a      	str	r2, [r3, #4]
 8001638:	609a      	str	r2, [r3, #8]
 800163a:	60da      	str	r2, [r3, #12]
 800163c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800163e:	2300      	movs	r3, #0
 8001640:	613b      	str	r3, [r7, #16]
 8001642:	4b31      	ldr	r3, [pc, #196]	@ (8001708 <MX_GPIO_Init+0xe0>)
 8001644:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001646:	4a30      	ldr	r2, [pc, #192]	@ (8001708 <MX_GPIO_Init+0xe0>)
 8001648:	f043 0304 	orr.w	r3, r3, #4
 800164c:	6313      	str	r3, [r2, #48]	@ 0x30
 800164e:	4b2e      	ldr	r3, [pc, #184]	@ (8001708 <MX_GPIO_Init+0xe0>)
 8001650:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001652:	f003 0304 	and.w	r3, r3, #4
 8001656:	613b      	str	r3, [r7, #16]
 8001658:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800165a:	2300      	movs	r3, #0
 800165c:	60fb      	str	r3, [r7, #12]
 800165e:	4b2a      	ldr	r3, [pc, #168]	@ (8001708 <MX_GPIO_Init+0xe0>)
 8001660:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001662:	4a29      	ldr	r2, [pc, #164]	@ (8001708 <MX_GPIO_Init+0xe0>)
 8001664:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001668:	6313      	str	r3, [r2, #48]	@ 0x30
 800166a:	4b27      	ldr	r3, [pc, #156]	@ (8001708 <MX_GPIO_Init+0xe0>)
 800166c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800166e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001672:	60fb      	str	r3, [r7, #12]
 8001674:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001676:	2300      	movs	r3, #0
 8001678:	60bb      	str	r3, [r7, #8]
 800167a:	4b23      	ldr	r3, [pc, #140]	@ (8001708 <MX_GPIO_Init+0xe0>)
 800167c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800167e:	4a22      	ldr	r2, [pc, #136]	@ (8001708 <MX_GPIO_Init+0xe0>)
 8001680:	f043 0301 	orr.w	r3, r3, #1
 8001684:	6313      	str	r3, [r2, #48]	@ 0x30
 8001686:	4b20      	ldr	r3, [pc, #128]	@ (8001708 <MX_GPIO_Init+0xe0>)
 8001688:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800168a:	f003 0301 	and.w	r3, r3, #1
 800168e:	60bb      	str	r3, [r7, #8]
 8001690:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001692:	2300      	movs	r3, #0
 8001694:	607b      	str	r3, [r7, #4]
 8001696:	4b1c      	ldr	r3, [pc, #112]	@ (8001708 <MX_GPIO_Init+0xe0>)
 8001698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800169a:	4a1b      	ldr	r2, [pc, #108]	@ (8001708 <MX_GPIO_Init+0xe0>)
 800169c:	f043 0302 	orr.w	r3, r3, #2
 80016a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80016a2:	4b19      	ldr	r3, [pc, #100]	@ (8001708 <MX_GPIO_Init+0xe0>)
 80016a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016a6:	f003 0302 	and.w	r3, r3, #2
 80016aa:	607b      	str	r3, [r7, #4]
 80016ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80016ae:	2200      	movs	r2, #0
 80016b0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80016b4:	4815      	ldr	r0, [pc, #84]	@ (800170c <MX_GPIO_Init+0xe4>)
 80016b6:	f000 ffff 	bl	80026b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80016ba:	2201      	movs	r2, #1
 80016bc:	2110      	movs	r1, #16
 80016be:	4814      	ldr	r0, [pc, #80]	@ (8001710 <MX_GPIO_Init+0xe8>)
 80016c0:	f000 fffa 	bl	80026b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80016c4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80016c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016ca:	2301      	movs	r3, #1
 80016cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ce:	2300      	movs	r3, #0
 80016d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016d2:	2300      	movs	r3, #0
 80016d4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016d6:	f107 0314 	add.w	r3, r7, #20
 80016da:	4619      	mov	r1, r3
 80016dc:	480b      	ldr	r0, [pc, #44]	@ (800170c <MX_GPIO_Init+0xe4>)
 80016de:	f000 fe67 	bl	80023b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80016e2:	2310      	movs	r3, #16
 80016e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016e6:	2301      	movs	r3, #1
 80016e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ea:	2300      	movs	r3, #0
 80016ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016ee:	2302      	movs	r3, #2
 80016f0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016f2:	f107 0314 	add.w	r3, r7, #20
 80016f6:	4619      	mov	r1, r3
 80016f8:	4805      	ldr	r0, [pc, #20]	@ (8001710 <MX_GPIO_Init+0xe8>)
 80016fa:	f000 fe59 	bl	80023b0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80016fe:	bf00      	nop
 8001700:	3728      	adds	r7, #40	@ 0x28
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	40023800 	.word	0x40023800
 800170c:	40020800 	.word	0x40020800
 8001710:	40020000 	.word	0x40020000

08001714 <set_motor>:

/* USER CODE BEGIN 4 */
void set_motor(uint32_t servo_cmp)
	  {
 8001714:	b480      	push	{r7}
 8001716:	b083      	sub	sp, #12
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
	  	  __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_1, servo_cmp);
 800171c:	4b04      	ldr	r3, [pc, #16]	@ (8001730 <set_motor+0x1c>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	687a      	ldr	r2, [r7, #4]
 8001722:	635a      	str	r2, [r3, #52]	@ 0x34
	  	 //n=sprintf(transmit_buff,"Motor set: %ld\n\r",servo_cmp);
	  	 //HAL_UART_Transmit(&huart2, (uint8_t *) &transmit_buff, n, HAL_MAX_DELAY); //transmit the read data
	  }
 8001724:	bf00      	nop
 8001726:	370c      	adds	r7, #12
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr
 8001730:	20000260 	.word	0x20000260

08001734 <start_motor>:
void start_motor(){
 8001734:	b580      	push	{r7, lr}
 8001736:	af00      	add	r7, sp, #0
	  	  __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_1, 143000);
 8001738:	4b0c      	ldr	r3, [pc, #48]	@ (800176c <start_motor+0x38>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a0c      	ldr	r2, [pc, #48]	@ (8001770 <start_motor+0x3c>)
 800173e:	635a      	str	r2, [r3, #52]	@ 0x34
	  	  HAL_Delay(3000);
 8001740:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8001744:	f000 fc6c 	bl	8002020 <HAL_Delay>
	  	  n=sprintf(transmit_buff,"Motor start completed.\n\r");
 8001748:	490a      	ldr	r1, [pc, #40]	@ (8001774 <start_motor+0x40>)
 800174a:	480b      	ldr	r0, [pc, #44]	@ (8001778 <start_motor+0x44>)
 800174c:	f004 fdbc 	bl	80062c8 <siprintf>
 8001750:	4603      	mov	r3, r0
 8001752:	b29a      	uxth	r2, r3
 8001754:	4b09      	ldr	r3, [pc, #36]	@ (800177c <start_motor+0x48>)
 8001756:	801a      	strh	r2, [r3, #0]
	  	  HAL_UART_Transmit(&huart2, (uint8_t *) &transmit_buff, n, HAL_MAX_DELAY); //transmit the read data
 8001758:	4b08      	ldr	r3, [pc, #32]	@ (800177c <start_motor+0x48>)
 800175a:	881a      	ldrh	r2, [r3, #0]
 800175c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001760:	4905      	ldr	r1, [pc, #20]	@ (8001778 <start_motor+0x44>)
 8001762:	4807      	ldr	r0, [pc, #28]	@ (8001780 <start_motor+0x4c>)
 8001764:	f003 fdfe 	bl	8005364 <HAL_UART_Transmit>

	  }
 8001768:	bf00      	nop
 800176a:	bd80      	pop	{r7, pc}
 800176c:	20000260 	.word	0x20000260
 8001770:	00022e98 	.word	0x00022e98
 8001774:	08006c9c 	.word	0x08006c9c
 8001778:	2000008c 	.word	0x2000008c
 800177c:	20000122 	.word	0x20000122
 8001780:	200002a8 	.word	0x200002a8

08001784 <get_pos>:
float get_pos(){
 8001784:	b5b0      	push	{r4, r5, r7, lr}
 8001786:	b088      	sub	sp, #32
 8001788:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c2, IMU_ADDR << 1,  EUL_X  , I2C_MEMADD_SIZE_8BIT,(uint8_t *)&i2c_buff_read,6,HAL_MAX_DELAY);
 800178a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800178e:	9302      	str	r3, [sp, #8]
 8001790:	2306      	movs	r3, #6
 8001792:	9301      	str	r3, [sp, #4]
 8001794:	4b44      	ldr	r3, [pc, #272]	@ (80018a8 <get_pos+0x124>)
 8001796:	9300      	str	r3, [sp, #0]
 8001798:	2301      	movs	r3, #1
 800179a:	221a      	movs	r2, #26
 800179c:	2150      	movs	r1, #80	@ 0x50
 800179e:	4843      	ldr	r0, [pc, #268]	@ (80018ac <get_pos+0x128>)
 80017a0:	f001 f9e2 	bl	8002b68 <HAL_I2C_Mem_Read>

		  HAL_I2C_ModeTypeDef error = HAL_I2C_GetError(&hi2c2);
 80017a4:	4841      	ldr	r0, [pc, #260]	@ (80018ac <get_pos+0x128>)
 80017a6:	f001 fd3f 	bl	8003228 <HAL_I2C_GetError>
 80017aa:	4603      	mov	r3, r0
 80017ac:	73fb      	strb	r3, [r7, #15]
		  if (error!= HAL_I2C_ERROR_NONE){
 80017ae:	7bfb      	ldrb	r3, [r7, #15]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d007      	beq.n	80017c4 <get_pos+0x40>
			  n=sprintf(transmit_buff,"I2C error\n\r");
 80017b4:	493e      	ldr	r1, [pc, #248]	@ (80018b0 <get_pos+0x12c>)
 80017b6:	483f      	ldr	r0, [pc, #252]	@ (80018b4 <get_pos+0x130>)
 80017b8:	f004 fd86 	bl	80062c8 <siprintf>
 80017bc:	4603      	mov	r3, r0
 80017be:	b29a      	uxth	r2, r3
 80017c0:	4b3d      	ldr	r3, [pc, #244]	@ (80018b8 <get_pos+0x134>)
 80017c2:	801a      	strh	r2, [r3, #0]

		  }



		  eul_x=(i2c_buff_read[1]<<8 | i2c_buff_read[0])/16;
 80017c4:	4b38      	ldr	r3, [pc, #224]	@ (80018a8 <get_pos+0x124>)
 80017c6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80017ca:	021b      	lsls	r3, r3, #8
 80017cc:	4a36      	ldr	r2, [pc, #216]	@ (80018a8 <get_pos+0x124>)
 80017ce:	f9b2 2000 	ldrsh.w	r2, [r2]
 80017d2:	4313      	orrs	r3, r2
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	da00      	bge.n	80017da <get_pos+0x56>
 80017d8:	330f      	adds	r3, #15
 80017da:	111b      	asrs	r3, r3, #4
 80017dc:	ee07 3a90 	vmov	s15, r3
 80017e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017e4:	4b35      	ldr	r3, [pc, #212]	@ (80018bc <get_pos+0x138>)
 80017e6:	edc3 7a00 	vstr	s15, [r3]
		  eul_y=((i2c_buff_read[3]<<8 | i2c_buff_read[2])/16.0)-eul_y_offset;
 80017ea:	4b2f      	ldr	r3, [pc, #188]	@ (80018a8 <get_pos+0x124>)
 80017ec:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80017f0:	021b      	lsls	r3, r3, #8
 80017f2:	4a2d      	ldr	r2, [pc, #180]	@ (80018a8 <get_pos+0x124>)
 80017f4:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 80017f8:	4313      	orrs	r3, r2
 80017fa:	4618      	mov	r0, r3
 80017fc:	f7fe fe92 	bl	8000524 <__aeabi_i2d>
 8001800:	f04f 0200 	mov.w	r2, #0
 8001804:	4b2e      	ldr	r3, [pc, #184]	@ (80018c0 <get_pos+0x13c>)
 8001806:	f7ff f821 	bl	800084c <__aeabi_ddiv>
 800180a:	4602      	mov	r2, r0
 800180c:	460b      	mov	r3, r1
 800180e:	4614      	mov	r4, r2
 8001810:	461d      	mov	r5, r3
 8001812:	4b2c      	ldr	r3, [pc, #176]	@ (80018c4 <get_pos+0x140>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4618      	mov	r0, r3
 8001818:	f7fe fe96 	bl	8000548 <__aeabi_f2d>
 800181c:	4602      	mov	r2, r0
 800181e:	460b      	mov	r3, r1
 8001820:	4620      	mov	r0, r4
 8001822:	4629      	mov	r1, r5
 8001824:	f7fe fd30 	bl	8000288 <__aeabi_dsub>
 8001828:	4602      	mov	r2, r0
 800182a:	460b      	mov	r3, r1
 800182c:	4610      	mov	r0, r2
 800182e:	4619      	mov	r1, r3
 8001830:	f7ff f8f4 	bl	8000a1c <__aeabi_d2f>
 8001834:	4603      	mov	r3, r0
 8001836:	4a24      	ldr	r2, [pc, #144]	@ (80018c8 <get_pos+0x144>)
 8001838:	6013      	str	r3, [r2, #0]
		  eul_z=(i2c_buff_read[5]<<8 | i2c_buff_read[4])/16;
 800183a:	4b1b      	ldr	r3, [pc, #108]	@ (80018a8 <get_pos+0x124>)
 800183c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001840:	021b      	lsls	r3, r3, #8
 8001842:	4a19      	ldr	r2, [pc, #100]	@ (80018a8 <get_pos+0x124>)
 8001844:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8001848:	4313      	orrs	r3, r2
 800184a:	2b00      	cmp	r3, #0
 800184c:	da00      	bge.n	8001850 <get_pos+0xcc>
 800184e:	330f      	adds	r3, #15
 8001850:	111b      	asrs	r3, r3, #4
 8001852:	ee07 3a90 	vmov	s15, r3
 8001856:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800185a:	4b1c      	ldr	r3, [pc, #112]	@ (80018cc <get_pos+0x148>)
 800185c:	edc3 7a00 	vstr	s15, [r3]

		  n=sprintf(transmit_buff,"EUL_Y= %d\n\r", (uint8_t) eul_y);
 8001860:	4b19      	ldr	r3, [pc, #100]	@ (80018c8 <get_pos+0x144>)
 8001862:	edd3 7a00 	vldr	s15, [r3]
 8001866:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800186a:	edc7 7a01 	vstr	s15, [r7, #4]
 800186e:	793b      	ldrb	r3, [r7, #4]
 8001870:	b2db      	uxtb	r3, r3
 8001872:	461a      	mov	r2, r3
 8001874:	4916      	ldr	r1, [pc, #88]	@ (80018d0 <get_pos+0x14c>)
 8001876:	480f      	ldr	r0, [pc, #60]	@ (80018b4 <get_pos+0x130>)
 8001878:	f004 fd26 	bl	80062c8 <siprintf>
 800187c:	4603      	mov	r3, r0
 800187e:	b29a      	uxth	r2, r3
 8001880:	4b0d      	ldr	r3, [pc, #52]	@ (80018b8 <get_pos+0x134>)
 8001882:	801a      	strh	r2, [r3, #0]
		  HAL_UART_Transmit(&huart2, (uint8_t *) &transmit_buff, n, HAL_MAX_DELAY);
 8001884:	4b0c      	ldr	r3, [pc, #48]	@ (80018b8 <get_pos+0x134>)
 8001886:	881a      	ldrh	r2, [r3, #0]
 8001888:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800188c:	4909      	ldr	r1, [pc, #36]	@ (80018b4 <get_pos+0x130>)
 800188e:	4811      	ldr	r0, [pc, #68]	@ (80018d4 <get_pos+0x150>)
 8001890:	f003 fd68 	bl	8005364 <HAL_UART_Transmit>
		  return eul_y;
 8001894:	4b0c      	ldr	r3, [pc, #48]	@ (80018c8 <get_pos+0x144>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	ee07 3a90 	vmov	s15, r3

}
 800189c:	eeb0 0a67 	vmov.f32	s0, s15
 80018a0:	3710      	adds	r7, #16
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bdb0      	pop	{r4, r5, r7, pc}
 80018a6:	bf00      	nop
 80018a8:	200002fc 	.word	0x200002fc
 80018ac:	20000124 	.word	0x20000124
 80018b0:	08006cb8 	.word	0x08006cb8
 80018b4:	2000008c 	.word	0x2000008c
 80018b8:	20000122 	.word	0x20000122
 80018bc:	2000030c 	.word	0x2000030c
 80018c0:	40300000 	.word	0x40300000
 80018c4:	2000031c 	.word	0x2000031c
 80018c8:	20000310 	.word	0x20000310
 80018cc:	20000314 	.word	0x20000314
 80018d0:	08006cc4 	.word	0x08006cc4
 80018d4:	200002a8 	.word	0x200002a8

080018d8 <get_vel>:
int16_t get_vel(){
 80018d8:	b580      	push	{r7, lr}
 80018da:	b086      	sub	sp, #24
 80018dc:	af04      	add	r7, sp, #16
	 HAL_I2C_Mem_Read(&hi2c2, IMU_ADDR << 1,  GYR_Y_LSB  , I2C_MEMADD_SIZE_8BIT,(uint8_t *)&i2c_buff_gyro,2,HAL_MAX_DELAY);
 80018de:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80018e2:	9302      	str	r3, [sp, #8]
 80018e4:	2302      	movs	r3, #2
 80018e6:	9301      	str	r3, [sp, #4]
 80018e8:	4b20      	ldr	r3, [pc, #128]	@ (800196c <get_vel+0x94>)
 80018ea:	9300      	str	r3, [sp, #0]
 80018ec:	2301      	movs	r3, #1
 80018ee:	2216      	movs	r2, #22
 80018f0:	2150      	movs	r1, #80	@ 0x50
 80018f2:	481f      	ldr	r0, [pc, #124]	@ (8001970 <get_vel+0x98>)
 80018f4:	f001 f938 	bl	8002b68 <HAL_I2C_Mem_Read>

	          HAL_I2C_ModeTypeDef error = HAL_I2C_GetError(&hi2c2);
 80018f8:	481d      	ldr	r0, [pc, #116]	@ (8001970 <get_vel+0x98>)
 80018fa:	f001 fc95 	bl	8003228 <HAL_I2C_GetError>
 80018fe:	4603      	mov	r3, r0
 8001900:	71fb      	strb	r3, [r7, #7]
	  		  if (error!= HAL_I2C_ERROR_NONE){
 8001902:	79fb      	ldrb	r3, [r7, #7]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d007      	beq.n	8001918 <get_vel+0x40>
	  			  n=sprintf(transmit_buff,"I2C error\n\r");
 8001908:	491a      	ldr	r1, [pc, #104]	@ (8001974 <get_vel+0x9c>)
 800190a:	481b      	ldr	r0, [pc, #108]	@ (8001978 <get_vel+0xa0>)
 800190c:	f004 fcdc 	bl	80062c8 <siprintf>
 8001910:	4603      	mov	r3, r0
 8001912:	b29a      	uxth	r2, r3
 8001914:	4b19      	ldr	r3, [pc, #100]	@ (800197c <get_vel+0xa4>)
 8001916:	801a      	strh	r2, [r3, #0]

	  		  }



	  		  gyr_y=(i2c_buff_gyro[1]<<8 | i2c_buff_gyro[0])/16;
 8001918:	4b14      	ldr	r3, [pc, #80]	@ (800196c <get_vel+0x94>)
 800191a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800191e:	021b      	lsls	r3, r3, #8
 8001920:	4a12      	ldr	r2, [pc, #72]	@ (800196c <get_vel+0x94>)
 8001922:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001926:	4313      	orrs	r3, r2
 8001928:	2b00      	cmp	r3, #0
 800192a:	da00      	bge.n	800192e <get_vel+0x56>
 800192c:	330f      	adds	r3, #15
 800192e:	111b      	asrs	r3, r3, #4
 8001930:	b21a      	sxth	r2, r3
 8001932:	4b13      	ldr	r3, [pc, #76]	@ (8001980 <get_vel+0xa8>)
 8001934:	801a      	strh	r2, [r3, #0]


	  		  n=sprintf(transmit_buff,"GYRO_Y=%d\n\r", gyr_y);
 8001936:	4b12      	ldr	r3, [pc, #72]	@ (8001980 <get_vel+0xa8>)
 8001938:	f9b3 3000 	ldrsh.w	r3, [r3]
 800193c:	461a      	mov	r2, r3
 800193e:	4911      	ldr	r1, [pc, #68]	@ (8001984 <get_vel+0xac>)
 8001940:	480d      	ldr	r0, [pc, #52]	@ (8001978 <get_vel+0xa0>)
 8001942:	f004 fcc1 	bl	80062c8 <siprintf>
 8001946:	4603      	mov	r3, r0
 8001948:	b29a      	uxth	r2, r3
 800194a:	4b0c      	ldr	r3, [pc, #48]	@ (800197c <get_vel+0xa4>)
 800194c:	801a      	strh	r2, [r3, #0]
	  		  HAL_UART_Transmit(&huart2, (uint8_t *) &transmit_buff, n, HAL_MAX_DELAY);
 800194e:	4b0b      	ldr	r3, [pc, #44]	@ (800197c <get_vel+0xa4>)
 8001950:	881a      	ldrh	r2, [r3, #0]
 8001952:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001956:	4908      	ldr	r1, [pc, #32]	@ (8001978 <get_vel+0xa0>)
 8001958:	480b      	ldr	r0, [pc, #44]	@ (8001988 <get_vel+0xb0>)
 800195a:	f003 fd03 	bl	8005364 <HAL_UART_Transmit>
		  return gyr_y;
 800195e:	4b08      	ldr	r3, [pc, #32]	@ (8001980 <get_vel+0xa8>)
 8001960:	f9b3 3000 	ldrsh.w	r3, [r3]

}
 8001964:	4618      	mov	r0, r3
 8001966:	3708      	adds	r7, #8
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}
 800196c:	20000308 	.word	0x20000308
 8001970:	20000124 	.word	0x20000124
 8001974:	08006cb8 	.word	0x08006cb8
 8001978:	2000008c 	.word	0x2000008c
 800197c:	20000122 	.word	0x20000122
 8001980:	20000318 	.word	0x20000318
 8001984:	08006cd0 	.word	0x08006cd0
 8001988:	200002a8 	.word	0x200002a8

0800198c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001990:	b672      	cpsid	i
}
 8001992:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001994:	bf00      	nop
 8001996:	e7fd      	b.n	8001994 <Error_Handler+0x8>

08001998 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001998:	b480      	push	{r7}
 800199a:	b083      	sub	sp, #12
 800199c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800199e:	2300      	movs	r3, #0
 80019a0:	607b      	str	r3, [r7, #4]
 80019a2:	4b10      	ldr	r3, [pc, #64]	@ (80019e4 <HAL_MspInit+0x4c>)
 80019a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019a6:	4a0f      	ldr	r2, [pc, #60]	@ (80019e4 <HAL_MspInit+0x4c>)
 80019a8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80019ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80019ae:	4b0d      	ldr	r3, [pc, #52]	@ (80019e4 <HAL_MspInit+0x4c>)
 80019b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80019b6:	607b      	str	r3, [r7, #4]
 80019b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019ba:	2300      	movs	r3, #0
 80019bc:	603b      	str	r3, [r7, #0]
 80019be:	4b09      	ldr	r3, [pc, #36]	@ (80019e4 <HAL_MspInit+0x4c>)
 80019c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019c2:	4a08      	ldr	r2, [pc, #32]	@ (80019e4 <HAL_MspInit+0x4c>)
 80019c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80019ca:	4b06      	ldr	r3, [pc, #24]	@ (80019e4 <HAL_MspInit+0x4c>)
 80019cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019d2:	603b      	str	r3, [r7, #0]
 80019d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019d6:	bf00      	nop
 80019d8:	370c      	adds	r7, #12
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr
 80019e2:	bf00      	nop
 80019e4:	40023800 	.word	0x40023800

080019e8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b08a      	sub	sp, #40	@ 0x28
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019f0:	f107 0314 	add.w	r3, r7, #20
 80019f4:	2200      	movs	r2, #0
 80019f6:	601a      	str	r2, [r3, #0]
 80019f8:	605a      	str	r2, [r3, #4]
 80019fa:	609a      	str	r2, [r3, #8]
 80019fc:	60da      	str	r2, [r3, #12]
 80019fe:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a22      	ldr	r2, [pc, #136]	@ (8001a90 <HAL_I2C_MspInit+0xa8>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d13d      	bne.n	8001a86 <HAL_I2C_MspInit+0x9e>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	613b      	str	r3, [r7, #16]
 8001a0e:	4b21      	ldr	r3, [pc, #132]	@ (8001a94 <HAL_I2C_MspInit+0xac>)
 8001a10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a12:	4a20      	ldr	r2, [pc, #128]	@ (8001a94 <HAL_I2C_MspInit+0xac>)
 8001a14:	f043 0302 	orr.w	r3, r3, #2
 8001a18:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a1a:	4b1e      	ldr	r3, [pc, #120]	@ (8001a94 <HAL_I2C_MspInit+0xac>)
 8001a1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a1e:	f003 0302 	and.w	r3, r3, #2
 8001a22:	613b      	str	r3, [r7, #16]
 8001a24:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB9     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001a26:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001a2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a2c:	2312      	movs	r3, #18
 8001a2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a30:	2300      	movs	r3, #0
 8001a32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a34:	2303      	movs	r3, #3
 8001a36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001a38:	2304      	movs	r3, #4
 8001a3a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a3c:	f107 0314 	add.w	r3, r7, #20
 8001a40:	4619      	mov	r1, r3
 8001a42:	4815      	ldr	r0, [pc, #84]	@ (8001a98 <HAL_I2C_MspInit+0xb0>)
 8001a44:	f000 fcb4 	bl	80023b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001a48:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001a4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a4e:	2312      	movs	r3, #18
 8001a50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a52:	2300      	movs	r3, #0
 8001a54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a56:	2303      	movs	r3, #3
 8001a58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8001a5a:	2309      	movs	r3, #9
 8001a5c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a5e:	f107 0314 	add.w	r3, r7, #20
 8001a62:	4619      	mov	r1, r3
 8001a64:	480c      	ldr	r0, [pc, #48]	@ (8001a98 <HAL_I2C_MspInit+0xb0>)
 8001a66:	f000 fca3 	bl	80023b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	60fb      	str	r3, [r7, #12]
 8001a6e:	4b09      	ldr	r3, [pc, #36]	@ (8001a94 <HAL_I2C_MspInit+0xac>)
 8001a70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a72:	4a08      	ldr	r2, [pc, #32]	@ (8001a94 <HAL_I2C_MspInit+0xac>)
 8001a74:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001a78:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a7a:	4b06      	ldr	r3, [pc, #24]	@ (8001a94 <HAL_I2C_MspInit+0xac>)
 8001a7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a7e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a82:	60fb      	str	r3, [r7, #12]
 8001a84:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001a86:	bf00      	nop
 8001a88:	3728      	adds	r7, #40	@ 0x28
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	40005800 	.word	0x40005800
 8001a94:	40023800 	.word	0x40023800
 8001a98:	40020400 	.word	0x40020400

08001a9c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b08e      	sub	sp, #56	@ 0x38
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aa4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	601a      	str	r2, [r3, #0]
 8001aac:	605a      	str	r2, [r3, #4]
 8001aae:	609a      	str	r2, [r3, #8]
 8001ab0:	60da      	str	r2, [r3, #12]
 8001ab2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a1d      	ldr	r2, [pc, #116]	@ (8001b30 <HAL_SPI_MspInit+0x94>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d134      	bne.n	8001b28 <HAL_SPI_MspInit+0x8c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001abe:	f107 0310 	add.w	r3, r7, #16
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	601a      	str	r2, [r3, #0]
 8001ac6:	605a      	str	r2, [r3, #4]
 8001ac8:	609a      	str	r2, [r3, #8]
 8001aca:	60da      	str	r2, [r3, #12]
 8001acc:	611a      	str	r2, [r3, #16]
  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001ace:	2300      	movs	r3, #0
 8001ad0:	60fb      	str	r3, [r7, #12]
 8001ad2:	4b18      	ldr	r3, [pc, #96]	@ (8001b34 <HAL_SPI_MspInit+0x98>)
 8001ad4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ad6:	4a17      	ldr	r2, [pc, #92]	@ (8001b34 <HAL_SPI_MspInit+0x98>)
 8001ad8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001adc:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ade:	4b15      	ldr	r3, [pc, #84]	@ (8001b34 <HAL_SPI_MspInit+0x98>)
 8001ae0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ae2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001ae6:	60fb      	str	r3, [r7, #12]
 8001ae8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aea:	2300      	movs	r3, #0
 8001aec:	60bb      	str	r3, [r7, #8]
 8001aee:	4b11      	ldr	r3, [pc, #68]	@ (8001b34 <HAL_SPI_MspInit+0x98>)
 8001af0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001af2:	4a10      	ldr	r2, [pc, #64]	@ (8001b34 <HAL_SPI_MspInit+0x98>)
 8001af4:	f043 0301 	orr.w	r3, r3, #1
 8001af8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001afa:	4b0e      	ldr	r3, [pc, #56]	@ (8001b34 <HAL_SPI_MspInit+0x98>)
 8001afc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001afe:	f003 0301 	and.w	r3, r3, #1
 8001b02:	60bb      	str	r3, [r7, #8]
 8001b04:	68bb      	ldr	r3, [r7, #8]
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PA15     ------> SPI1_NSS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_15;
 8001b06:	f248 03e0 	movw	r3, #32992	@ 0x80e0
 8001b0a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b0c:	2302      	movs	r3, #2
 8001b0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b10:	2300      	movs	r3, #0
 8001b12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b14:	2303      	movs	r3, #3
 8001b16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001b18:	2305      	movs	r3, #5
 8001b1a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b1c:	f107 0310 	add.w	r3, r7, #16
 8001b20:	4619      	mov	r1, r3
 8001b22:	4805      	ldr	r0, [pc, #20]	@ (8001b38 <HAL_SPI_MspInit+0x9c>)
 8001b24:	f000 fc44 	bl	80023b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001b28:	bf00      	nop
 8001b2a:	3738      	adds	r7, #56	@ 0x38
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	40013000 	.word	0x40013000
 8001b34:	40023800 	.word	0x40023800
 8001b38:	40020000 	.word	0x40020000

08001b3c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b084      	sub	sp, #16
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a18      	ldr	r2, [pc, #96]	@ (8001bac <HAL_TIM_PWM_MspInit+0x70>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d116      	bne.n	8001b7c <HAL_TIM_PWM_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001b4e:	2300      	movs	r3, #0
 8001b50:	60fb      	str	r3, [r7, #12]
 8001b52:	4b17      	ldr	r3, [pc, #92]	@ (8001bb0 <HAL_TIM_PWM_MspInit+0x74>)
 8001b54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b56:	4a16      	ldr	r2, [pc, #88]	@ (8001bb0 <HAL_TIM_PWM_MspInit+0x74>)
 8001b58:	f043 0302 	orr.w	r3, r3, #2
 8001b5c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b5e:	4b14      	ldr	r3, [pc, #80]	@ (8001bb0 <HAL_TIM_PWM_MspInit+0x74>)
 8001b60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b62:	f003 0302 	and.w	r3, r3, #2
 8001b66:	60fb      	str	r3, [r7, #12]
 8001b68:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	2100      	movs	r1, #0
 8001b6e:	201d      	movs	r0, #29
 8001b70:	f000 fb55 	bl	800221e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001b74:	201d      	movs	r0, #29
 8001b76:	f000 fb6e 	bl	8002256 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001b7a:	e012      	b.n	8001ba2 <HAL_TIM_PWM_MspInit+0x66>
  else if(htim_pwm->Instance==TIM5)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a0c      	ldr	r2, [pc, #48]	@ (8001bb4 <HAL_TIM_PWM_MspInit+0x78>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d10d      	bne.n	8001ba2 <HAL_TIM_PWM_MspInit+0x66>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001b86:	2300      	movs	r3, #0
 8001b88:	60bb      	str	r3, [r7, #8]
 8001b8a:	4b09      	ldr	r3, [pc, #36]	@ (8001bb0 <HAL_TIM_PWM_MspInit+0x74>)
 8001b8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b8e:	4a08      	ldr	r2, [pc, #32]	@ (8001bb0 <HAL_TIM_PWM_MspInit+0x74>)
 8001b90:	f043 0308 	orr.w	r3, r3, #8
 8001b94:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b96:	4b06      	ldr	r3, [pc, #24]	@ (8001bb0 <HAL_TIM_PWM_MspInit+0x74>)
 8001b98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b9a:	f003 0308 	and.w	r3, r3, #8
 8001b9e:	60bb      	str	r3, [r7, #8]
 8001ba0:	68bb      	ldr	r3, [r7, #8]
}
 8001ba2:	bf00      	nop
 8001ba4:	3710      	adds	r7, #16
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	40000400 	.word	0x40000400
 8001bb0:	40023800 	.word	0x40023800
 8001bb4:	40000c00 	.word	0x40000c00

08001bb8 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b08a      	sub	sp, #40	@ 0x28
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bc0:	f107 0314 	add.w	r3, r7, #20
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	601a      	str	r2, [r3, #0]
 8001bc8:	605a      	str	r2, [r3, #4]
 8001bca:	609a      	str	r2, [r3, #8]
 8001bcc:	60da      	str	r2, [r3, #12]
 8001bce:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM4)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a1d      	ldr	r2, [pc, #116]	@ (8001c4c <HAL_TIM_IC_MspInit+0x94>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d134      	bne.n	8001c44 <HAL_TIM_IC_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001bda:	2300      	movs	r3, #0
 8001bdc:	613b      	str	r3, [r7, #16]
 8001bde:	4b1c      	ldr	r3, [pc, #112]	@ (8001c50 <HAL_TIM_IC_MspInit+0x98>)
 8001be0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001be2:	4a1b      	ldr	r2, [pc, #108]	@ (8001c50 <HAL_TIM_IC_MspInit+0x98>)
 8001be4:	f043 0304 	orr.w	r3, r3, #4
 8001be8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bea:	4b19      	ldr	r3, [pc, #100]	@ (8001c50 <HAL_TIM_IC_MspInit+0x98>)
 8001bec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bee:	f003 0304 	and.w	r3, r3, #4
 8001bf2:	613b      	str	r3, [r7, #16]
 8001bf4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	60fb      	str	r3, [r7, #12]
 8001bfa:	4b15      	ldr	r3, [pc, #84]	@ (8001c50 <HAL_TIM_IC_MspInit+0x98>)
 8001bfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bfe:	4a14      	ldr	r2, [pc, #80]	@ (8001c50 <HAL_TIM_IC_MspInit+0x98>)
 8001c00:	f043 0302 	orr.w	r3, r3, #2
 8001c04:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c06:	4b12      	ldr	r3, [pc, #72]	@ (8001c50 <HAL_TIM_IC_MspInit+0x98>)
 8001c08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c0a:	f003 0302 	and.w	r3, r3, #2
 8001c0e:	60fb      	str	r3, [r7, #12]
 8001c10:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB8     ------> TIM4_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8;
 8001c12:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8001c16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c18:	2302      	movs	r3, #2
 8001c1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c20:	2300      	movs	r3, #0
 8001c22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001c24:	2302      	movs	r3, #2
 8001c26:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c28:	f107 0314 	add.w	r3, r7, #20
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	4809      	ldr	r0, [pc, #36]	@ (8001c54 <HAL_TIM_IC_MspInit+0x9c>)
 8001c30:	f000 fbbe 	bl	80023b0 <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001c34:	2200      	movs	r2, #0
 8001c36:	2100      	movs	r1, #0
 8001c38:	201e      	movs	r0, #30
 8001c3a:	f000 faf0 	bl	800221e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001c3e:	201e      	movs	r0, #30
 8001c40:	f000 fb09 	bl	8002256 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001c44:	bf00      	nop
 8001c46:	3728      	adds	r7, #40	@ 0x28
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	40000800 	.word	0x40000800
 8001c50:	40023800 	.word	0x40023800
 8001c54:	40020400 	.word	0x40020400

08001c58 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b08a      	sub	sp, #40	@ 0x28
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c60:	f107 0314 	add.w	r3, r7, #20
 8001c64:	2200      	movs	r2, #0
 8001c66:	601a      	str	r2, [r3, #0]
 8001c68:	605a      	str	r2, [r3, #4]
 8001c6a:	609a      	str	r2, [r3, #8]
 8001c6c:	60da      	str	r2, [r3, #12]
 8001c6e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a24      	ldr	r2, [pc, #144]	@ (8001d08 <HAL_TIM_MspPostInit+0xb0>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d11e      	bne.n	8001cb8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	613b      	str	r3, [r7, #16]
 8001c7e:	4b23      	ldr	r3, [pc, #140]	@ (8001d0c <HAL_TIM_MspPostInit+0xb4>)
 8001c80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c82:	4a22      	ldr	r2, [pc, #136]	@ (8001d0c <HAL_TIM_MspPostInit+0xb4>)
 8001c84:	f043 0302 	orr.w	r3, r3, #2
 8001c88:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c8a:	4b20      	ldr	r3, [pc, #128]	@ (8001d0c <HAL_TIM_MspPostInit+0xb4>)
 8001c8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c8e:	f003 0302 	and.w	r3, r3, #2
 8001c92:	613b      	str	r3, [r7, #16]
 8001c94:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001c96:	2303      	movs	r3, #3
 8001c98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c9a:	2302      	movs	r3, #2
 8001c9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001ca6:	2302      	movs	r3, #2
 8001ca8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001caa:	f107 0314 	add.w	r3, r7, #20
 8001cae:	4619      	mov	r1, r3
 8001cb0:	4817      	ldr	r0, [pc, #92]	@ (8001d10 <HAL_TIM_MspPostInit+0xb8>)
 8001cb2:	f000 fb7d 	bl	80023b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8001cb6:	e022      	b.n	8001cfe <HAL_TIM_MspPostInit+0xa6>
  else if(htim->Instance==TIM5)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a15      	ldr	r2, [pc, #84]	@ (8001d14 <HAL_TIM_MspPostInit+0xbc>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d11d      	bne.n	8001cfe <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	60fb      	str	r3, [r7, #12]
 8001cc6:	4b11      	ldr	r3, [pc, #68]	@ (8001d0c <HAL_TIM_MspPostInit+0xb4>)
 8001cc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cca:	4a10      	ldr	r2, [pc, #64]	@ (8001d0c <HAL_TIM_MspPostInit+0xb4>)
 8001ccc:	f043 0301 	orr.w	r3, r3, #1
 8001cd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cd2:	4b0e      	ldr	r3, [pc, #56]	@ (8001d0c <HAL_TIM_MspPostInit+0xb4>)
 8001cd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cd6:	f003 0301 	and.w	r3, r3, #1
 8001cda:	60fb      	str	r3, [r7, #12]
 8001cdc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ce2:	2302      	movs	r3, #2
 8001ce4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cea:	2300      	movs	r3, #0
 8001cec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001cee:	2302      	movs	r3, #2
 8001cf0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cf2:	f107 0314 	add.w	r3, r7, #20
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	4807      	ldr	r0, [pc, #28]	@ (8001d18 <HAL_TIM_MspPostInit+0xc0>)
 8001cfa:	f000 fb59 	bl	80023b0 <HAL_GPIO_Init>
}
 8001cfe:	bf00      	nop
 8001d00:	3728      	adds	r7, #40	@ 0x28
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	40000400 	.word	0x40000400
 8001d0c:	40023800 	.word	0x40023800
 8001d10:	40020400 	.word	0x40020400
 8001d14:	40000c00 	.word	0x40000c00
 8001d18:	40020000 	.word	0x40020000

08001d1c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b08a      	sub	sp, #40	@ 0x28
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d24:	f107 0314 	add.w	r3, r7, #20
 8001d28:	2200      	movs	r2, #0
 8001d2a:	601a      	str	r2, [r3, #0]
 8001d2c:	605a      	str	r2, [r3, #4]
 8001d2e:	609a      	str	r2, [r3, #8]
 8001d30:	60da      	str	r2, [r3, #12]
 8001d32:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a1d      	ldr	r2, [pc, #116]	@ (8001db0 <HAL_UART_MspInit+0x94>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d133      	bne.n	8001da6 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d3e:	2300      	movs	r3, #0
 8001d40:	613b      	str	r3, [r7, #16]
 8001d42:	4b1c      	ldr	r3, [pc, #112]	@ (8001db4 <HAL_UART_MspInit+0x98>)
 8001d44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d46:	4a1b      	ldr	r2, [pc, #108]	@ (8001db4 <HAL_UART_MspInit+0x98>)
 8001d48:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d4c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d4e:	4b19      	ldr	r3, [pc, #100]	@ (8001db4 <HAL_UART_MspInit+0x98>)
 8001d50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d56:	613b      	str	r3, [r7, #16]
 8001d58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	60fb      	str	r3, [r7, #12]
 8001d5e:	4b15      	ldr	r3, [pc, #84]	@ (8001db4 <HAL_UART_MspInit+0x98>)
 8001d60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d62:	4a14      	ldr	r2, [pc, #80]	@ (8001db4 <HAL_UART_MspInit+0x98>)
 8001d64:	f043 0301 	orr.w	r3, r3, #1
 8001d68:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d6a:	4b12      	ldr	r3, [pc, #72]	@ (8001db4 <HAL_UART_MspInit+0x98>)
 8001d6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d6e:	f003 0301 	and.w	r3, r3, #1
 8001d72:	60fb      	str	r3, [r7, #12]
 8001d74:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001d76:	230c      	movs	r3, #12
 8001d78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d7a:	2302      	movs	r3, #2
 8001d7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d82:	2303      	movs	r3, #3
 8001d84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001d86:	2307      	movs	r3, #7
 8001d88:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d8a:	f107 0314 	add.w	r3, r7, #20
 8001d8e:	4619      	mov	r1, r3
 8001d90:	4809      	ldr	r0, [pc, #36]	@ (8001db8 <HAL_UART_MspInit+0x9c>)
 8001d92:	f000 fb0d 	bl	80023b0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001d96:	2200      	movs	r2, #0
 8001d98:	2100      	movs	r1, #0
 8001d9a:	2026      	movs	r0, #38	@ 0x26
 8001d9c:	f000 fa3f 	bl	800221e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001da0:	2026      	movs	r0, #38	@ 0x26
 8001da2:	f000 fa58 	bl	8002256 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001da6:	bf00      	nop
 8001da8:	3728      	adds	r7, #40	@ 0x28
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	40004400 	.word	0x40004400
 8001db4:	40023800 	.word	0x40023800
 8001db8:	40020000 	.word	0x40020000

08001dbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001dc0:	bf00      	nop
 8001dc2:	e7fd      	b.n	8001dc0 <NMI_Handler+0x4>

08001dc4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001dc8:	bf00      	nop
 8001dca:	e7fd      	b.n	8001dc8 <HardFault_Handler+0x4>

08001dcc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001dd0:	bf00      	nop
 8001dd2:	e7fd      	b.n	8001dd0 <MemManage_Handler+0x4>

08001dd4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001dd8:	bf00      	nop
 8001dda:	e7fd      	b.n	8001dd8 <BusFault_Handler+0x4>

08001ddc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001de0:	bf00      	nop
 8001de2:	e7fd      	b.n	8001de0 <UsageFault_Handler+0x4>

08001de4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001de4:	b480      	push	{r7}
 8001de6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001de8:	bf00      	nop
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr

08001df2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001df2:	b480      	push	{r7}
 8001df4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001df6:	bf00      	nop
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr

08001e00 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e00:	b480      	push	{r7}
 8001e02:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e04:	bf00      	nop
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr

08001e0e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e0e:	b580      	push	{r7, lr}
 8001e10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e12:	f000 f8e5 	bl	8001fe0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e16:	bf00      	nop
 8001e18:	bd80      	pop	{r7, pc}
	...

08001e1c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001e20:	4802      	ldr	r0, [pc, #8]	@ (8001e2c <TIM3_IRQHandler+0x10>)
 8001e22:	f002 fbf0 	bl	8004606 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001e26:	bf00      	nop
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	200001d0 	.word	0x200001d0

08001e30 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001e34:	4802      	ldr	r0, [pc, #8]	@ (8001e40 <TIM4_IRQHandler+0x10>)
 8001e36:	f002 fbe6 	bl	8004606 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001e3a:	bf00      	nop
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	20000218 	.word	0x20000218

08001e44 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001e48:	4802      	ldr	r0, [pc, #8]	@ (8001e54 <USART2_IRQHandler+0x10>)
 8001e4a:	f003 fb17 	bl	800547c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001e4e:	bf00      	nop
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	200002a8 	.word	0x200002a8

08001e58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b086      	sub	sp, #24
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e60:	4a14      	ldr	r2, [pc, #80]	@ (8001eb4 <_sbrk+0x5c>)
 8001e62:	4b15      	ldr	r3, [pc, #84]	@ (8001eb8 <_sbrk+0x60>)
 8001e64:	1ad3      	subs	r3, r2, r3
 8001e66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e6c:	4b13      	ldr	r3, [pc, #76]	@ (8001ebc <_sbrk+0x64>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d102      	bne.n	8001e7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e74:	4b11      	ldr	r3, [pc, #68]	@ (8001ebc <_sbrk+0x64>)
 8001e76:	4a12      	ldr	r2, [pc, #72]	@ (8001ec0 <_sbrk+0x68>)
 8001e78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e7a:	4b10      	ldr	r3, [pc, #64]	@ (8001ebc <_sbrk+0x64>)
 8001e7c:	681a      	ldr	r2, [r3, #0]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	4413      	add	r3, r2
 8001e82:	693a      	ldr	r2, [r7, #16]
 8001e84:	429a      	cmp	r2, r3
 8001e86:	d207      	bcs.n	8001e98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e88:	f004 fa46 	bl	8006318 <__errno>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	220c      	movs	r2, #12
 8001e90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e92:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001e96:	e009      	b.n	8001eac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e98:	4b08      	ldr	r3, [pc, #32]	@ (8001ebc <_sbrk+0x64>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e9e:	4b07      	ldr	r3, [pc, #28]	@ (8001ebc <_sbrk+0x64>)
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	4413      	add	r3, r2
 8001ea6:	4a05      	ldr	r2, [pc, #20]	@ (8001ebc <_sbrk+0x64>)
 8001ea8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	3718      	adds	r7, #24
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}
 8001eb4:	20020000 	.word	0x20020000
 8001eb8:	00000400 	.word	0x00000400
 8001ebc:	20000338 	.word	0x20000338
 8001ec0:	20000488 	.word	0x20000488

08001ec4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ec8:	4b06      	ldr	r3, [pc, #24]	@ (8001ee4 <SystemInit+0x20>)
 8001eca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ece:	4a05      	ldr	r2, [pc, #20]	@ (8001ee4 <SystemInit+0x20>)
 8001ed0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001ed4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
   }
 8001ed8:	bf00      	nop
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr
 8001ee2:	bf00      	nop
 8001ee4:	e000ed00 	.word	0xe000ed00

08001ee8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001ee8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001f20 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001eec:	f7ff ffea 	bl	8001ec4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ef0:	480c      	ldr	r0, [pc, #48]	@ (8001f24 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001ef2:	490d      	ldr	r1, [pc, #52]	@ (8001f28 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001ef4:	4a0d      	ldr	r2, [pc, #52]	@ (8001f2c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001ef6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ef8:	e002      	b.n	8001f00 <LoopCopyDataInit>

08001efa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001efa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001efc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001efe:	3304      	adds	r3, #4

08001f00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f04:	d3f9      	bcc.n	8001efa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f06:	4a0a      	ldr	r2, [pc, #40]	@ (8001f30 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001f08:	4c0a      	ldr	r4, [pc, #40]	@ (8001f34 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001f0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f0c:	e001      	b.n	8001f12 <LoopFillZerobss>

08001f0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f10:	3204      	adds	r2, #4

08001f12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f14:	d3fb      	bcc.n	8001f0e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f16:	f004 fa05 	bl	8006324 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f1a:	f7fe ff47 	bl	8000dac <main>
  bx  lr    
 8001f1e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001f20:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001f24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f28:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001f2c:	08006d38 	.word	0x08006d38
  ldr r2, =_sbss
 8001f30:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001f34:	20000488 	.word	0x20000488

08001f38 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f38:	e7fe      	b.n	8001f38 <ADC_IRQHandler>
	...

08001f3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f40:	4b0e      	ldr	r3, [pc, #56]	@ (8001f7c <HAL_Init+0x40>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a0d      	ldr	r2, [pc, #52]	@ (8001f7c <HAL_Init+0x40>)
 8001f46:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001f4a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f4c:	4b0b      	ldr	r3, [pc, #44]	@ (8001f7c <HAL_Init+0x40>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a0a      	ldr	r2, [pc, #40]	@ (8001f7c <HAL_Init+0x40>)
 8001f52:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001f56:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f58:	4b08      	ldr	r3, [pc, #32]	@ (8001f7c <HAL_Init+0x40>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a07      	ldr	r2, [pc, #28]	@ (8001f7c <HAL_Init+0x40>)
 8001f5e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f62:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f64:	2003      	movs	r0, #3
 8001f66:	f000 f94f 	bl	8002208 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f6a:	200f      	movs	r0, #15
 8001f6c:	f000 f808 	bl	8001f80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f70:	f7ff fd12 	bl	8001998 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f74:	2300      	movs	r3, #0
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	40023c00 	.word	0x40023c00

08001f80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b082      	sub	sp, #8
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f88:	4b12      	ldr	r3, [pc, #72]	@ (8001fd4 <HAL_InitTick+0x54>)
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	4b12      	ldr	r3, [pc, #72]	@ (8001fd8 <HAL_InitTick+0x58>)
 8001f8e:	781b      	ldrb	r3, [r3, #0]
 8001f90:	4619      	mov	r1, r3
 8001f92:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f96:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f000 f967 	bl	8002272 <HAL_SYSTICK_Config>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d001      	beq.n	8001fae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	e00e      	b.n	8001fcc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2b0f      	cmp	r3, #15
 8001fb2:	d80a      	bhi.n	8001fca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	6879      	ldr	r1, [r7, #4]
 8001fb8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001fbc:	f000 f92f 	bl	800221e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001fc0:	4a06      	ldr	r2, [pc, #24]	@ (8001fdc <HAL_InitTick+0x5c>)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	e000      	b.n	8001fcc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	3708      	adds	r7, #8
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	20000000 	.word	0x20000000
 8001fd8:	20000008 	.word	0x20000008
 8001fdc:	20000004 	.word	0x20000004

08001fe0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fe4:	4b06      	ldr	r3, [pc, #24]	@ (8002000 <HAL_IncTick+0x20>)
 8001fe6:	781b      	ldrb	r3, [r3, #0]
 8001fe8:	461a      	mov	r2, r3
 8001fea:	4b06      	ldr	r3, [pc, #24]	@ (8002004 <HAL_IncTick+0x24>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4413      	add	r3, r2
 8001ff0:	4a04      	ldr	r2, [pc, #16]	@ (8002004 <HAL_IncTick+0x24>)
 8001ff2:	6013      	str	r3, [r2, #0]
}
 8001ff4:	bf00      	nop
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr
 8001ffe:	bf00      	nop
 8002000:	20000008 	.word	0x20000008
 8002004:	2000033c 	.word	0x2000033c

08002008 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002008:	b480      	push	{r7}
 800200a:	af00      	add	r7, sp, #0
  return uwTick;
 800200c:	4b03      	ldr	r3, [pc, #12]	@ (800201c <HAL_GetTick+0x14>)
 800200e:	681b      	ldr	r3, [r3, #0]
}
 8002010:	4618      	mov	r0, r3
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr
 800201a:	bf00      	nop
 800201c:	2000033c 	.word	0x2000033c

08002020 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b084      	sub	sp, #16
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002028:	f7ff ffee 	bl	8002008 <HAL_GetTick>
 800202c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002038:	d005      	beq.n	8002046 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800203a:	4b0a      	ldr	r3, [pc, #40]	@ (8002064 <HAL_Delay+0x44>)
 800203c:	781b      	ldrb	r3, [r3, #0]
 800203e:	461a      	mov	r2, r3
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	4413      	add	r3, r2
 8002044:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002046:	bf00      	nop
 8002048:	f7ff ffde 	bl	8002008 <HAL_GetTick>
 800204c:	4602      	mov	r2, r0
 800204e:	68bb      	ldr	r3, [r7, #8]
 8002050:	1ad3      	subs	r3, r2, r3
 8002052:	68fa      	ldr	r2, [r7, #12]
 8002054:	429a      	cmp	r2, r3
 8002056:	d8f7      	bhi.n	8002048 <HAL_Delay+0x28>
  {
  }
}
 8002058:	bf00      	nop
 800205a:	bf00      	nop
 800205c:	3710      	adds	r7, #16
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	20000008 	.word	0x20000008

08002068 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002068:	b480      	push	{r7}
 800206a:	b085      	sub	sp, #20
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	f003 0307 	and.w	r3, r3, #7
 8002076:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002078:	4b0c      	ldr	r3, [pc, #48]	@ (80020ac <__NVIC_SetPriorityGrouping+0x44>)
 800207a:	68db      	ldr	r3, [r3, #12]
 800207c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800207e:	68ba      	ldr	r2, [r7, #8]
 8002080:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002084:	4013      	ands	r3, r2
 8002086:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800208c:	68bb      	ldr	r3, [r7, #8]
 800208e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002090:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002094:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002098:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800209a:	4a04      	ldr	r2, [pc, #16]	@ (80020ac <__NVIC_SetPriorityGrouping+0x44>)
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	60d3      	str	r3, [r2, #12]
}
 80020a0:	bf00      	nop
 80020a2:	3714      	adds	r7, #20
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr
 80020ac:	e000ed00 	.word	0xe000ed00

080020b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020b0:	b480      	push	{r7}
 80020b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020b4:	4b04      	ldr	r3, [pc, #16]	@ (80020c8 <__NVIC_GetPriorityGrouping+0x18>)
 80020b6:	68db      	ldr	r3, [r3, #12]
 80020b8:	0a1b      	lsrs	r3, r3, #8
 80020ba:	f003 0307 	and.w	r3, r3, #7
}
 80020be:	4618      	mov	r0, r3
 80020c0:	46bd      	mov	sp, r7
 80020c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c6:	4770      	bx	lr
 80020c8:	e000ed00 	.word	0xe000ed00

080020cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b083      	sub	sp, #12
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	4603      	mov	r3, r0
 80020d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	db0b      	blt.n	80020f6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020de:	79fb      	ldrb	r3, [r7, #7]
 80020e0:	f003 021f 	and.w	r2, r3, #31
 80020e4:	4907      	ldr	r1, [pc, #28]	@ (8002104 <__NVIC_EnableIRQ+0x38>)
 80020e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ea:	095b      	lsrs	r3, r3, #5
 80020ec:	2001      	movs	r0, #1
 80020ee:	fa00 f202 	lsl.w	r2, r0, r2
 80020f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80020f6:	bf00      	nop
 80020f8:	370c      	adds	r7, #12
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr
 8002102:	bf00      	nop
 8002104:	e000e100 	.word	0xe000e100

08002108 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002108:	b480      	push	{r7}
 800210a:	b083      	sub	sp, #12
 800210c:	af00      	add	r7, sp, #0
 800210e:	4603      	mov	r3, r0
 8002110:	6039      	str	r1, [r7, #0]
 8002112:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002114:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002118:	2b00      	cmp	r3, #0
 800211a:	db0a      	blt.n	8002132 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	b2da      	uxtb	r2, r3
 8002120:	490c      	ldr	r1, [pc, #48]	@ (8002154 <__NVIC_SetPriority+0x4c>)
 8002122:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002126:	0112      	lsls	r2, r2, #4
 8002128:	b2d2      	uxtb	r2, r2
 800212a:	440b      	add	r3, r1
 800212c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002130:	e00a      	b.n	8002148 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	b2da      	uxtb	r2, r3
 8002136:	4908      	ldr	r1, [pc, #32]	@ (8002158 <__NVIC_SetPriority+0x50>)
 8002138:	79fb      	ldrb	r3, [r7, #7]
 800213a:	f003 030f 	and.w	r3, r3, #15
 800213e:	3b04      	subs	r3, #4
 8002140:	0112      	lsls	r2, r2, #4
 8002142:	b2d2      	uxtb	r2, r2
 8002144:	440b      	add	r3, r1
 8002146:	761a      	strb	r2, [r3, #24]
}
 8002148:	bf00      	nop
 800214a:	370c      	adds	r7, #12
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr
 8002154:	e000e100 	.word	0xe000e100
 8002158:	e000ed00 	.word	0xe000ed00

0800215c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800215c:	b480      	push	{r7}
 800215e:	b089      	sub	sp, #36	@ 0x24
 8002160:	af00      	add	r7, sp, #0
 8002162:	60f8      	str	r0, [r7, #12]
 8002164:	60b9      	str	r1, [r7, #8]
 8002166:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	f003 0307 	and.w	r3, r3, #7
 800216e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002170:	69fb      	ldr	r3, [r7, #28]
 8002172:	f1c3 0307 	rsb	r3, r3, #7
 8002176:	2b04      	cmp	r3, #4
 8002178:	bf28      	it	cs
 800217a:	2304      	movcs	r3, #4
 800217c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800217e:	69fb      	ldr	r3, [r7, #28]
 8002180:	3304      	adds	r3, #4
 8002182:	2b06      	cmp	r3, #6
 8002184:	d902      	bls.n	800218c <NVIC_EncodePriority+0x30>
 8002186:	69fb      	ldr	r3, [r7, #28]
 8002188:	3b03      	subs	r3, #3
 800218a:	e000      	b.n	800218e <NVIC_EncodePriority+0x32>
 800218c:	2300      	movs	r3, #0
 800218e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002190:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002194:	69bb      	ldr	r3, [r7, #24]
 8002196:	fa02 f303 	lsl.w	r3, r2, r3
 800219a:	43da      	mvns	r2, r3
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	401a      	ands	r2, r3
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021a4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	fa01 f303 	lsl.w	r3, r1, r3
 80021ae:	43d9      	mvns	r1, r3
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021b4:	4313      	orrs	r3, r2
         );
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	3724      	adds	r7, #36	@ 0x24
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr
	...

080021c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b082      	sub	sp, #8
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	3b01      	subs	r3, #1
 80021d0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80021d4:	d301      	bcc.n	80021da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021d6:	2301      	movs	r3, #1
 80021d8:	e00f      	b.n	80021fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021da:	4a0a      	ldr	r2, [pc, #40]	@ (8002204 <SysTick_Config+0x40>)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	3b01      	subs	r3, #1
 80021e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021e2:	210f      	movs	r1, #15
 80021e4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80021e8:	f7ff ff8e 	bl	8002108 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021ec:	4b05      	ldr	r3, [pc, #20]	@ (8002204 <SysTick_Config+0x40>)
 80021ee:	2200      	movs	r2, #0
 80021f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021f2:	4b04      	ldr	r3, [pc, #16]	@ (8002204 <SysTick_Config+0x40>)
 80021f4:	2207      	movs	r2, #7
 80021f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021f8:	2300      	movs	r3, #0
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	3708      	adds	r7, #8
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	e000e010 	.word	0xe000e010

08002208 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b082      	sub	sp, #8
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002210:	6878      	ldr	r0, [r7, #4]
 8002212:	f7ff ff29 	bl	8002068 <__NVIC_SetPriorityGrouping>
}
 8002216:	bf00      	nop
 8002218:	3708      	adds	r7, #8
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}

0800221e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800221e:	b580      	push	{r7, lr}
 8002220:	b086      	sub	sp, #24
 8002222:	af00      	add	r7, sp, #0
 8002224:	4603      	mov	r3, r0
 8002226:	60b9      	str	r1, [r7, #8]
 8002228:	607a      	str	r2, [r7, #4]
 800222a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800222c:	2300      	movs	r3, #0
 800222e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002230:	f7ff ff3e 	bl	80020b0 <__NVIC_GetPriorityGrouping>
 8002234:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002236:	687a      	ldr	r2, [r7, #4]
 8002238:	68b9      	ldr	r1, [r7, #8]
 800223a:	6978      	ldr	r0, [r7, #20]
 800223c:	f7ff ff8e 	bl	800215c <NVIC_EncodePriority>
 8002240:	4602      	mov	r2, r0
 8002242:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002246:	4611      	mov	r1, r2
 8002248:	4618      	mov	r0, r3
 800224a:	f7ff ff5d 	bl	8002108 <__NVIC_SetPriority>
}
 800224e:	bf00      	nop
 8002250:	3718      	adds	r7, #24
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}

08002256 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002256:	b580      	push	{r7, lr}
 8002258:	b082      	sub	sp, #8
 800225a:	af00      	add	r7, sp, #0
 800225c:	4603      	mov	r3, r0
 800225e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002260:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002264:	4618      	mov	r0, r3
 8002266:	f7ff ff31 	bl	80020cc <__NVIC_EnableIRQ>
}
 800226a:	bf00      	nop
 800226c:	3708      	adds	r7, #8
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}

08002272 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002272:	b580      	push	{r7, lr}
 8002274:	b082      	sub	sp, #8
 8002276:	af00      	add	r7, sp, #0
 8002278:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800227a:	6878      	ldr	r0, [r7, #4]
 800227c:	f7ff ffa2 	bl	80021c4 <SysTick_Config>
 8002280:	4603      	mov	r3, r0
}
 8002282:	4618      	mov	r0, r3
 8002284:	3708      	adds	r7, #8
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}

0800228a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800228a:	b580      	push	{r7, lr}
 800228c:	b084      	sub	sp, #16
 800228e:	af00      	add	r7, sp, #0
 8002290:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002296:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002298:	f7ff feb6 	bl	8002008 <HAL_GetTick>
 800229c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80022a4:	b2db      	uxtb	r3, r3
 80022a6:	2b02      	cmp	r3, #2
 80022a8:	d008      	beq.n	80022bc <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2280      	movs	r2, #128	@ 0x80
 80022ae:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2200      	movs	r2, #0
 80022b4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80022b8:	2301      	movs	r3, #1
 80022ba:	e052      	b.n	8002362 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	681a      	ldr	r2, [r3, #0]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f022 0216 	bic.w	r2, r2, #22
 80022ca:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	695a      	ldr	r2, [r3, #20]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80022da:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d103      	bne.n	80022ec <HAL_DMA_Abort+0x62>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d007      	beq.n	80022fc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	681a      	ldr	r2, [r3, #0]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f022 0208 	bic.w	r2, r2, #8
 80022fa:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	681a      	ldr	r2, [r3, #0]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f022 0201 	bic.w	r2, r2, #1
 800230a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800230c:	e013      	b.n	8002336 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800230e:	f7ff fe7b 	bl	8002008 <HAL_GetTick>
 8002312:	4602      	mov	r2, r0
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	1ad3      	subs	r3, r2, r3
 8002318:	2b05      	cmp	r3, #5
 800231a:	d90c      	bls.n	8002336 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2220      	movs	r2, #32
 8002320:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2203      	movs	r2, #3
 8002326:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2200      	movs	r2, #0
 800232e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002332:	2303      	movs	r3, #3
 8002334:	e015      	b.n	8002362 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f003 0301 	and.w	r3, r3, #1
 8002340:	2b00      	cmp	r3, #0
 8002342:	d1e4      	bne.n	800230e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002348:	223f      	movs	r2, #63	@ 0x3f
 800234a:	409a      	lsls	r2, r3
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2201      	movs	r2, #1
 8002354:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2200      	movs	r2, #0
 800235c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002360:	2300      	movs	r3, #0
}
 8002362:	4618      	mov	r0, r3
 8002364:	3710      	adds	r7, #16
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}

0800236a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800236a:	b480      	push	{r7}
 800236c:	b083      	sub	sp, #12
 800236e:	af00      	add	r7, sp, #0
 8002370:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002378:	b2db      	uxtb	r3, r3
 800237a:	2b02      	cmp	r3, #2
 800237c:	d004      	beq.n	8002388 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2280      	movs	r2, #128	@ 0x80
 8002382:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002384:	2301      	movs	r3, #1
 8002386:	e00c      	b.n	80023a2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2205      	movs	r2, #5
 800238c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f022 0201 	bic.w	r2, r2, #1
 800239e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80023a0:	2300      	movs	r3, #0
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	370c      	adds	r7, #12
 80023a6:	46bd      	mov	sp, r7
 80023a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ac:	4770      	bx	lr
	...

080023b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b089      	sub	sp, #36	@ 0x24
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
 80023b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80023ba:	2300      	movs	r3, #0
 80023bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80023be:	2300      	movs	r3, #0
 80023c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80023c2:	2300      	movs	r3, #0
 80023c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023c6:	2300      	movs	r3, #0
 80023c8:	61fb      	str	r3, [r7, #28]
 80023ca:	e159      	b.n	8002680 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80023cc:	2201      	movs	r2, #1
 80023ce:	69fb      	ldr	r3, [r7, #28]
 80023d0:	fa02 f303 	lsl.w	r3, r2, r3
 80023d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	697a      	ldr	r2, [r7, #20]
 80023dc:	4013      	ands	r3, r2
 80023de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80023e0:	693a      	ldr	r2, [r7, #16]
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	429a      	cmp	r2, r3
 80023e6:	f040 8148 	bne.w	800267a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	f003 0303 	and.w	r3, r3, #3
 80023f2:	2b01      	cmp	r3, #1
 80023f4:	d005      	beq.n	8002402 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023fe:	2b02      	cmp	r3, #2
 8002400:	d130      	bne.n	8002464 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002408:	69fb      	ldr	r3, [r7, #28]
 800240a:	005b      	lsls	r3, r3, #1
 800240c:	2203      	movs	r2, #3
 800240e:	fa02 f303 	lsl.w	r3, r2, r3
 8002412:	43db      	mvns	r3, r3
 8002414:	69ba      	ldr	r2, [r7, #24]
 8002416:	4013      	ands	r3, r2
 8002418:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	68da      	ldr	r2, [r3, #12]
 800241e:	69fb      	ldr	r3, [r7, #28]
 8002420:	005b      	lsls	r3, r3, #1
 8002422:	fa02 f303 	lsl.w	r3, r2, r3
 8002426:	69ba      	ldr	r2, [r7, #24]
 8002428:	4313      	orrs	r3, r2
 800242a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	69ba      	ldr	r2, [r7, #24]
 8002430:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002438:	2201      	movs	r2, #1
 800243a:	69fb      	ldr	r3, [r7, #28]
 800243c:	fa02 f303 	lsl.w	r3, r2, r3
 8002440:	43db      	mvns	r3, r3
 8002442:	69ba      	ldr	r2, [r7, #24]
 8002444:	4013      	ands	r3, r2
 8002446:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	091b      	lsrs	r3, r3, #4
 800244e:	f003 0201 	and.w	r2, r3, #1
 8002452:	69fb      	ldr	r3, [r7, #28]
 8002454:	fa02 f303 	lsl.w	r3, r2, r3
 8002458:	69ba      	ldr	r2, [r7, #24]
 800245a:	4313      	orrs	r3, r2
 800245c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	69ba      	ldr	r2, [r7, #24]
 8002462:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	f003 0303 	and.w	r3, r3, #3
 800246c:	2b03      	cmp	r3, #3
 800246e:	d017      	beq.n	80024a0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	68db      	ldr	r3, [r3, #12]
 8002474:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002476:	69fb      	ldr	r3, [r7, #28]
 8002478:	005b      	lsls	r3, r3, #1
 800247a:	2203      	movs	r2, #3
 800247c:	fa02 f303 	lsl.w	r3, r2, r3
 8002480:	43db      	mvns	r3, r3
 8002482:	69ba      	ldr	r2, [r7, #24]
 8002484:	4013      	ands	r3, r2
 8002486:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	689a      	ldr	r2, [r3, #8]
 800248c:	69fb      	ldr	r3, [r7, #28]
 800248e:	005b      	lsls	r3, r3, #1
 8002490:	fa02 f303 	lsl.w	r3, r2, r3
 8002494:	69ba      	ldr	r2, [r7, #24]
 8002496:	4313      	orrs	r3, r2
 8002498:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	69ba      	ldr	r2, [r7, #24]
 800249e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	f003 0303 	and.w	r3, r3, #3
 80024a8:	2b02      	cmp	r3, #2
 80024aa:	d123      	bne.n	80024f4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80024ac:	69fb      	ldr	r3, [r7, #28]
 80024ae:	08da      	lsrs	r2, r3, #3
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	3208      	adds	r2, #8
 80024b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80024ba:	69fb      	ldr	r3, [r7, #28]
 80024bc:	f003 0307 	and.w	r3, r3, #7
 80024c0:	009b      	lsls	r3, r3, #2
 80024c2:	220f      	movs	r2, #15
 80024c4:	fa02 f303 	lsl.w	r3, r2, r3
 80024c8:	43db      	mvns	r3, r3
 80024ca:	69ba      	ldr	r2, [r7, #24]
 80024cc:	4013      	ands	r3, r2
 80024ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	691a      	ldr	r2, [r3, #16]
 80024d4:	69fb      	ldr	r3, [r7, #28]
 80024d6:	f003 0307 	and.w	r3, r3, #7
 80024da:	009b      	lsls	r3, r3, #2
 80024dc:	fa02 f303 	lsl.w	r3, r2, r3
 80024e0:	69ba      	ldr	r2, [r7, #24]
 80024e2:	4313      	orrs	r3, r2
 80024e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80024e6:	69fb      	ldr	r3, [r7, #28]
 80024e8:	08da      	lsrs	r2, r3, #3
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	3208      	adds	r2, #8
 80024ee:	69b9      	ldr	r1, [r7, #24]
 80024f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80024fa:	69fb      	ldr	r3, [r7, #28]
 80024fc:	005b      	lsls	r3, r3, #1
 80024fe:	2203      	movs	r2, #3
 8002500:	fa02 f303 	lsl.w	r3, r2, r3
 8002504:	43db      	mvns	r3, r3
 8002506:	69ba      	ldr	r2, [r7, #24]
 8002508:	4013      	ands	r3, r2
 800250a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	f003 0203 	and.w	r2, r3, #3
 8002514:	69fb      	ldr	r3, [r7, #28]
 8002516:	005b      	lsls	r3, r3, #1
 8002518:	fa02 f303 	lsl.w	r3, r2, r3
 800251c:	69ba      	ldr	r2, [r7, #24]
 800251e:	4313      	orrs	r3, r2
 8002520:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	69ba      	ldr	r2, [r7, #24]
 8002526:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002530:	2b00      	cmp	r3, #0
 8002532:	f000 80a2 	beq.w	800267a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002536:	2300      	movs	r3, #0
 8002538:	60fb      	str	r3, [r7, #12]
 800253a:	4b57      	ldr	r3, [pc, #348]	@ (8002698 <HAL_GPIO_Init+0x2e8>)
 800253c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800253e:	4a56      	ldr	r2, [pc, #344]	@ (8002698 <HAL_GPIO_Init+0x2e8>)
 8002540:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002544:	6453      	str	r3, [r2, #68]	@ 0x44
 8002546:	4b54      	ldr	r3, [pc, #336]	@ (8002698 <HAL_GPIO_Init+0x2e8>)
 8002548:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800254a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800254e:	60fb      	str	r3, [r7, #12]
 8002550:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002552:	4a52      	ldr	r2, [pc, #328]	@ (800269c <HAL_GPIO_Init+0x2ec>)
 8002554:	69fb      	ldr	r3, [r7, #28]
 8002556:	089b      	lsrs	r3, r3, #2
 8002558:	3302      	adds	r3, #2
 800255a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800255e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002560:	69fb      	ldr	r3, [r7, #28]
 8002562:	f003 0303 	and.w	r3, r3, #3
 8002566:	009b      	lsls	r3, r3, #2
 8002568:	220f      	movs	r2, #15
 800256a:	fa02 f303 	lsl.w	r3, r2, r3
 800256e:	43db      	mvns	r3, r3
 8002570:	69ba      	ldr	r2, [r7, #24]
 8002572:	4013      	ands	r3, r2
 8002574:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	4a49      	ldr	r2, [pc, #292]	@ (80026a0 <HAL_GPIO_Init+0x2f0>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d019      	beq.n	80025b2 <HAL_GPIO_Init+0x202>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	4a48      	ldr	r2, [pc, #288]	@ (80026a4 <HAL_GPIO_Init+0x2f4>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d013      	beq.n	80025ae <HAL_GPIO_Init+0x1fe>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	4a47      	ldr	r2, [pc, #284]	@ (80026a8 <HAL_GPIO_Init+0x2f8>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d00d      	beq.n	80025aa <HAL_GPIO_Init+0x1fa>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	4a46      	ldr	r2, [pc, #280]	@ (80026ac <HAL_GPIO_Init+0x2fc>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d007      	beq.n	80025a6 <HAL_GPIO_Init+0x1f6>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	4a45      	ldr	r2, [pc, #276]	@ (80026b0 <HAL_GPIO_Init+0x300>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d101      	bne.n	80025a2 <HAL_GPIO_Init+0x1f2>
 800259e:	2304      	movs	r3, #4
 80025a0:	e008      	b.n	80025b4 <HAL_GPIO_Init+0x204>
 80025a2:	2307      	movs	r3, #7
 80025a4:	e006      	b.n	80025b4 <HAL_GPIO_Init+0x204>
 80025a6:	2303      	movs	r3, #3
 80025a8:	e004      	b.n	80025b4 <HAL_GPIO_Init+0x204>
 80025aa:	2302      	movs	r3, #2
 80025ac:	e002      	b.n	80025b4 <HAL_GPIO_Init+0x204>
 80025ae:	2301      	movs	r3, #1
 80025b0:	e000      	b.n	80025b4 <HAL_GPIO_Init+0x204>
 80025b2:	2300      	movs	r3, #0
 80025b4:	69fa      	ldr	r2, [r7, #28]
 80025b6:	f002 0203 	and.w	r2, r2, #3
 80025ba:	0092      	lsls	r2, r2, #2
 80025bc:	4093      	lsls	r3, r2
 80025be:	69ba      	ldr	r2, [r7, #24]
 80025c0:	4313      	orrs	r3, r2
 80025c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80025c4:	4935      	ldr	r1, [pc, #212]	@ (800269c <HAL_GPIO_Init+0x2ec>)
 80025c6:	69fb      	ldr	r3, [r7, #28]
 80025c8:	089b      	lsrs	r3, r3, #2
 80025ca:	3302      	adds	r3, #2
 80025cc:	69ba      	ldr	r2, [r7, #24]
 80025ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80025d2:	4b38      	ldr	r3, [pc, #224]	@ (80026b4 <HAL_GPIO_Init+0x304>)
 80025d4:	689b      	ldr	r3, [r3, #8]
 80025d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	43db      	mvns	r3, r3
 80025dc:	69ba      	ldr	r2, [r7, #24]
 80025de:	4013      	ands	r3, r2
 80025e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d003      	beq.n	80025f6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80025ee:	69ba      	ldr	r2, [r7, #24]
 80025f0:	693b      	ldr	r3, [r7, #16]
 80025f2:	4313      	orrs	r3, r2
 80025f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80025f6:	4a2f      	ldr	r2, [pc, #188]	@ (80026b4 <HAL_GPIO_Init+0x304>)
 80025f8:	69bb      	ldr	r3, [r7, #24]
 80025fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80025fc:	4b2d      	ldr	r3, [pc, #180]	@ (80026b4 <HAL_GPIO_Init+0x304>)
 80025fe:	68db      	ldr	r3, [r3, #12]
 8002600:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	43db      	mvns	r3, r3
 8002606:	69ba      	ldr	r2, [r7, #24]
 8002608:	4013      	ands	r3, r2
 800260a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002614:	2b00      	cmp	r3, #0
 8002616:	d003      	beq.n	8002620 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002618:	69ba      	ldr	r2, [r7, #24]
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	4313      	orrs	r3, r2
 800261e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002620:	4a24      	ldr	r2, [pc, #144]	@ (80026b4 <HAL_GPIO_Init+0x304>)
 8002622:	69bb      	ldr	r3, [r7, #24]
 8002624:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002626:	4b23      	ldr	r3, [pc, #140]	@ (80026b4 <HAL_GPIO_Init+0x304>)
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	43db      	mvns	r3, r3
 8002630:	69ba      	ldr	r2, [r7, #24]
 8002632:	4013      	ands	r3, r2
 8002634:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800263e:	2b00      	cmp	r3, #0
 8002640:	d003      	beq.n	800264a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002642:	69ba      	ldr	r2, [r7, #24]
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	4313      	orrs	r3, r2
 8002648:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800264a:	4a1a      	ldr	r2, [pc, #104]	@ (80026b4 <HAL_GPIO_Init+0x304>)
 800264c:	69bb      	ldr	r3, [r7, #24]
 800264e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002650:	4b18      	ldr	r3, [pc, #96]	@ (80026b4 <HAL_GPIO_Init+0x304>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	43db      	mvns	r3, r3
 800265a:	69ba      	ldr	r2, [r7, #24]
 800265c:	4013      	ands	r3, r2
 800265e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002668:	2b00      	cmp	r3, #0
 800266a:	d003      	beq.n	8002674 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800266c:	69ba      	ldr	r2, [r7, #24]
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	4313      	orrs	r3, r2
 8002672:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002674:	4a0f      	ldr	r2, [pc, #60]	@ (80026b4 <HAL_GPIO_Init+0x304>)
 8002676:	69bb      	ldr	r3, [r7, #24]
 8002678:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800267a:	69fb      	ldr	r3, [r7, #28]
 800267c:	3301      	adds	r3, #1
 800267e:	61fb      	str	r3, [r7, #28]
 8002680:	69fb      	ldr	r3, [r7, #28]
 8002682:	2b0f      	cmp	r3, #15
 8002684:	f67f aea2 	bls.w	80023cc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002688:	bf00      	nop
 800268a:	bf00      	nop
 800268c:	3724      	adds	r7, #36	@ 0x24
 800268e:	46bd      	mov	sp, r7
 8002690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002694:	4770      	bx	lr
 8002696:	bf00      	nop
 8002698:	40023800 	.word	0x40023800
 800269c:	40013800 	.word	0x40013800
 80026a0:	40020000 	.word	0x40020000
 80026a4:	40020400 	.word	0x40020400
 80026a8:	40020800 	.word	0x40020800
 80026ac:	40020c00 	.word	0x40020c00
 80026b0:	40021000 	.word	0x40021000
 80026b4:	40013c00 	.word	0x40013c00

080026b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b083      	sub	sp, #12
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
 80026c0:	460b      	mov	r3, r1
 80026c2:	807b      	strh	r3, [r7, #2]
 80026c4:	4613      	mov	r3, r2
 80026c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80026c8:	787b      	ldrb	r3, [r7, #1]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d003      	beq.n	80026d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80026ce:	887a      	ldrh	r2, [r7, #2]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80026d4:	e003      	b.n	80026de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80026d6:	887b      	ldrh	r3, [r7, #2]
 80026d8:	041a      	lsls	r2, r3, #16
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	619a      	str	r2, [r3, #24]
}
 80026de:	bf00      	nop
 80026e0:	370c      	adds	r7, #12
 80026e2:	46bd      	mov	sp, r7
 80026e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e8:	4770      	bx	lr
	...

080026ec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b084      	sub	sp, #16
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d101      	bne.n	80026fe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	e12b      	b.n	8002956 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002704:	b2db      	uxtb	r3, r3
 8002706:	2b00      	cmp	r3, #0
 8002708:	d106      	bne.n	8002718 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2200      	movs	r2, #0
 800270e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002712:	6878      	ldr	r0, [r7, #4]
 8002714:	f7ff f968 	bl	80019e8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2224      	movs	r2, #36	@ 0x24
 800271c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f022 0201 	bic.w	r2, r2, #1
 800272e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800273e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	681a      	ldr	r2, [r3, #0]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800274e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002750:	f001 fd5a 	bl	8004208 <HAL_RCC_GetPCLK1Freq>
 8002754:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	4a81      	ldr	r2, [pc, #516]	@ (8002960 <HAL_I2C_Init+0x274>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d807      	bhi.n	8002770 <HAL_I2C_Init+0x84>
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	4a80      	ldr	r2, [pc, #512]	@ (8002964 <HAL_I2C_Init+0x278>)
 8002764:	4293      	cmp	r3, r2
 8002766:	bf94      	ite	ls
 8002768:	2301      	movls	r3, #1
 800276a:	2300      	movhi	r3, #0
 800276c:	b2db      	uxtb	r3, r3
 800276e:	e006      	b.n	800277e <HAL_I2C_Init+0x92>
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	4a7d      	ldr	r2, [pc, #500]	@ (8002968 <HAL_I2C_Init+0x27c>)
 8002774:	4293      	cmp	r3, r2
 8002776:	bf94      	ite	ls
 8002778:	2301      	movls	r3, #1
 800277a:	2300      	movhi	r3, #0
 800277c:	b2db      	uxtb	r3, r3
 800277e:	2b00      	cmp	r3, #0
 8002780:	d001      	beq.n	8002786 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	e0e7      	b.n	8002956 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	4a78      	ldr	r2, [pc, #480]	@ (800296c <HAL_I2C_Init+0x280>)
 800278a:	fba2 2303 	umull	r2, r3, r2, r3
 800278e:	0c9b      	lsrs	r3, r3, #18
 8002790:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	68ba      	ldr	r2, [r7, #8]
 80027a2:	430a      	orrs	r2, r1
 80027a4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	6a1b      	ldr	r3, [r3, #32]
 80027ac:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	4a6a      	ldr	r2, [pc, #424]	@ (8002960 <HAL_I2C_Init+0x274>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d802      	bhi.n	80027c0 <HAL_I2C_Init+0xd4>
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	3301      	adds	r3, #1
 80027be:	e009      	b.n	80027d4 <HAL_I2C_Init+0xe8>
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80027c6:	fb02 f303 	mul.w	r3, r2, r3
 80027ca:	4a69      	ldr	r2, [pc, #420]	@ (8002970 <HAL_I2C_Init+0x284>)
 80027cc:	fba2 2303 	umull	r2, r3, r2, r3
 80027d0:	099b      	lsrs	r3, r3, #6
 80027d2:	3301      	adds	r3, #1
 80027d4:	687a      	ldr	r2, [r7, #4]
 80027d6:	6812      	ldr	r2, [r2, #0]
 80027d8:	430b      	orrs	r3, r1
 80027da:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	69db      	ldr	r3, [r3, #28]
 80027e2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80027e6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	495c      	ldr	r1, [pc, #368]	@ (8002960 <HAL_I2C_Init+0x274>)
 80027f0:	428b      	cmp	r3, r1
 80027f2:	d819      	bhi.n	8002828 <HAL_I2C_Init+0x13c>
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	1e59      	subs	r1, r3, #1
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	005b      	lsls	r3, r3, #1
 80027fe:	fbb1 f3f3 	udiv	r3, r1, r3
 8002802:	1c59      	adds	r1, r3, #1
 8002804:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002808:	400b      	ands	r3, r1
 800280a:	2b00      	cmp	r3, #0
 800280c:	d00a      	beq.n	8002824 <HAL_I2C_Init+0x138>
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	1e59      	subs	r1, r3, #1
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	005b      	lsls	r3, r3, #1
 8002818:	fbb1 f3f3 	udiv	r3, r1, r3
 800281c:	3301      	adds	r3, #1
 800281e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002822:	e051      	b.n	80028c8 <HAL_I2C_Init+0x1dc>
 8002824:	2304      	movs	r3, #4
 8002826:	e04f      	b.n	80028c8 <HAL_I2C_Init+0x1dc>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d111      	bne.n	8002854 <HAL_I2C_Init+0x168>
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	1e58      	subs	r0, r3, #1
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6859      	ldr	r1, [r3, #4]
 8002838:	460b      	mov	r3, r1
 800283a:	005b      	lsls	r3, r3, #1
 800283c:	440b      	add	r3, r1
 800283e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002842:	3301      	adds	r3, #1
 8002844:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002848:	2b00      	cmp	r3, #0
 800284a:	bf0c      	ite	eq
 800284c:	2301      	moveq	r3, #1
 800284e:	2300      	movne	r3, #0
 8002850:	b2db      	uxtb	r3, r3
 8002852:	e012      	b.n	800287a <HAL_I2C_Init+0x18e>
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	1e58      	subs	r0, r3, #1
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6859      	ldr	r1, [r3, #4]
 800285c:	460b      	mov	r3, r1
 800285e:	009b      	lsls	r3, r3, #2
 8002860:	440b      	add	r3, r1
 8002862:	0099      	lsls	r1, r3, #2
 8002864:	440b      	add	r3, r1
 8002866:	fbb0 f3f3 	udiv	r3, r0, r3
 800286a:	3301      	adds	r3, #1
 800286c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002870:	2b00      	cmp	r3, #0
 8002872:	bf0c      	ite	eq
 8002874:	2301      	moveq	r3, #1
 8002876:	2300      	movne	r3, #0
 8002878:	b2db      	uxtb	r3, r3
 800287a:	2b00      	cmp	r3, #0
 800287c:	d001      	beq.n	8002882 <HAL_I2C_Init+0x196>
 800287e:	2301      	movs	r3, #1
 8002880:	e022      	b.n	80028c8 <HAL_I2C_Init+0x1dc>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	689b      	ldr	r3, [r3, #8]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d10e      	bne.n	80028a8 <HAL_I2C_Init+0x1bc>
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	1e58      	subs	r0, r3, #1
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6859      	ldr	r1, [r3, #4]
 8002892:	460b      	mov	r3, r1
 8002894:	005b      	lsls	r3, r3, #1
 8002896:	440b      	add	r3, r1
 8002898:	fbb0 f3f3 	udiv	r3, r0, r3
 800289c:	3301      	adds	r3, #1
 800289e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80028a6:	e00f      	b.n	80028c8 <HAL_I2C_Init+0x1dc>
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	1e58      	subs	r0, r3, #1
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6859      	ldr	r1, [r3, #4]
 80028b0:	460b      	mov	r3, r1
 80028b2:	009b      	lsls	r3, r3, #2
 80028b4:	440b      	add	r3, r1
 80028b6:	0099      	lsls	r1, r3, #2
 80028b8:	440b      	add	r3, r1
 80028ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80028be:	3301      	adds	r3, #1
 80028c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028c4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80028c8:	6879      	ldr	r1, [r7, #4]
 80028ca:	6809      	ldr	r1, [r1, #0]
 80028cc:	4313      	orrs	r3, r2
 80028ce:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	69da      	ldr	r2, [r3, #28]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6a1b      	ldr	r3, [r3, #32]
 80028e2:	431a      	orrs	r2, r3
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	430a      	orrs	r2, r1
 80028ea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	689b      	ldr	r3, [r3, #8]
 80028f2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80028f6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80028fa:	687a      	ldr	r2, [r7, #4]
 80028fc:	6911      	ldr	r1, [r2, #16]
 80028fe:	687a      	ldr	r2, [r7, #4]
 8002900:	68d2      	ldr	r2, [r2, #12]
 8002902:	4311      	orrs	r1, r2
 8002904:	687a      	ldr	r2, [r7, #4]
 8002906:	6812      	ldr	r2, [r2, #0]
 8002908:	430b      	orrs	r3, r1
 800290a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	68db      	ldr	r3, [r3, #12]
 8002912:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	695a      	ldr	r2, [r3, #20]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	699b      	ldr	r3, [r3, #24]
 800291e:	431a      	orrs	r2, r3
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	430a      	orrs	r2, r1
 8002926:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	681a      	ldr	r2, [r3, #0]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f042 0201 	orr.w	r2, r2, #1
 8002936:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2200      	movs	r2, #0
 800293c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2220      	movs	r2, #32
 8002942:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2200      	movs	r2, #0
 800294a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2200      	movs	r2, #0
 8002950:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002954:	2300      	movs	r3, #0
}
 8002956:	4618      	mov	r0, r3
 8002958:	3710      	adds	r7, #16
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop
 8002960:	000186a0 	.word	0x000186a0
 8002964:	001e847f 	.word	0x001e847f
 8002968:	003d08ff 	.word	0x003d08ff
 800296c:	431bde83 	.word	0x431bde83
 8002970:	10624dd3 	.word	0x10624dd3

08002974 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b088      	sub	sp, #32
 8002978:	af02      	add	r7, sp, #8
 800297a:	60f8      	str	r0, [r7, #12]
 800297c:	4608      	mov	r0, r1
 800297e:	4611      	mov	r1, r2
 8002980:	461a      	mov	r2, r3
 8002982:	4603      	mov	r3, r0
 8002984:	817b      	strh	r3, [r7, #10]
 8002986:	460b      	mov	r3, r1
 8002988:	813b      	strh	r3, [r7, #8]
 800298a:	4613      	mov	r3, r2
 800298c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800298e:	f7ff fb3b 	bl	8002008 <HAL_GetTick>
 8002992:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800299a:	b2db      	uxtb	r3, r3
 800299c:	2b20      	cmp	r3, #32
 800299e:	f040 80d9 	bne.w	8002b54 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	9300      	str	r3, [sp, #0]
 80029a6:	2319      	movs	r3, #25
 80029a8:	2201      	movs	r2, #1
 80029aa:	496d      	ldr	r1, [pc, #436]	@ (8002b60 <HAL_I2C_Mem_Write+0x1ec>)
 80029ac:	68f8      	ldr	r0, [r7, #12]
 80029ae:	f000 fdc5 	bl	800353c <I2C_WaitOnFlagUntilTimeout>
 80029b2:	4603      	mov	r3, r0
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d001      	beq.n	80029bc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80029b8:	2302      	movs	r3, #2
 80029ba:	e0cc      	b.n	8002b56 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80029c2:	2b01      	cmp	r3, #1
 80029c4:	d101      	bne.n	80029ca <HAL_I2C_Mem_Write+0x56>
 80029c6:	2302      	movs	r3, #2
 80029c8:	e0c5      	b.n	8002b56 <HAL_I2C_Mem_Write+0x1e2>
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	2201      	movs	r2, #1
 80029ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f003 0301 	and.w	r3, r3, #1
 80029dc:	2b01      	cmp	r3, #1
 80029de:	d007      	beq.n	80029f0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	681a      	ldr	r2, [r3, #0]
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f042 0201 	orr.w	r2, r2, #1
 80029ee:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80029fe:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	2221      	movs	r2, #33	@ 0x21
 8002a04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	2240      	movs	r2, #64	@ 0x40
 8002a0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	2200      	movs	r2, #0
 8002a14:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	6a3a      	ldr	r2, [r7, #32]
 8002a1a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002a20:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a26:	b29a      	uxth	r2, r3
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	4a4d      	ldr	r2, [pc, #308]	@ (8002b64 <HAL_I2C_Mem_Write+0x1f0>)
 8002a30:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002a32:	88f8      	ldrh	r0, [r7, #6]
 8002a34:	893a      	ldrh	r2, [r7, #8]
 8002a36:	8979      	ldrh	r1, [r7, #10]
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	9301      	str	r3, [sp, #4]
 8002a3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a3e:	9300      	str	r3, [sp, #0]
 8002a40:	4603      	mov	r3, r0
 8002a42:	68f8      	ldr	r0, [r7, #12]
 8002a44:	f000 fbfc 	bl	8003240 <I2C_RequestMemoryWrite>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d052      	beq.n	8002af4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e081      	b.n	8002b56 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a52:	697a      	ldr	r2, [r7, #20]
 8002a54:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002a56:	68f8      	ldr	r0, [r7, #12]
 8002a58:	f000 fe8a 	bl	8003770 <I2C_WaitOnTXEFlagUntilTimeout>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d00d      	beq.n	8002a7e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a66:	2b04      	cmp	r3, #4
 8002a68:	d107      	bne.n	8002a7a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	681a      	ldr	r2, [r3, #0]
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a78:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e06b      	b.n	8002b56 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a82:	781a      	ldrb	r2, [r3, #0]
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a8e:	1c5a      	adds	r2, r3, #1
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a98:	3b01      	subs	r3, #1
 8002a9a:	b29a      	uxth	r2, r3
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002aa4:	b29b      	uxth	r3, r3
 8002aa6:	3b01      	subs	r3, #1
 8002aa8:	b29a      	uxth	r2, r3
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	695b      	ldr	r3, [r3, #20]
 8002ab4:	f003 0304 	and.w	r3, r3, #4
 8002ab8:	2b04      	cmp	r3, #4
 8002aba:	d11b      	bne.n	8002af4 <HAL_I2C_Mem_Write+0x180>
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d017      	beq.n	8002af4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ac8:	781a      	ldrb	r2, [r3, #0]
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ad4:	1c5a      	adds	r2, r3, #1
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ade:	3b01      	subs	r3, #1
 8002ae0:	b29a      	uxth	r2, r3
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002aea:	b29b      	uxth	r3, r3
 8002aec:	3b01      	subs	r3, #1
 8002aee:	b29a      	uxth	r2, r3
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d1aa      	bne.n	8002a52 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002afc:	697a      	ldr	r2, [r7, #20]
 8002afe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002b00:	68f8      	ldr	r0, [r7, #12]
 8002b02:	f000 fe7d 	bl	8003800 <I2C_WaitOnBTFFlagUntilTimeout>
 8002b06:	4603      	mov	r3, r0
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d00d      	beq.n	8002b28 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b10:	2b04      	cmp	r3, #4
 8002b12:	d107      	bne.n	8002b24 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	681a      	ldr	r2, [r3, #0]
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b22:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002b24:	2301      	movs	r3, #1
 8002b26:	e016      	b.n	8002b56 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b36:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	2220      	movs	r2, #32
 8002b3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	2200      	movs	r2, #0
 8002b44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002b50:	2300      	movs	r3, #0
 8002b52:	e000      	b.n	8002b56 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002b54:	2302      	movs	r3, #2
  }
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	3718      	adds	r7, #24
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	bf00      	nop
 8002b60:	00100002 	.word	0x00100002
 8002b64:	ffff0000 	.word	0xffff0000

08002b68 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b08c      	sub	sp, #48	@ 0x30
 8002b6c:	af02      	add	r7, sp, #8
 8002b6e:	60f8      	str	r0, [r7, #12]
 8002b70:	4608      	mov	r0, r1
 8002b72:	4611      	mov	r1, r2
 8002b74:	461a      	mov	r2, r3
 8002b76:	4603      	mov	r3, r0
 8002b78:	817b      	strh	r3, [r7, #10]
 8002b7a:	460b      	mov	r3, r1
 8002b7c:	813b      	strh	r3, [r7, #8]
 8002b7e:	4613      	mov	r3, r2
 8002b80:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002b82:	f7ff fa41 	bl	8002008 <HAL_GetTick>
 8002b86:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b8e:	b2db      	uxtb	r3, r3
 8002b90:	2b20      	cmp	r3, #32
 8002b92:	f040 8214 	bne.w	8002fbe <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002b96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b98:	9300      	str	r3, [sp, #0]
 8002b9a:	2319      	movs	r3, #25
 8002b9c:	2201      	movs	r2, #1
 8002b9e:	497b      	ldr	r1, [pc, #492]	@ (8002d8c <HAL_I2C_Mem_Read+0x224>)
 8002ba0:	68f8      	ldr	r0, [r7, #12]
 8002ba2:	f000 fccb 	bl	800353c <I2C_WaitOnFlagUntilTimeout>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d001      	beq.n	8002bb0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002bac:	2302      	movs	r3, #2
 8002bae:	e207      	b.n	8002fc0 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002bb6:	2b01      	cmp	r3, #1
 8002bb8:	d101      	bne.n	8002bbe <HAL_I2C_Mem_Read+0x56>
 8002bba:	2302      	movs	r3, #2
 8002bbc:	e200      	b.n	8002fc0 <HAL_I2C_Mem_Read+0x458>
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f003 0301 	and.w	r3, r3, #1
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d007      	beq.n	8002be4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	681a      	ldr	r2, [r3, #0]
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f042 0201 	orr.w	r2, r2, #1
 8002be2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	681a      	ldr	r2, [r3, #0]
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002bf2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	2222      	movs	r2, #34	@ 0x22
 8002bf8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	2240      	movs	r2, #64	@ 0x40
 8002c00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	2200      	movs	r2, #0
 8002c08:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002c0e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002c14:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c1a:	b29a      	uxth	r2, r3
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	4a5b      	ldr	r2, [pc, #364]	@ (8002d90 <HAL_I2C_Mem_Read+0x228>)
 8002c24:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002c26:	88f8      	ldrh	r0, [r7, #6]
 8002c28:	893a      	ldrh	r2, [r7, #8]
 8002c2a:	8979      	ldrh	r1, [r7, #10]
 8002c2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c2e:	9301      	str	r3, [sp, #4]
 8002c30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c32:	9300      	str	r3, [sp, #0]
 8002c34:	4603      	mov	r3, r0
 8002c36:	68f8      	ldr	r0, [r7, #12]
 8002c38:	f000 fb98 	bl	800336c <I2C_RequestMemoryRead>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d001      	beq.n	8002c46 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	e1bc      	b.n	8002fc0 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d113      	bne.n	8002c76 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c4e:	2300      	movs	r3, #0
 8002c50:	623b      	str	r3, [r7, #32]
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	695b      	ldr	r3, [r3, #20]
 8002c58:	623b      	str	r3, [r7, #32]
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	699b      	ldr	r3, [r3, #24]
 8002c60:	623b      	str	r3, [r7, #32]
 8002c62:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c72:	601a      	str	r2, [r3, #0]
 8002c74:	e190      	b.n	8002f98 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c7a:	2b01      	cmp	r3, #1
 8002c7c:	d11b      	bne.n	8002cb6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	681a      	ldr	r2, [r3, #0]
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c8c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c8e:	2300      	movs	r3, #0
 8002c90:	61fb      	str	r3, [r7, #28]
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	695b      	ldr	r3, [r3, #20]
 8002c98:	61fb      	str	r3, [r7, #28]
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	699b      	ldr	r3, [r3, #24]
 8002ca0:	61fb      	str	r3, [r7, #28]
 8002ca2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	681a      	ldr	r2, [r3, #0]
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002cb2:	601a      	str	r2, [r3, #0]
 8002cb4:	e170      	b.n	8002f98 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cba:	2b02      	cmp	r3, #2
 8002cbc:	d11b      	bne.n	8002cf6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	681a      	ldr	r2, [r3, #0]
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ccc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	681a      	ldr	r2, [r3, #0]
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002cdc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cde:	2300      	movs	r3, #0
 8002ce0:	61bb      	str	r3, [r7, #24]
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	695b      	ldr	r3, [r3, #20]
 8002ce8:	61bb      	str	r3, [r7, #24]
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	699b      	ldr	r3, [r3, #24]
 8002cf0:	61bb      	str	r3, [r7, #24]
 8002cf2:	69bb      	ldr	r3, [r7, #24]
 8002cf4:	e150      	b.n	8002f98 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	617b      	str	r3, [r7, #20]
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	695b      	ldr	r3, [r3, #20]
 8002d00:	617b      	str	r3, [r7, #20]
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	699b      	ldr	r3, [r3, #24]
 8002d08:	617b      	str	r3, [r7, #20]
 8002d0a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002d0c:	e144      	b.n	8002f98 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d12:	2b03      	cmp	r3, #3
 8002d14:	f200 80f1 	bhi.w	8002efa <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d1c:	2b01      	cmp	r3, #1
 8002d1e:	d123      	bne.n	8002d68 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d20:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d22:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002d24:	68f8      	ldr	r0, [r7, #12]
 8002d26:	f000 fdb3 	bl	8003890 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d001      	beq.n	8002d34 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002d30:	2301      	movs	r3, #1
 8002d32:	e145      	b.n	8002fc0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	691a      	ldr	r2, [r3, #16]
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d3e:	b2d2      	uxtb	r2, r2
 8002d40:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d46:	1c5a      	adds	r2, r3, #1
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d50:	3b01      	subs	r3, #1
 8002d52:	b29a      	uxth	r2, r3
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d5c:	b29b      	uxth	r3, r3
 8002d5e:	3b01      	subs	r3, #1
 8002d60:	b29a      	uxth	r2, r3
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002d66:	e117      	b.n	8002f98 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d6c:	2b02      	cmp	r3, #2
 8002d6e:	d14e      	bne.n	8002e0e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002d70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d72:	9300      	str	r3, [sp, #0]
 8002d74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d76:	2200      	movs	r2, #0
 8002d78:	4906      	ldr	r1, [pc, #24]	@ (8002d94 <HAL_I2C_Mem_Read+0x22c>)
 8002d7a:	68f8      	ldr	r0, [r7, #12]
 8002d7c:	f000 fbde 	bl	800353c <I2C_WaitOnFlagUntilTimeout>
 8002d80:	4603      	mov	r3, r0
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d008      	beq.n	8002d98 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002d86:	2301      	movs	r3, #1
 8002d88:	e11a      	b.n	8002fc0 <HAL_I2C_Mem_Read+0x458>
 8002d8a:	bf00      	nop
 8002d8c:	00100002 	.word	0x00100002
 8002d90:	ffff0000 	.word	0xffff0000
 8002d94:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	681a      	ldr	r2, [r3, #0]
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002da6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	691a      	ldr	r2, [r3, #16]
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002db2:	b2d2      	uxtb	r2, r2
 8002db4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dba:	1c5a      	adds	r2, r3, #1
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dc4:	3b01      	subs	r3, #1
 8002dc6:	b29a      	uxth	r2, r3
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dd0:	b29b      	uxth	r3, r3
 8002dd2:	3b01      	subs	r3, #1
 8002dd4:	b29a      	uxth	r2, r3
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	691a      	ldr	r2, [r3, #16]
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002de4:	b2d2      	uxtb	r2, r2
 8002de6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dec:	1c5a      	adds	r2, r3, #1
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002df6:	3b01      	subs	r3, #1
 8002df8:	b29a      	uxth	r2, r3
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e02:	b29b      	uxth	r3, r3
 8002e04:	3b01      	subs	r3, #1
 8002e06:	b29a      	uxth	r2, r3
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002e0c:	e0c4      	b.n	8002f98 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002e0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e10:	9300      	str	r3, [sp, #0]
 8002e12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e14:	2200      	movs	r2, #0
 8002e16:	496c      	ldr	r1, [pc, #432]	@ (8002fc8 <HAL_I2C_Mem_Read+0x460>)
 8002e18:	68f8      	ldr	r0, [r7, #12]
 8002e1a:	f000 fb8f 	bl	800353c <I2C_WaitOnFlagUntilTimeout>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d001      	beq.n	8002e28 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002e24:	2301      	movs	r3, #1
 8002e26:	e0cb      	b.n	8002fc0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	681a      	ldr	r2, [r3, #0]
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e36:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	691a      	ldr	r2, [r3, #16]
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e42:	b2d2      	uxtb	r2, r2
 8002e44:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e4a:	1c5a      	adds	r2, r3, #1
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e54:	3b01      	subs	r3, #1
 8002e56:	b29a      	uxth	r2, r3
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e60:	b29b      	uxth	r3, r3
 8002e62:	3b01      	subs	r3, #1
 8002e64:	b29a      	uxth	r2, r3
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002e6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e6c:	9300      	str	r3, [sp, #0]
 8002e6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e70:	2200      	movs	r2, #0
 8002e72:	4955      	ldr	r1, [pc, #340]	@ (8002fc8 <HAL_I2C_Mem_Read+0x460>)
 8002e74:	68f8      	ldr	r0, [r7, #12]
 8002e76:	f000 fb61 	bl	800353c <I2C_WaitOnFlagUntilTimeout>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d001      	beq.n	8002e84 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002e80:	2301      	movs	r3, #1
 8002e82:	e09d      	b.n	8002fc0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	681a      	ldr	r2, [r3, #0]
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e92:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	691a      	ldr	r2, [r3, #16]
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e9e:	b2d2      	uxtb	r2, r2
 8002ea0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ea6:	1c5a      	adds	r2, r3, #1
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002eb0:	3b01      	subs	r3, #1
 8002eb2:	b29a      	uxth	r2, r3
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ebc:	b29b      	uxth	r3, r3
 8002ebe:	3b01      	subs	r3, #1
 8002ec0:	b29a      	uxth	r2, r3
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	691a      	ldr	r2, [r3, #16]
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ed0:	b2d2      	uxtb	r2, r2
 8002ed2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ed8:	1c5a      	adds	r2, r3, #1
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ee2:	3b01      	subs	r3, #1
 8002ee4:	b29a      	uxth	r2, r3
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002eee:	b29b      	uxth	r3, r3
 8002ef0:	3b01      	subs	r3, #1
 8002ef2:	b29a      	uxth	r2, r3
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002ef8:	e04e      	b.n	8002f98 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002efa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002efc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002efe:	68f8      	ldr	r0, [r7, #12]
 8002f00:	f000 fcc6 	bl	8003890 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002f04:	4603      	mov	r3, r0
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d001      	beq.n	8002f0e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e058      	b.n	8002fc0 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	691a      	ldr	r2, [r3, #16]
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f18:	b2d2      	uxtb	r2, r2
 8002f1a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f20:	1c5a      	adds	r2, r3, #1
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f2a:	3b01      	subs	r3, #1
 8002f2c:	b29a      	uxth	r2, r3
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f36:	b29b      	uxth	r3, r3
 8002f38:	3b01      	subs	r3, #1
 8002f3a:	b29a      	uxth	r2, r3
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	695b      	ldr	r3, [r3, #20]
 8002f46:	f003 0304 	and.w	r3, r3, #4
 8002f4a:	2b04      	cmp	r3, #4
 8002f4c:	d124      	bne.n	8002f98 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f52:	2b03      	cmp	r3, #3
 8002f54:	d107      	bne.n	8002f66 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	681a      	ldr	r2, [r3, #0]
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f64:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	691a      	ldr	r2, [r3, #16]
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f70:	b2d2      	uxtb	r2, r2
 8002f72:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f78:	1c5a      	adds	r2, r3, #1
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f82:	3b01      	subs	r3, #1
 8002f84:	b29a      	uxth	r2, r3
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f8e:	b29b      	uxth	r3, r3
 8002f90:	3b01      	subs	r3, #1
 8002f92:	b29a      	uxth	r2, r3
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	f47f aeb6 	bne.w	8002d0e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	2220      	movs	r2, #32
 8002fa6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	2200      	movs	r2, #0
 8002fae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	e000      	b.n	8002fc0 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8002fbe:	2302      	movs	r3, #2
  }
}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	3728      	adds	r7, #40	@ 0x28
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}
 8002fc8:	00010004 	.word	0x00010004

08002fcc <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b08a      	sub	sp, #40	@ 0x28
 8002fd0:	af02      	add	r7, sp, #8
 8002fd2:	60f8      	str	r0, [r7, #12]
 8002fd4:	607a      	str	r2, [r7, #4]
 8002fd6:	603b      	str	r3, [r7, #0]
 8002fd8:	460b      	mov	r3, r1
 8002fda:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002fdc:	f7ff f814 	bl	8002008 <HAL_GetTick>
 8002fe0:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002fec:	b2db      	uxtb	r3, r3
 8002fee:	2b20      	cmp	r3, #32
 8002ff0:	f040 8111 	bne.w	8003216 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ff4:	69fb      	ldr	r3, [r7, #28]
 8002ff6:	9300      	str	r3, [sp, #0]
 8002ff8:	2319      	movs	r3, #25
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	4988      	ldr	r1, [pc, #544]	@ (8003220 <HAL_I2C_IsDeviceReady+0x254>)
 8002ffe:	68f8      	ldr	r0, [r7, #12]
 8003000:	f000 fa9c 	bl	800353c <I2C_WaitOnFlagUntilTimeout>
 8003004:	4603      	mov	r3, r0
 8003006:	2b00      	cmp	r3, #0
 8003008:	d001      	beq.n	800300e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800300a:	2302      	movs	r3, #2
 800300c:	e104      	b.n	8003218 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003014:	2b01      	cmp	r3, #1
 8003016:	d101      	bne.n	800301c <HAL_I2C_IsDeviceReady+0x50>
 8003018:	2302      	movs	r3, #2
 800301a:	e0fd      	b.n	8003218 <HAL_I2C_IsDeviceReady+0x24c>
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	2201      	movs	r2, #1
 8003020:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f003 0301 	and.w	r3, r3, #1
 800302e:	2b01      	cmp	r3, #1
 8003030:	d007      	beq.n	8003042 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	681a      	ldr	r2, [r3, #0]
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f042 0201 	orr.w	r2, r2, #1
 8003040:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	681a      	ldr	r2, [r3, #0]
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003050:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	2224      	movs	r2, #36	@ 0x24
 8003056:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2200      	movs	r2, #0
 800305e:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	4a70      	ldr	r2, [pc, #448]	@ (8003224 <HAL_I2C_IsDeviceReady+0x258>)
 8003064:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	681a      	ldr	r2, [r3, #0]
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003074:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003076:	69fb      	ldr	r3, [r7, #28]
 8003078:	9300      	str	r3, [sp, #0]
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	2200      	movs	r2, #0
 800307e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003082:	68f8      	ldr	r0, [r7, #12]
 8003084:	f000 fa5a 	bl	800353c <I2C_WaitOnFlagUntilTimeout>
 8003088:	4603      	mov	r3, r0
 800308a:	2b00      	cmp	r3, #0
 800308c:	d00d      	beq.n	80030aa <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003098:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800309c:	d103      	bne.n	80030a6 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80030a4:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 80030a6:	2303      	movs	r3, #3
 80030a8:	e0b6      	b.n	8003218 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80030aa:	897b      	ldrh	r3, [r7, #10]
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	461a      	mov	r2, r3
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80030b8:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80030ba:	f7fe ffa5 	bl	8002008 <HAL_GetTick>
 80030be:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	695b      	ldr	r3, [r3, #20]
 80030c6:	f003 0302 	and.w	r3, r3, #2
 80030ca:	2b02      	cmp	r3, #2
 80030cc:	bf0c      	ite	eq
 80030ce:	2301      	moveq	r3, #1
 80030d0:	2300      	movne	r3, #0
 80030d2:	b2db      	uxtb	r3, r3
 80030d4:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	695b      	ldr	r3, [r3, #20]
 80030dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80030e4:	bf0c      	ite	eq
 80030e6:	2301      	moveq	r3, #1
 80030e8:	2300      	movne	r3, #0
 80030ea:	b2db      	uxtb	r3, r3
 80030ec:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80030ee:	e025      	b.n	800313c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80030f0:	f7fe ff8a 	bl	8002008 <HAL_GetTick>
 80030f4:	4602      	mov	r2, r0
 80030f6:	69fb      	ldr	r3, [r7, #28]
 80030f8:	1ad3      	subs	r3, r2, r3
 80030fa:	683a      	ldr	r2, [r7, #0]
 80030fc:	429a      	cmp	r2, r3
 80030fe:	d302      	bcc.n	8003106 <HAL_I2C_IsDeviceReady+0x13a>
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d103      	bne.n	800310e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	22a0      	movs	r2, #160	@ 0xa0
 800310a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	695b      	ldr	r3, [r3, #20]
 8003114:	f003 0302 	and.w	r3, r3, #2
 8003118:	2b02      	cmp	r3, #2
 800311a:	bf0c      	ite	eq
 800311c:	2301      	moveq	r3, #1
 800311e:	2300      	movne	r3, #0
 8003120:	b2db      	uxtb	r3, r3
 8003122:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	695b      	ldr	r3, [r3, #20]
 800312a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800312e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003132:	bf0c      	ite	eq
 8003134:	2301      	moveq	r3, #1
 8003136:	2300      	movne	r3, #0
 8003138:	b2db      	uxtb	r3, r3
 800313a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003142:	b2db      	uxtb	r3, r3
 8003144:	2ba0      	cmp	r3, #160	@ 0xa0
 8003146:	d005      	beq.n	8003154 <HAL_I2C_IsDeviceReady+0x188>
 8003148:	7dfb      	ldrb	r3, [r7, #23]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d102      	bne.n	8003154 <HAL_I2C_IsDeviceReady+0x188>
 800314e:	7dbb      	ldrb	r3, [r7, #22]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d0cd      	beq.n	80030f0 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	2220      	movs	r2, #32
 8003158:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	695b      	ldr	r3, [r3, #20]
 8003162:	f003 0302 	and.w	r3, r3, #2
 8003166:	2b02      	cmp	r3, #2
 8003168:	d129      	bne.n	80031be <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	681a      	ldr	r2, [r3, #0]
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003178:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800317a:	2300      	movs	r3, #0
 800317c:	613b      	str	r3, [r7, #16]
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	695b      	ldr	r3, [r3, #20]
 8003184:	613b      	str	r3, [r7, #16]
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	699b      	ldr	r3, [r3, #24]
 800318c:	613b      	str	r3, [r7, #16]
 800318e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003190:	69fb      	ldr	r3, [r7, #28]
 8003192:	9300      	str	r3, [sp, #0]
 8003194:	2319      	movs	r3, #25
 8003196:	2201      	movs	r2, #1
 8003198:	4921      	ldr	r1, [pc, #132]	@ (8003220 <HAL_I2C_IsDeviceReady+0x254>)
 800319a:	68f8      	ldr	r0, [r7, #12]
 800319c:	f000 f9ce 	bl	800353c <I2C_WaitOnFlagUntilTimeout>
 80031a0:	4603      	mov	r3, r0
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d001      	beq.n	80031aa <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	e036      	b.n	8003218 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	2220      	movs	r2, #32
 80031ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	2200      	movs	r2, #0
 80031b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 80031ba:	2300      	movs	r3, #0
 80031bc:	e02c      	b.n	8003218 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	681a      	ldr	r2, [r3, #0]
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80031cc:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80031d6:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80031d8:	69fb      	ldr	r3, [r7, #28]
 80031da:	9300      	str	r3, [sp, #0]
 80031dc:	2319      	movs	r3, #25
 80031de:	2201      	movs	r2, #1
 80031e0:	490f      	ldr	r1, [pc, #60]	@ (8003220 <HAL_I2C_IsDeviceReady+0x254>)
 80031e2:	68f8      	ldr	r0, [r7, #12]
 80031e4:	f000 f9aa 	bl	800353c <I2C_WaitOnFlagUntilTimeout>
 80031e8:	4603      	mov	r3, r0
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d001      	beq.n	80031f2 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	e012      	b.n	8003218 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80031f2:	69bb      	ldr	r3, [r7, #24]
 80031f4:	3301      	adds	r3, #1
 80031f6:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80031f8:	69ba      	ldr	r2, [r7, #24]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	429a      	cmp	r2, r3
 80031fe:	f4ff af32 	bcc.w	8003066 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2220      	movs	r2, #32
 8003206:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	2200      	movs	r2, #0
 800320e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	e000      	b.n	8003218 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003216:	2302      	movs	r3, #2
  }
}
 8003218:	4618      	mov	r0, r3
 800321a:	3720      	adds	r7, #32
 800321c:	46bd      	mov	sp, r7
 800321e:	bd80      	pop	{r7, pc}
 8003220:	00100002 	.word	0x00100002
 8003224:	ffff0000 	.word	0xffff0000

08003228 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8003228:	b480      	push	{r7}
 800322a:	b083      	sub	sp, #12
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8003234:	4618      	mov	r0, r3
 8003236:	370c      	adds	r7, #12
 8003238:	46bd      	mov	sp, r7
 800323a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323e:	4770      	bx	lr

08003240 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b088      	sub	sp, #32
 8003244:	af02      	add	r7, sp, #8
 8003246:	60f8      	str	r0, [r7, #12]
 8003248:	4608      	mov	r0, r1
 800324a:	4611      	mov	r1, r2
 800324c:	461a      	mov	r2, r3
 800324e:	4603      	mov	r3, r0
 8003250:	817b      	strh	r3, [r7, #10]
 8003252:	460b      	mov	r3, r1
 8003254:	813b      	strh	r3, [r7, #8]
 8003256:	4613      	mov	r3, r2
 8003258:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	681a      	ldr	r2, [r3, #0]
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003268:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800326a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800326c:	9300      	str	r3, [sp, #0]
 800326e:	6a3b      	ldr	r3, [r7, #32]
 8003270:	2200      	movs	r2, #0
 8003272:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003276:	68f8      	ldr	r0, [r7, #12]
 8003278:	f000 f960 	bl	800353c <I2C_WaitOnFlagUntilTimeout>
 800327c:	4603      	mov	r3, r0
 800327e:	2b00      	cmp	r3, #0
 8003280:	d00d      	beq.n	800329e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800328c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003290:	d103      	bne.n	800329a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003298:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800329a:	2303      	movs	r3, #3
 800329c:	e05f      	b.n	800335e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800329e:	897b      	ldrh	r3, [r7, #10]
 80032a0:	b2db      	uxtb	r3, r3
 80032a2:	461a      	mov	r2, r3
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80032ac:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80032ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032b0:	6a3a      	ldr	r2, [r7, #32]
 80032b2:	492d      	ldr	r1, [pc, #180]	@ (8003368 <I2C_RequestMemoryWrite+0x128>)
 80032b4:	68f8      	ldr	r0, [r7, #12]
 80032b6:	f000 f9bb 	bl	8003630 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80032ba:	4603      	mov	r3, r0
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d001      	beq.n	80032c4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80032c0:	2301      	movs	r3, #1
 80032c2:	e04c      	b.n	800335e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032c4:	2300      	movs	r3, #0
 80032c6:	617b      	str	r3, [r7, #20]
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	695b      	ldr	r3, [r3, #20]
 80032ce:	617b      	str	r3, [r7, #20]
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	699b      	ldr	r3, [r3, #24]
 80032d6:	617b      	str	r3, [r7, #20]
 80032d8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80032da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80032dc:	6a39      	ldr	r1, [r7, #32]
 80032de:	68f8      	ldr	r0, [r7, #12]
 80032e0:	f000 fa46 	bl	8003770 <I2C_WaitOnTXEFlagUntilTimeout>
 80032e4:	4603      	mov	r3, r0
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d00d      	beq.n	8003306 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032ee:	2b04      	cmp	r3, #4
 80032f0:	d107      	bne.n	8003302 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	681a      	ldr	r2, [r3, #0]
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003300:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	e02b      	b.n	800335e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003306:	88fb      	ldrh	r3, [r7, #6]
 8003308:	2b01      	cmp	r3, #1
 800330a:	d105      	bne.n	8003318 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800330c:	893b      	ldrh	r3, [r7, #8]
 800330e:	b2da      	uxtb	r2, r3
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	611a      	str	r2, [r3, #16]
 8003316:	e021      	b.n	800335c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003318:	893b      	ldrh	r3, [r7, #8]
 800331a:	0a1b      	lsrs	r3, r3, #8
 800331c:	b29b      	uxth	r3, r3
 800331e:	b2da      	uxtb	r2, r3
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003326:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003328:	6a39      	ldr	r1, [r7, #32]
 800332a:	68f8      	ldr	r0, [r7, #12]
 800332c:	f000 fa20 	bl	8003770 <I2C_WaitOnTXEFlagUntilTimeout>
 8003330:	4603      	mov	r3, r0
 8003332:	2b00      	cmp	r3, #0
 8003334:	d00d      	beq.n	8003352 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800333a:	2b04      	cmp	r3, #4
 800333c:	d107      	bne.n	800334e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	681a      	ldr	r2, [r3, #0]
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800334c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	e005      	b.n	800335e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003352:	893b      	ldrh	r3, [r7, #8]
 8003354:	b2da      	uxtb	r2, r3
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800335c:	2300      	movs	r3, #0
}
 800335e:	4618      	mov	r0, r3
 8003360:	3718      	adds	r7, #24
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}
 8003366:	bf00      	nop
 8003368:	00010002 	.word	0x00010002

0800336c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b088      	sub	sp, #32
 8003370:	af02      	add	r7, sp, #8
 8003372:	60f8      	str	r0, [r7, #12]
 8003374:	4608      	mov	r0, r1
 8003376:	4611      	mov	r1, r2
 8003378:	461a      	mov	r2, r3
 800337a:	4603      	mov	r3, r0
 800337c:	817b      	strh	r3, [r7, #10]
 800337e:	460b      	mov	r3, r1
 8003380:	813b      	strh	r3, [r7, #8]
 8003382:	4613      	mov	r3, r2
 8003384:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	681a      	ldr	r2, [r3, #0]
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003394:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80033a4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80033a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033a8:	9300      	str	r3, [sp, #0]
 80033aa:	6a3b      	ldr	r3, [r7, #32]
 80033ac:	2200      	movs	r2, #0
 80033ae:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80033b2:	68f8      	ldr	r0, [r7, #12]
 80033b4:	f000 f8c2 	bl	800353c <I2C_WaitOnFlagUntilTimeout>
 80033b8:	4603      	mov	r3, r0
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d00d      	beq.n	80033da <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033c8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80033cc:	d103      	bne.n	80033d6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80033d4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80033d6:	2303      	movs	r3, #3
 80033d8:	e0aa      	b.n	8003530 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80033da:	897b      	ldrh	r3, [r7, #10]
 80033dc:	b2db      	uxtb	r3, r3
 80033de:	461a      	mov	r2, r3
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80033e8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80033ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033ec:	6a3a      	ldr	r2, [r7, #32]
 80033ee:	4952      	ldr	r1, [pc, #328]	@ (8003538 <I2C_RequestMemoryRead+0x1cc>)
 80033f0:	68f8      	ldr	r0, [r7, #12]
 80033f2:	f000 f91d 	bl	8003630 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80033f6:	4603      	mov	r3, r0
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d001      	beq.n	8003400 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80033fc:	2301      	movs	r3, #1
 80033fe:	e097      	b.n	8003530 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003400:	2300      	movs	r3, #0
 8003402:	617b      	str	r3, [r7, #20]
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	695b      	ldr	r3, [r3, #20]
 800340a:	617b      	str	r3, [r7, #20]
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	699b      	ldr	r3, [r3, #24]
 8003412:	617b      	str	r3, [r7, #20]
 8003414:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003416:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003418:	6a39      	ldr	r1, [r7, #32]
 800341a:	68f8      	ldr	r0, [r7, #12]
 800341c:	f000 f9a8 	bl	8003770 <I2C_WaitOnTXEFlagUntilTimeout>
 8003420:	4603      	mov	r3, r0
 8003422:	2b00      	cmp	r3, #0
 8003424:	d00d      	beq.n	8003442 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800342a:	2b04      	cmp	r3, #4
 800342c:	d107      	bne.n	800343e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	681a      	ldr	r2, [r3, #0]
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800343c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	e076      	b.n	8003530 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003442:	88fb      	ldrh	r3, [r7, #6]
 8003444:	2b01      	cmp	r3, #1
 8003446:	d105      	bne.n	8003454 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003448:	893b      	ldrh	r3, [r7, #8]
 800344a:	b2da      	uxtb	r2, r3
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	611a      	str	r2, [r3, #16]
 8003452:	e021      	b.n	8003498 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003454:	893b      	ldrh	r3, [r7, #8]
 8003456:	0a1b      	lsrs	r3, r3, #8
 8003458:	b29b      	uxth	r3, r3
 800345a:	b2da      	uxtb	r2, r3
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003462:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003464:	6a39      	ldr	r1, [r7, #32]
 8003466:	68f8      	ldr	r0, [r7, #12]
 8003468:	f000 f982 	bl	8003770 <I2C_WaitOnTXEFlagUntilTimeout>
 800346c:	4603      	mov	r3, r0
 800346e:	2b00      	cmp	r3, #0
 8003470:	d00d      	beq.n	800348e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003476:	2b04      	cmp	r3, #4
 8003478:	d107      	bne.n	800348a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	681a      	ldr	r2, [r3, #0]
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003488:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	e050      	b.n	8003530 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800348e:	893b      	ldrh	r3, [r7, #8]
 8003490:	b2da      	uxtb	r2, r3
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003498:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800349a:	6a39      	ldr	r1, [r7, #32]
 800349c:	68f8      	ldr	r0, [r7, #12]
 800349e:	f000 f967 	bl	8003770 <I2C_WaitOnTXEFlagUntilTimeout>
 80034a2:	4603      	mov	r3, r0
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d00d      	beq.n	80034c4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034ac:	2b04      	cmp	r3, #4
 80034ae:	d107      	bne.n	80034c0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	681a      	ldr	r2, [r3, #0]
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80034be:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80034c0:	2301      	movs	r3, #1
 80034c2:	e035      	b.n	8003530 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80034d2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80034d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034d6:	9300      	str	r3, [sp, #0]
 80034d8:	6a3b      	ldr	r3, [r7, #32]
 80034da:	2200      	movs	r2, #0
 80034dc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80034e0:	68f8      	ldr	r0, [r7, #12]
 80034e2:	f000 f82b 	bl	800353c <I2C_WaitOnFlagUntilTimeout>
 80034e6:	4603      	mov	r3, r0
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d00d      	beq.n	8003508 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80034fa:	d103      	bne.n	8003504 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003502:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003504:	2303      	movs	r3, #3
 8003506:	e013      	b.n	8003530 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003508:	897b      	ldrh	r3, [r7, #10]
 800350a:	b2db      	uxtb	r3, r3
 800350c:	f043 0301 	orr.w	r3, r3, #1
 8003510:	b2da      	uxtb	r2, r3
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003518:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800351a:	6a3a      	ldr	r2, [r7, #32]
 800351c:	4906      	ldr	r1, [pc, #24]	@ (8003538 <I2C_RequestMemoryRead+0x1cc>)
 800351e:	68f8      	ldr	r0, [r7, #12]
 8003520:	f000 f886 	bl	8003630 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003524:	4603      	mov	r3, r0
 8003526:	2b00      	cmp	r3, #0
 8003528:	d001      	beq.n	800352e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	e000      	b.n	8003530 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800352e:	2300      	movs	r3, #0
}
 8003530:	4618      	mov	r0, r3
 8003532:	3718      	adds	r7, #24
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}
 8003538:	00010002 	.word	0x00010002

0800353c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b084      	sub	sp, #16
 8003540:	af00      	add	r7, sp, #0
 8003542:	60f8      	str	r0, [r7, #12]
 8003544:	60b9      	str	r1, [r7, #8]
 8003546:	603b      	str	r3, [r7, #0]
 8003548:	4613      	mov	r3, r2
 800354a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800354c:	e048      	b.n	80035e0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003554:	d044      	beq.n	80035e0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003556:	f7fe fd57 	bl	8002008 <HAL_GetTick>
 800355a:	4602      	mov	r2, r0
 800355c:	69bb      	ldr	r3, [r7, #24]
 800355e:	1ad3      	subs	r3, r2, r3
 8003560:	683a      	ldr	r2, [r7, #0]
 8003562:	429a      	cmp	r2, r3
 8003564:	d302      	bcc.n	800356c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d139      	bne.n	80035e0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800356c:	68bb      	ldr	r3, [r7, #8]
 800356e:	0c1b      	lsrs	r3, r3, #16
 8003570:	b2db      	uxtb	r3, r3
 8003572:	2b01      	cmp	r3, #1
 8003574:	d10d      	bne.n	8003592 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	695b      	ldr	r3, [r3, #20]
 800357c:	43da      	mvns	r2, r3
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	4013      	ands	r3, r2
 8003582:	b29b      	uxth	r3, r3
 8003584:	2b00      	cmp	r3, #0
 8003586:	bf0c      	ite	eq
 8003588:	2301      	moveq	r3, #1
 800358a:	2300      	movne	r3, #0
 800358c:	b2db      	uxtb	r3, r3
 800358e:	461a      	mov	r2, r3
 8003590:	e00c      	b.n	80035ac <I2C_WaitOnFlagUntilTimeout+0x70>
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	699b      	ldr	r3, [r3, #24]
 8003598:	43da      	mvns	r2, r3
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	4013      	ands	r3, r2
 800359e:	b29b      	uxth	r3, r3
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	bf0c      	ite	eq
 80035a4:	2301      	moveq	r3, #1
 80035a6:	2300      	movne	r3, #0
 80035a8:	b2db      	uxtb	r3, r3
 80035aa:	461a      	mov	r2, r3
 80035ac:	79fb      	ldrb	r3, [r7, #7]
 80035ae:	429a      	cmp	r2, r3
 80035b0:	d116      	bne.n	80035e0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2200      	movs	r2, #0
 80035b6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	2220      	movs	r2, #32
 80035bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	2200      	movs	r2, #0
 80035c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035cc:	f043 0220 	orr.w	r2, r3, #32
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	2200      	movs	r2, #0
 80035d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	e023      	b.n	8003628 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	0c1b      	lsrs	r3, r3, #16
 80035e4:	b2db      	uxtb	r3, r3
 80035e6:	2b01      	cmp	r3, #1
 80035e8:	d10d      	bne.n	8003606 <I2C_WaitOnFlagUntilTimeout+0xca>
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	695b      	ldr	r3, [r3, #20]
 80035f0:	43da      	mvns	r2, r3
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	4013      	ands	r3, r2
 80035f6:	b29b      	uxth	r3, r3
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	bf0c      	ite	eq
 80035fc:	2301      	moveq	r3, #1
 80035fe:	2300      	movne	r3, #0
 8003600:	b2db      	uxtb	r3, r3
 8003602:	461a      	mov	r2, r3
 8003604:	e00c      	b.n	8003620 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	699b      	ldr	r3, [r3, #24]
 800360c:	43da      	mvns	r2, r3
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	4013      	ands	r3, r2
 8003612:	b29b      	uxth	r3, r3
 8003614:	2b00      	cmp	r3, #0
 8003616:	bf0c      	ite	eq
 8003618:	2301      	moveq	r3, #1
 800361a:	2300      	movne	r3, #0
 800361c:	b2db      	uxtb	r3, r3
 800361e:	461a      	mov	r2, r3
 8003620:	79fb      	ldrb	r3, [r7, #7]
 8003622:	429a      	cmp	r2, r3
 8003624:	d093      	beq.n	800354e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003626:	2300      	movs	r3, #0
}
 8003628:	4618      	mov	r0, r3
 800362a:	3710      	adds	r7, #16
 800362c:	46bd      	mov	sp, r7
 800362e:	bd80      	pop	{r7, pc}

08003630 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b084      	sub	sp, #16
 8003634:	af00      	add	r7, sp, #0
 8003636:	60f8      	str	r0, [r7, #12]
 8003638:	60b9      	str	r1, [r7, #8]
 800363a:	607a      	str	r2, [r7, #4]
 800363c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800363e:	e071      	b.n	8003724 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	695b      	ldr	r3, [r3, #20]
 8003646:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800364a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800364e:	d123      	bne.n	8003698 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	681a      	ldr	r2, [r3, #0]
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800365e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003668:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	2200      	movs	r2, #0
 800366e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	2220      	movs	r2, #32
 8003674:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	2200      	movs	r2, #0
 800367c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003684:	f043 0204 	orr.w	r2, r3, #4
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	2200      	movs	r2, #0
 8003690:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003694:	2301      	movs	r3, #1
 8003696:	e067      	b.n	8003768 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800369e:	d041      	beq.n	8003724 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036a0:	f7fe fcb2 	bl	8002008 <HAL_GetTick>
 80036a4:	4602      	mov	r2, r0
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	1ad3      	subs	r3, r2, r3
 80036aa:	687a      	ldr	r2, [r7, #4]
 80036ac:	429a      	cmp	r2, r3
 80036ae:	d302      	bcc.n	80036b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d136      	bne.n	8003724 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	0c1b      	lsrs	r3, r3, #16
 80036ba:	b2db      	uxtb	r3, r3
 80036bc:	2b01      	cmp	r3, #1
 80036be:	d10c      	bne.n	80036da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	695b      	ldr	r3, [r3, #20]
 80036c6:	43da      	mvns	r2, r3
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	4013      	ands	r3, r2
 80036cc:	b29b      	uxth	r3, r3
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	bf14      	ite	ne
 80036d2:	2301      	movne	r3, #1
 80036d4:	2300      	moveq	r3, #0
 80036d6:	b2db      	uxtb	r3, r3
 80036d8:	e00b      	b.n	80036f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	699b      	ldr	r3, [r3, #24]
 80036e0:	43da      	mvns	r2, r3
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	4013      	ands	r3, r2
 80036e6:	b29b      	uxth	r3, r3
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	bf14      	ite	ne
 80036ec:	2301      	movne	r3, #1
 80036ee:	2300      	moveq	r3, #0
 80036f0:	b2db      	uxtb	r3, r3
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d016      	beq.n	8003724 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	2200      	movs	r2, #0
 80036fa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	2220      	movs	r2, #32
 8003700:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	2200      	movs	r2, #0
 8003708:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003710:	f043 0220 	orr.w	r2, r3, #32
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2200      	movs	r2, #0
 800371c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003720:	2301      	movs	r3, #1
 8003722:	e021      	b.n	8003768 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	0c1b      	lsrs	r3, r3, #16
 8003728:	b2db      	uxtb	r3, r3
 800372a:	2b01      	cmp	r3, #1
 800372c:	d10c      	bne.n	8003748 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	695b      	ldr	r3, [r3, #20]
 8003734:	43da      	mvns	r2, r3
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	4013      	ands	r3, r2
 800373a:	b29b      	uxth	r3, r3
 800373c:	2b00      	cmp	r3, #0
 800373e:	bf14      	ite	ne
 8003740:	2301      	movne	r3, #1
 8003742:	2300      	moveq	r3, #0
 8003744:	b2db      	uxtb	r3, r3
 8003746:	e00b      	b.n	8003760 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	699b      	ldr	r3, [r3, #24]
 800374e:	43da      	mvns	r2, r3
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	4013      	ands	r3, r2
 8003754:	b29b      	uxth	r3, r3
 8003756:	2b00      	cmp	r3, #0
 8003758:	bf14      	ite	ne
 800375a:	2301      	movne	r3, #1
 800375c:	2300      	moveq	r3, #0
 800375e:	b2db      	uxtb	r3, r3
 8003760:	2b00      	cmp	r3, #0
 8003762:	f47f af6d 	bne.w	8003640 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003766:	2300      	movs	r3, #0
}
 8003768:	4618      	mov	r0, r3
 800376a:	3710      	adds	r7, #16
 800376c:	46bd      	mov	sp, r7
 800376e:	bd80      	pop	{r7, pc}

08003770 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b084      	sub	sp, #16
 8003774:	af00      	add	r7, sp, #0
 8003776:	60f8      	str	r0, [r7, #12]
 8003778:	60b9      	str	r1, [r7, #8]
 800377a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800377c:	e034      	b.n	80037e8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800377e:	68f8      	ldr	r0, [r7, #12]
 8003780:	f000 f8e3 	bl	800394a <I2C_IsAcknowledgeFailed>
 8003784:	4603      	mov	r3, r0
 8003786:	2b00      	cmp	r3, #0
 8003788:	d001      	beq.n	800378e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	e034      	b.n	80037f8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003794:	d028      	beq.n	80037e8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003796:	f7fe fc37 	bl	8002008 <HAL_GetTick>
 800379a:	4602      	mov	r2, r0
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	1ad3      	subs	r3, r2, r3
 80037a0:	68ba      	ldr	r2, [r7, #8]
 80037a2:	429a      	cmp	r2, r3
 80037a4:	d302      	bcc.n	80037ac <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d11d      	bne.n	80037e8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	695b      	ldr	r3, [r3, #20]
 80037b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037b6:	2b80      	cmp	r3, #128	@ 0x80
 80037b8:	d016      	beq.n	80037e8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	2200      	movs	r2, #0
 80037be:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2220      	movs	r2, #32
 80037c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	2200      	movs	r2, #0
 80037cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037d4:	f043 0220 	orr.w	r2, r3, #32
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	2200      	movs	r2, #0
 80037e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80037e4:	2301      	movs	r3, #1
 80037e6:	e007      	b.n	80037f8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	695b      	ldr	r3, [r3, #20]
 80037ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037f2:	2b80      	cmp	r3, #128	@ 0x80
 80037f4:	d1c3      	bne.n	800377e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80037f6:	2300      	movs	r3, #0
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	3710      	adds	r7, #16
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bd80      	pop	{r7, pc}

08003800 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b084      	sub	sp, #16
 8003804:	af00      	add	r7, sp, #0
 8003806:	60f8      	str	r0, [r7, #12]
 8003808:	60b9      	str	r1, [r7, #8]
 800380a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800380c:	e034      	b.n	8003878 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800380e:	68f8      	ldr	r0, [r7, #12]
 8003810:	f000 f89b 	bl	800394a <I2C_IsAcknowledgeFailed>
 8003814:	4603      	mov	r3, r0
 8003816:	2b00      	cmp	r3, #0
 8003818:	d001      	beq.n	800381e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	e034      	b.n	8003888 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800381e:	68bb      	ldr	r3, [r7, #8]
 8003820:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003824:	d028      	beq.n	8003878 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003826:	f7fe fbef 	bl	8002008 <HAL_GetTick>
 800382a:	4602      	mov	r2, r0
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	1ad3      	subs	r3, r2, r3
 8003830:	68ba      	ldr	r2, [r7, #8]
 8003832:	429a      	cmp	r2, r3
 8003834:	d302      	bcc.n	800383c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d11d      	bne.n	8003878 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	695b      	ldr	r3, [r3, #20]
 8003842:	f003 0304 	and.w	r3, r3, #4
 8003846:	2b04      	cmp	r3, #4
 8003848:	d016      	beq.n	8003878 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	2200      	movs	r2, #0
 800384e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	2220      	movs	r2, #32
 8003854:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	2200      	movs	r2, #0
 800385c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003864:	f043 0220 	orr.w	r2, r3, #32
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	2200      	movs	r2, #0
 8003870:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003874:	2301      	movs	r3, #1
 8003876:	e007      	b.n	8003888 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	695b      	ldr	r3, [r3, #20]
 800387e:	f003 0304 	and.w	r3, r3, #4
 8003882:	2b04      	cmp	r3, #4
 8003884:	d1c3      	bne.n	800380e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003886:	2300      	movs	r3, #0
}
 8003888:	4618      	mov	r0, r3
 800388a:	3710      	adds	r7, #16
 800388c:	46bd      	mov	sp, r7
 800388e:	bd80      	pop	{r7, pc}

08003890 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b084      	sub	sp, #16
 8003894:	af00      	add	r7, sp, #0
 8003896:	60f8      	str	r0, [r7, #12]
 8003898:	60b9      	str	r1, [r7, #8]
 800389a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800389c:	e049      	b.n	8003932 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	695b      	ldr	r3, [r3, #20]
 80038a4:	f003 0310 	and.w	r3, r3, #16
 80038a8:	2b10      	cmp	r3, #16
 80038aa:	d119      	bne.n	80038e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f06f 0210 	mvn.w	r2, #16
 80038b4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	2200      	movs	r2, #0
 80038ba:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	2220      	movs	r2, #32
 80038c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	2200      	movs	r2, #0
 80038c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	2200      	movs	r2, #0
 80038d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80038dc:	2301      	movs	r3, #1
 80038de:	e030      	b.n	8003942 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038e0:	f7fe fb92 	bl	8002008 <HAL_GetTick>
 80038e4:	4602      	mov	r2, r0
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	1ad3      	subs	r3, r2, r3
 80038ea:	68ba      	ldr	r2, [r7, #8]
 80038ec:	429a      	cmp	r2, r3
 80038ee:	d302      	bcc.n	80038f6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d11d      	bne.n	8003932 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	695b      	ldr	r3, [r3, #20]
 80038fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003900:	2b40      	cmp	r3, #64	@ 0x40
 8003902:	d016      	beq.n	8003932 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	2200      	movs	r2, #0
 8003908:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	2220      	movs	r2, #32
 800390e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	2200      	movs	r2, #0
 8003916:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800391e:	f043 0220 	orr.w	r2, r3, #32
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2200      	movs	r2, #0
 800392a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	e007      	b.n	8003942 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	695b      	ldr	r3, [r3, #20]
 8003938:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800393c:	2b40      	cmp	r3, #64	@ 0x40
 800393e:	d1ae      	bne.n	800389e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003940:	2300      	movs	r3, #0
}
 8003942:	4618      	mov	r0, r3
 8003944:	3710      	adds	r7, #16
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}

0800394a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800394a:	b480      	push	{r7}
 800394c:	b083      	sub	sp, #12
 800394e:	af00      	add	r7, sp, #0
 8003950:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	695b      	ldr	r3, [r3, #20]
 8003958:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800395c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003960:	d11b      	bne.n	800399a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800396a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2200      	movs	r2, #0
 8003970:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2220      	movs	r2, #32
 8003976:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2200      	movs	r2, #0
 800397e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003986:	f043 0204 	orr.w	r2, r3, #4
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2200      	movs	r2, #0
 8003992:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	e000      	b.n	800399c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800399a:	2300      	movs	r3, #0
}
 800399c:	4618      	mov	r0, r3
 800399e:	370c      	adds	r7, #12
 80039a0:	46bd      	mov	sp, r7
 80039a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a6:	4770      	bx	lr

080039a8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b086      	sub	sp, #24
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d101      	bne.n	80039ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80039b6:	2301      	movs	r3, #1
 80039b8:	e267      	b.n	8003e8a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f003 0301 	and.w	r3, r3, #1
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d075      	beq.n	8003ab2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80039c6:	4b88      	ldr	r3, [pc, #544]	@ (8003be8 <HAL_RCC_OscConfig+0x240>)
 80039c8:	689b      	ldr	r3, [r3, #8]
 80039ca:	f003 030c 	and.w	r3, r3, #12
 80039ce:	2b04      	cmp	r3, #4
 80039d0:	d00c      	beq.n	80039ec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80039d2:	4b85      	ldr	r3, [pc, #532]	@ (8003be8 <HAL_RCC_OscConfig+0x240>)
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80039da:	2b08      	cmp	r3, #8
 80039dc:	d112      	bne.n	8003a04 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80039de:	4b82      	ldr	r3, [pc, #520]	@ (8003be8 <HAL_RCC_OscConfig+0x240>)
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80039e6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80039ea:	d10b      	bne.n	8003a04 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039ec:	4b7e      	ldr	r3, [pc, #504]	@ (8003be8 <HAL_RCC_OscConfig+0x240>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d05b      	beq.n	8003ab0 <HAL_RCC_OscConfig+0x108>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d157      	bne.n	8003ab0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003a00:	2301      	movs	r3, #1
 8003a02:	e242      	b.n	8003e8a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a0c:	d106      	bne.n	8003a1c <HAL_RCC_OscConfig+0x74>
 8003a0e:	4b76      	ldr	r3, [pc, #472]	@ (8003be8 <HAL_RCC_OscConfig+0x240>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a75      	ldr	r2, [pc, #468]	@ (8003be8 <HAL_RCC_OscConfig+0x240>)
 8003a14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a18:	6013      	str	r3, [r2, #0]
 8003a1a:	e01d      	b.n	8003a58 <HAL_RCC_OscConfig+0xb0>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003a24:	d10c      	bne.n	8003a40 <HAL_RCC_OscConfig+0x98>
 8003a26:	4b70      	ldr	r3, [pc, #448]	@ (8003be8 <HAL_RCC_OscConfig+0x240>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a6f      	ldr	r2, [pc, #444]	@ (8003be8 <HAL_RCC_OscConfig+0x240>)
 8003a2c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003a30:	6013      	str	r3, [r2, #0]
 8003a32:	4b6d      	ldr	r3, [pc, #436]	@ (8003be8 <HAL_RCC_OscConfig+0x240>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a6c      	ldr	r2, [pc, #432]	@ (8003be8 <HAL_RCC_OscConfig+0x240>)
 8003a38:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a3c:	6013      	str	r3, [r2, #0]
 8003a3e:	e00b      	b.n	8003a58 <HAL_RCC_OscConfig+0xb0>
 8003a40:	4b69      	ldr	r3, [pc, #420]	@ (8003be8 <HAL_RCC_OscConfig+0x240>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a68      	ldr	r2, [pc, #416]	@ (8003be8 <HAL_RCC_OscConfig+0x240>)
 8003a46:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a4a:	6013      	str	r3, [r2, #0]
 8003a4c:	4b66      	ldr	r3, [pc, #408]	@ (8003be8 <HAL_RCC_OscConfig+0x240>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a65      	ldr	r2, [pc, #404]	@ (8003be8 <HAL_RCC_OscConfig+0x240>)
 8003a52:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003a56:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d013      	beq.n	8003a88 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a60:	f7fe fad2 	bl	8002008 <HAL_GetTick>
 8003a64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a66:	e008      	b.n	8003a7a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a68:	f7fe face 	bl	8002008 <HAL_GetTick>
 8003a6c:	4602      	mov	r2, r0
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	1ad3      	subs	r3, r2, r3
 8003a72:	2b64      	cmp	r3, #100	@ 0x64
 8003a74:	d901      	bls.n	8003a7a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003a76:	2303      	movs	r3, #3
 8003a78:	e207      	b.n	8003e8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a7a:	4b5b      	ldr	r3, [pc, #364]	@ (8003be8 <HAL_RCC_OscConfig+0x240>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d0f0      	beq.n	8003a68 <HAL_RCC_OscConfig+0xc0>
 8003a86:	e014      	b.n	8003ab2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a88:	f7fe fabe 	bl	8002008 <HAL_GetTick>
 8003a8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a8e:	e008      	b.n	8003aa2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a90:	f7fe faba 	bl	8002008 <HAL_GetTick>
 8003a94:	4602      	mov	r2, r0
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	1ad3      	subs	r3, r2, r3
 8003a9a:	2b64      	cmp	r3, #100	@ 0x64
 8003a9c:	d901      	bls.n	8003aa2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003a9e:	2303      	movs	r3, #3
 8003aa0:	e1f3      	b.n	8003e8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003aa2:	4b51      	ldr	r3, [pc, #324]	@ (8003be8 <HAL_RCC_OscConfig+0x240>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d1f0      	bne.n	8003a90 <HAL_RCC_OscConfig+0xe8>
 8003aae:	e000      	b.n	8003ab2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ab0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f003 0302 	and.w	r3, r3, #2
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d063      	beq.n	8003b86 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003abe:	4b4a      	ldr	r3, [pc, #296]	@ (8003be8 <HAL_RCC_OscConfig+0x240>)
 8003ac0:	689b      	ldr	r3, [r3, #8]
 8003ac2:	f003 030c 	and.w	r3, r3, #12
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d00b      	beq.n	8003ae2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003aca:	4b47      	ldr	r3, [pc, #284]	@ (8003be8 <HAL_RCC_OscConfig+0x240>)
 8003acc:	689b      	ldr	r3, [r3, #8]
 8003ace:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003ad2:	2b08      	cmp	r3, #8
 8003ad4:	d11c      	bne.n	8003b10 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ad6:	4b44      	ldr	r3, [pc, #272]	@ (8003be8 <HAL_RCC_OscConfig+0x240>)
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d116      	bne.n	8003b10 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ae2:	4b41      	ldr	r3, [pc, #260]	@ (8003be8 <HAL_RCC_OscConfig+0x240>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f003 0302 	and.w	r3, r3, #2
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d005      	beq.n	8003afa <HAL_RCC_OscConfig+0x152>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	68db      	ldr	r3, [r3, #12]
 8003af2:	2b01      	cmp	r3, #1
 8003af4:	d001      	beq.n	8003afa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003af6:	2301      	movs	r3, #1
 8003af8:	e1c7      	b.n	8003e8a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003afa:	4b3b      	ldr	r3, [pc, #236]	@ (8003be8 <HAL_RCC_OscConfig+0x240>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	691b      	ldr	r3, [r3, #16]
 8003b06:	00db      	lsls	r3, r3, #3
 8003b08:	4937      	ldr	r1, [pc, #220]	@ (8003be8 <HAL_RCC_OscConfig+0x240>)
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b0e:	e03a      	b.n	8003b86 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	68db      	ldr	r3, [r3, #12]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d020      	beq.n	8003b5a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b18:	4b34      	ldr	r3, [pc, #208]	@ (8003bec <HAL_RCC_OscConfig+0x244>)
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b1e:	f7fe fa73 	bl	8002008 <HAL_GetTick>
 8003b22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b24:	e008      	b.n	8003b38 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b26:	f7fe fa6f 	bl	8002008 <HAL_GetTick>
 8003b2a:	4602      	mov	r2, r0
 8003b2c:	693b      	ldr	r3, [r7, #16]
 8003b2e:	1ad3      	subs	r3, r2, r3
 8003b30:	2b02      	cmp	r3, #2
 8003b32:	d901      	bls.n	8003b38 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003b34:	2303      	movs	r3, #3
 8003b36:	e1a8      	b.n	8003e8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b38:	4b2b      	ldr	r3, [pc, #172]	@ (8003be8 <HAL_RCC_OscConfig+0x240>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f003 0302 	and.w	r3, r3, #2
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d0f0      	beq.n	8003b26 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b44:	4b28      	ldr	r3, [pc, #160]	@ (8003be8 <HAL_RCC_OscConfig+0x240>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	691b      	ldr	r3, [r3, #16]
 8003b50:	00db      	lsls	r3, r3, #3
 8003b52:	4925      	ldr	r1, [pc, #148]	@ (8003be8 <HAL_RCC_OscConfig+0x240>)
 8003b54:	4313      	orrs	r3, r2
 8003b56:	600b      	str	r3, [r1, #0]
 8003b58:	e015      	b.n	8003b86 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b5a:	4b24      	ldr	r3, [pc, #144]	@ (8003bec <HAL_RCC_OscConfig+0x244>)
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b60:	f7fe fa52 	bl	8002008 <HAL_GetTick>
 8003b64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b66:	e008      	b.n	8003b7a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b68:	f7fe fa4e 	bl	8002008 <HAL_GetTick>
 8003b6c:	4602      	mov	r2, r0
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	1ad3      	subs	r3, r2, r3
 8003b72:	2b02      	cmp	r3, #2
 8003b74:	d901      	bls.n	8003b7a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003b76:	2303      	movs	r3, #3
 8003b78:	e187      	b.n	8003e8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b7a:	4b1b      	ldr	r3, [pc, #108]	@ (8003be8 <HAL_RCC_OscConfig+0x240>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f003 0302 	and.w	r3, r3, #2
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d1f0      	bne.n	8003b68 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f003 0308 	and.w	r3, r3, #8
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d036      	beq.n	8003c00 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	695b      	ldr	r3, [r3, #20]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d016      	beq.n	8003bc8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b9a:	4b15      	ldr	r3, [pc, #84]	@ (8003bf0 <HAL_RCC_OscConfig+0x248>)
 8003b9c:	2201      	movs	r2, #1
 8003b9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ba0:	f7fe fa32 	bl	8002008 <HAL_GetTick>
 8003ba4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ba6:	e008      	b.n	8003bba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ba8:	f7fe fa2e 	bl	8002008 <HAL_GetTick>
 8003bac:	4602      	mov	r2, r0
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	1ad3      	subs	r3, r2, r3
 8003bb2:	2b02      	cmp	r3, #2
 8003bb4:	d901      	bls.n	8003bba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003bb6:	2303      	movs	r3, #3
 8003bb8:	e167      	b.n	8003e8a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bba:	4b0b      	ldr	r3, [pc, #44]	@ (8003be8 <HAL_RCC_OscConfig+0x240>)
 8003bbc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003bbe:	f003 0302 	and.w	r3, r3, #2
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d0f0      	beq.n	8003ba8 <HAL_RCC_OscConfig+0x200>
 8003bc6:	e01b      	b.n	8003c00 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003bc8:	4b09      	ldr	r3, [pc, #36]	@ (8003bf0 <HAL_RCC_OscConfig+0x248>)
 8003bca:	2200      	movs	r2, #0
 8003bcc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bce:	f7fe fa1b 	bl	8002008 <HAL_GetTick>
 8003bd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bd4:	e00e      	b.n	8003bf4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003bd6:	f7fe fa17 	bl	8002008 <HAL_GetTick>
 8003bda:	4602      	mov	r2, r0
 8003bdc:	693b      	ldr	r3, [r7, #16]
 8003bde:	1ad3      	subs	r3, r2, r3
 8003be0:	2b02      	cmp	r3, #2
 8003be2:	d907      	bls.n	8003bf4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003be4:	2303      	movs	r3, #3
 8003be6:	e150      	b.n	8003e8a <HAL_RCC_OscConfig+0x4e2>
 8003be8:	40023800 	.word	0x40023800
 8003bec:	42470000 	.word	0x42470000
 8003bf0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bf4:	4b88      	ldr	r3, [pc, #544]	@ (8003e18 <HAL_RCC_OscConfig+0x470>)
 8003bf6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003bf8:	f003 0302 	and.w	r3, r3, #2
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d1ea      	bne.n	8003bd6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f003 0304 	and.w	r3, r3, #4
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	f000 8097 	beq.w	8003d3c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c0e:	2300      	movs	r3, #0
 8003c10:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c12:	4b81      	ldr	r3, [pc, #516]	@ (8003e18 <HAL_RCC_OscConfig+0x470>)
 8003c14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d10f      	bne.n	8003c3e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c1e:	2300      	movs	r3, #0
 8003c20:	60bb      	str	r3, [r7, #8]
 8003c22:	4b7d      	ldr	r3, [pc, #500]	@ (8003e18 <HAL_RCC_OscConfig+0x470>)
 8003c24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c26:	4a7c      	ldr	r2, [pc, #496]	@ (8003e18 <HAL_RCC_OscConfig+0x470>)
 8003c28:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003c2e:	4b7a      	ldr	r3, [pc, #488]	@ (8003e18 <HAL_RCC_OscConfig+0x470>)
 8003c30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c36:	60bb      	str	r3, [r7, #8]
 8003c38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c3e:	4b77      	ldr	r3, [pc, #476]	@ (8003e1c <HAL_RCC_OscConfig+0x474>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d118      	bne.n	8003c7c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c4a:	4b74      	ldr	r3, [pc, #464]	@ (8003e1c <HAL_RCC_OscConfig+0x474>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a73      	ldr	r2, [pc, #460]	@ (8003e1c <HAL_RCC_OscConfig+0x474>)
 8003c50:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c56:	f7fe f9d7 	bl	8002008 <HAL_GetTick>
 8003c5a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c5c:	e008      	b.n	8003c70 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c5e:	f7fe f9d3 	bl	8002008 <HAL_GetTick>
 8003c62:	4602      	mov	r2, r0
 8003c64:	693b      	ldr	r3, [r7, #16]
 8003c66:	1ad3      	subs	r3, r2, r3
 8003c68:	2b02      	cmp	r3, #2
 8003c6a:	d901      	bls.n	8003c70 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003c6c:	2303      	movs	r3, #3
 8003c6e:	e10c      	b.n	8003e8a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c70:	4b6a      	ldr	r3, [pc, #424]	@ (8003e1c <HAL_RCC_OscConfig+0x474>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d0f0      	beq.n	8003c5e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	2b01      	cmp	r3, #1
 8003c82:	d106      	bne.n	8003c92 <HAL_RCC_OscConfig+0x2ea>
 8003c84:	4b64      	ldr	r3, [pc, #400]	@ (8003e18 <HAL_RCC_OscConfig+0x470>)
 8003c86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c88:	4a63      	ldr	r2, [pc, #396]	@ (8003e18 <HAL_RCC_OscConfig+0x470>)
 8003c8a:	f043 0301 	orr.w	r3, r3, #1
 8003c8e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c90:	e01c      	b.n	8003ccc <HAL_RCC_OscConfig+0x324>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	2b05      	cmp	r3, #5
 8003c98:	d10c      	bne.n	8003cb4 <HAL_RCC_OscConfig+0x30c>
 8003c9a:	4b5f      	ldr	r3, [pc, #380]	@ (8003e18 <HAL_RCC_OscConfig+0x470>)
 8003c9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c9e:	4a5e      	ldr	r2, [pc, #376]	@ (8003e18 <HAL_RCC_OscConfig+0x470>)
 8003ca0:	f043 0304 	orr.w	r3, r3, #4
 8003ca4:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ca6:	4b5c      	ldr	r3, [pc, #368]	@ (8003e18 <HAL_RCC_OscConfig+0x470>)
 8003ca8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003caa:	4a5b      	ldr	r2, [pc, #364]	@ (8003e18 <HAL_RCC_OscConfig+0x470>)
 8003cac:	f043 0301 	orr.w	r3, r3, #1
 8003cb0:	6713      	str	r3, [r2, #112]	@ 0x70
 8003cb2:	e00b      	b.n	8003ccc <HAL_RCC_OscConfig+0x324>
 8003cb4:	4b58      	ldr	r3, [pc, #352]	@ (8003e18 <HAL_RCC_OscConfig+0x470>)
 8003cb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cb8:	4a57      	ldr	r2, [pc, #348]	@ (8003e18 <HAL_RCC_OscConfig+0x470>)
 8003cba:	f023 0301 	bic.w	r3, r3, #1
 8003cbe:	6713      	str	r3, [r2, #112]	@ 0x70
 8003cc0:	4b55      	ldr	r3, [pc, #340]	@ (8003e18 <HAL_RCC_OscConfig+0x470>)
 8003cc2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cc4:	4a54      	ldr	r2, [pc, #336]	@ (8003e18 <HAL_RCC_OscConfig+0x470>)
 8003cc6:	f023 0304 	bic.w	r3, r3, #4
 8003cca:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	689b      	ldr	r3, [r3, #8]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d015      	beq.n	8003d00 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cd4:	f7fe f998 	bl	8002008 <HAL_GetTick>
 8003cd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cda:	e00a      	b.n	8003cf2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003cdc:	f7fe f994 	bl	8002008 <HAL_GetTick>
 8003ce0:	4602      	mov	r2, r0
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	1ad3      	subs	r3, r2, r3
 8003ce6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d901      	bls.n	8003cf2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003cee:	2303      	movs	r3, #3
 8003cf0:	e0cb      	b.n	8003e8a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cf2:	4b49      	ldr	r3, [pc, #292]	@ (8003e18 <HAL_RCC_OscConfig+0x470>)
 8003cf4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cf6:	f003 0302 	and.w	r3, r3, #2
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d0ee      	beq.n	8003cdc <HAL_RCC_OscConfig+0x334>
 8003cfe:	e014      	b.n	8003d2a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d00:	f7fe f982 	bl	8002008 <HAL_GetTick>
 8003d04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d06:	e00a      	b.n	8003d1e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d08:	f7fe f97e 	bl	8002008 <HAL_GetTick>
 8003d0c:	4602      	mov	r2, r0
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	1ad3      	subs	r3, r2, r3
 8003d12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d901      	bls.n	8003d1e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003d1a:	2303      	movs	r3, #3
 8003d1c:	e0b5      	b.n	8003e8a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d1e:	4b3e      	ldr	r3, [pc, #248]	@ (8003e18 <HAL_RCC_OscConfig+0x470>)
 8003d20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d22:	f003 0302 	and.w	r3, r3, #2
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d1ee      	bne.n	8003d08 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d2a:	7dfb      	ldrb	r3, [r7, #23]
 8003d2c:	2b01      	cmp	r3, #1
 8003d2e:	d105      	bne.n	8003d3c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d30:	4b39      	ldr	r3, [pc, #228]	@ (8003e18 <HAL_RCC_OscConfig+0x470>)
 8003d32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d34:	4a38      	ldr	r2, [pc, #224]	@ (8003e18 <HAL_RCC_OscConfig+0x470>)
 8003d36:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003d3a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	699b      	ldr	r3, [r3, #24]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	f000 80a1 	beq.w	8003e88 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003d46:	4b34      	ldr	r3, [pc, #208]	@ (8003e18 <HAL_RCC_OscConfig+0x470>)
 8003d48:	689b      	ldr	r3, [r3, #8]
 8003d4a:	f003 030c 	and.w	r3, r3, #12
 8003d4e:	2b08      	cmp	r3, #8
 8003d50:	d05c      	beq.n	8003e0c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	699b      	ldr	r3, [r3, #24]
 8003d56:	2b02      	cmp	r3, #2
 8003d58:	d141      	bne.n	8003dde <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d5a:	4b31      	ldr	r3, [pc, #196]	@ (8003e20 <HAL_RCC_OscConfig+0x478>)
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d60:	f7fe f952 	bl	8002008 <HAL_GetTick>
 8003d64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d66:	e008      	b.n	8003d7a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d68:	f7fe f94e 	bl	8002008 <HAL_GetTick>
 8003d6c:	4602      	mov	r2, r0
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	1ad3      	subs	r3, r2, r3
 8003d72:	2b02      	cmp	r3, #2
 8003d74:	d901      	bls.n	8003d7a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003d76:	2303      	movs	r3, #3
 8003d78:	e087      	b.n	8003e8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d7a:	4b27      	ldr	r3, [pc, #156]	@ (8003e18 <HAL_RCC_OscConfig+0x470>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d1f0      	bne.n	8003d68 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	69da      	ldr	r2, [r3, #28]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6a1b      	ldr	r3, [r3, #32]
 8003d8e:	431a      	orrs	r2, r3
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d94:	019b      	lsls	r3, r3, #6
 8003d96:	431a      	orrs	r2, r3
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d9c:	085b      	lsrs	r3, r3, #1
 8003d9e:	3b01      	subs	r3, #1
 8003da0:	041b      	lsls	r3, r3, #16
 8003da2:	431a      	orrs	r2, r3
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003da8:	061b      	lsls	r3, r3, #24
 8003daa:	491b      	ldr	r1, [pc, #108]	@ (8003e18 <HAL_RCC_OscConfig+0x470>)
 8003dac:	4313      	orrs	r3, r2
 8003dae:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003db0:	4b1b      	ldr	r3, [pc, #108]	@ (8003e20 <HAL_RCC_OscConfig+0x478>)
 8003db2:	2201      	movs	r2, #1
 8003db4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003db6:	f7fe f927 	bl	8002008 <HAL_GetTick>
 8003dba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dbc:	e008      	b.n	8003dd0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003dbe:	f7fe f923 	bl	8002008 <HAL_GetTick>
 8003dc2:	4602      	mov	r2, r0
 8003dc4:	693b      	ldr	r3, [r7, #16]
 8003dc6:	1ad3      	subs	r3, r2, r3
 8003dc8:	2b02      	cmp	r3, #2
 8003dca:	d901      	bls.n	8003dd0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003dcc:	2303      	movs	r3, #3
 8003dce:	e05c      	b.n	8003e8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dd0:	4b11      	ldr	r3, [pc, #68]	@ (8003e18 <HAL_RCC_OscConfig+0x470>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d0f0      	beq.n	8003dbe <HAL_RCC_OscConfig+0x416>
 8003ddc:	e054      	b.n	8003e88 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dde:	4b10      	ldr	r3, [pc, #64]	@ (8003e20 <HAL_RCC_OscConfig+0x478>)
 8003de0:	2200      	movs	r2, #0
 8003de2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003de4:	f7fe f910 	bl	8002008 <HAL_GetTick>
 8003de8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dea:	e008      	b.n	8003dfe <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003dec:	f7fe f90c 	bl	8002008 <HAL_GetTick>
 8003df0:	4602      	mov	r2, r0
 8003df2:	693b      	ldr	r3, [r7, #16]
 8003df4:	1ad3      	subs	r3, r2, r3
 8003df6:	2b02      	cmp	r3, #2
 8003df8:	d901      	bls.n	8003dfe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003dfa:	2303      	movs	r3, #3
 8003dfc:	e045      	b.n	8003e8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dfe:	4b06      	ldr	r3, [pc, #24]	@ (8003e18 <HAL_RCC_OscConfig+0x470>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d1f0      	bne.n	8003dec <HAL_RCC_OscConfig+0x444>
 8003e0a:	e03d      	b.n	8003e88 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	699b      	ldr	r3, [r3, #24]
 8003e10:	2b01      	cmp	r3, #1
 8003e12:	d107      	bne.n	8003e24 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003e14:	2301      	movs	r3, #1
 8003e16:	e038      	b.n	8003e8a <HAL_RCC_OscConfig+0x4e2>
 8003e18:	40023800 	.word	0x40023800
 8003e1c:	40007000 	.word	0x40007000
 8003e20:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003e24:	4b1b      	ldr	r3, [pc, #108]	@ (8003e94 <HAL_RCC_OscConfig+0x4ec>)
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	699b      	ldr	r3, [r3, #24]
 8003e2e:	2b01      	cmp	r3, #1
 8003e30:	d028      	beq.n	8003e84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e3c:	429a      	cmp	r2, r3
 8003e3e:	d121      	bne.n	8003e84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e4a:	429a      	cmp	r2, r3
 8003e4c:	d11a      	bne.n	8003e84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e4e:	68fa      	ldr	r2, [r7, #12]
 8003e50:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003e54:	4013      	ands	r3, r2
 8003e56:	687a      	ldr	r2, [r7, #4]
 8003e58:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003e5a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d111      	bne.n	8003e84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e6a:	085b      	lsrs	r3, r3, #1
 8003e6c:	3b01      	subs	r3, #1
 8003e6e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e70:	429a      	cmp	r2, r3
 8003e72:	d107      	bne.n	8003e84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e7e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e80:	429a      	cmp	r2, r3
 8003e82:	d001      	beq.n	8003e88 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003e84:	2301      	movs	r3, #1
 8003e86:	e000      	b.n	8003e8a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003e88:	2300      	movs	r3, #0
}
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	3718      	adds	r7, #24
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bd80      	pop	{r7, pc}
 8003e92:	bf00      	nop
 8003e94:	40023800 	.word	0x40023800

08003e98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b084      	sub	sp, #16
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
 8003ea0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d101      	bne.n	8003eac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	e0cc      	b.n	8004046 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003eac:	4b68      	ldr	r3, [pc, #416]	@ (8004050 <HAL_RCC_ClockConfig+0x1b8>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f003 0307 	and.w	r3, r3, #7
 8003eb4:	683a      	ldr	r2, [r7, #0]
 8003eb6:	429a      	cmp	r2, r3
 8003eb8:	d90c      	bls.n	8003ed4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003eba:	4b65      	ldr	r3, [pc, #404]	@ (8004050 <HAL_RCC_ClockConfig+0x1b8>)
 8003ebc:	683a      	ldr	r2, [r7, #0]
 8003ebe:	b2d2      	uxtb	r2, r2
 8003ec0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ec2:	4b63      	ldr	r3, [pc, #396]	@ (8004050 <HAL_RCC_ClockConfig+0x1b8>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f003 0307 	and.w	r3, r3, #7
 8003eca:	683a      	ldr	r2, [r7, #0]
 8003ecc:	429a      	cmp	r2, r3
 8003ece:	d001      	beq.n	8003ed4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	e0b8      	b.n	8004046 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f003 0302 	and.w	r3, r3, #2
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d020      	beq.n	8003f22 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f003 0304 	and.w	r3, r3, #4
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d005      	beq.n	8003ef8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003eec:	4b59      	ldr	r3, [pc, #356]	@ (8004054 <HAL_RCC_ClockConfig+0x1bc>)
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	4a58      	ldr	r2, [pc, #352]	@ (8004054 <HAL_RCC_ClockConfig+0x1bc>)
 8003ef2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003ef6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f003 0308 	and.w	r3, r3, #8
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d005      	beq.n	8003f10 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f04:	4b53      	ldr	r3, [pc, #332]	@ (8004054 <HAL_RCC_ClockConfig+0x1bc>)
 8003f06:	689b      	ldr	r3, [r3, #8]
 8003f08:	4a52      	ldr	r2, [pc, #328]	@ (8004054 <HAL_RCC_ClockConfig+0x1bc>)
 8003f0a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003f0e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f10:	4b50      	ldr	r3, [pc, #320]	@ (8004054 <HAL_RCC_ClockConfig+0x1bc>)
 8003f12:	689b      	ldr	r3, [r3, #8]
 8003f14:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	689b      	ldr	r3, [r3, #8]
 8003f1c:	494d      	ldr	r1, [pc, #308]	@ (8004054 <HAL_RCC_ClockConfig+0x1bc>)
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f003 0301 	and.w	r3, r3, #1
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d044      	beq.n	8003fb8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	2b01      	cmp	r3, #1
 8003f34:	d107      	bne.n	8003f46 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f36:	4b47      	ldr	r3, [pc, #284]	@ (8004054 <HAL_RCC_ClockConfig+0x1bc>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d119      	bne.n	8003f76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	e07f      	b.n	8004046 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	2b02      	cmp	r3, #2
 8003f4c:	d003      	beq.n	8003f56 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f52:	2b03      	cmp	r3, #3
 8003f54:	d107      	bne.n	8003f66 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f56:	4b3f      	ldr	r3, [pc, #252]	@ (8004054 <HAL_RCC_ClockConfig+0x1bc>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d109      	bne.n	8003f76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f62:	2301      	movs	r3, #1
 8003f64:	e06f      	b.n	8004046 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f66:	4b3b      	ldr	r3, [pc, #236]	@ (8004054 <HAL_RCC_ClockConfig+0x1bc>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f003 0302 	and.w	r3, r3, #2
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d101      	bne.n	8003f76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	e067      	b.n	8004046 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f76:	4b37      	ldr	r3, [pc, #220]	@ (8004054 <HAL_RCC_ClockConfig+0x1bc>)
 8003f78:	689b      	ldr	r3, [r3, #8]
 8003f7a:	f023 0203 	bic.w	r2, r3, #3
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	4934      	ldr	r1, [pc, #208]	@ (8004054 <HAL_RCC_ClockConfig+0x1bc>)
 8003f84:	4313      	orrs	r3, r2
 8003f86:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f88:	f7fe f83e 	bl	8002008 <HAL_GetTick>
 8003f8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f8e:	e00a      	b.n	8003fa6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f90:	f7fe f83a 	bl	8002008 <HAL_GetTick>
 8003f94:	4602      	mov	r2, r0
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	1ad3      	subs	r3, r2, r3
 8003f9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d901      	bls.n	8003fa6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003fa2:	2303      	movs	r3, #3
 8003fa4:	e04f      	b.n	8004046 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fa6:	4b2b      	ldr	r3, [pc, #172]	@ (8004054 <HAL_RCC_ClockConfig+0x1bc>)
 8003fa8:	689b      	ldr	r3, [r3, #8]
 8003faa:	f003 020c 	and.w	r2, r3, #12
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	009b      	lsls	r3, r3, #2
 8003fb4:	429a      	cmp	r2, r3
 8003fb6:	d1eb      	bne.n	8003f90 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003fb8:	4b25      	ldr	r3, [pc, #148]	@ (8004050 <HAL_RCC_ClockConfig+0x1b8>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f003 0307 	and.w	r3, r3, #7
 8003fc0:	683a      	ldr	r2, [r7, #0]
 8003fc2:	429a      	cmp	r2, r3
 8003fc4:	d20c      	bcs.n	8003fe0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fc6:	4b22      	ldr	r3, [pc, #136]	@ (8004050 <HAL_RCC_ClockConfig+0x1b8>)
 8003fc8:	683a      	ldr	r2, [r7, #0]
 8003fca:	b2d2      	uxtb	r2, r2
 8003fcc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fce:	4b20      	ldr	r3, [pc, #128]	@ (8004050 <HAL_RCC_ClockConfig+0x1b8>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f003 0307 	and.w	r3, r3, #7
 8003fd6:	683a      	ldr	r2, [r7, #0]
 8003fd8:	429a      	cmp	r2, r3
 8003fda:	d001      	beq.n	8003fe0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003fdc:	2301      	movs	r3, #1
 8003fde:	e032      	b.n	8004046 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f003 0304 	and.w	r3, r3, #4
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d008      	beq.n	8003ffe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003fec:	4b19      	ldr	r3, [pc, #100]	@ (8004054 <HAL_RCC_ClockConfig+0x1bc>)
 8003fee:	689b      	ldr	r3, [r3, #8]
 8003ff0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	68db      	ldr	r3, [r3, #12]
 8003ff8:	4916      	ldr	r1, [pc, #88]	@ (8004054 <HAL_RCC_ClockConfig+0x1bc>)
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f003 0308 	and.w	r3, r3, #8
 8004006:	2b00      	cmp	r3, #0
 8004008:	d009      	beq.n	800401e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800400a:	4b12      	ldr	r3, [pc, #72]	@ (8004054 <HAL_RCC_ClockConfig+0x1bc>)
 800400c:	689b      	ldr	r3, [r3, #8]
 800400e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	691b      	ldr	r3, [r3, #16]
 8004016:	00db      	lsls	r3, r3, #3
 8004018:	490e      	ldr	r1, [pc, #56]	@ (8004054 <HAL_RCC_ClockConfig+0x1bc>)
 800401a:	4313      	orrs	r3, r2
 800401c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800401e:	f000 f821 	bl	8004064 <HAL_RCC_GetSysClockFreq>
 8004022:	4602      	mov	r2, r0
 8004024:	4b0b      	ldr	r3, [pc, #44]	@ (8004054 <HAL_RCC_ClockConfig+0x1bc>)
 8004026:	689b      	ldr	r3, [r3, #8]
 8004028:	091b      	lsrs	r3, r3, #4
 800402a:	f003 030f 	and.w	r3, r3, #15
 800402e:	490a      	ldr	r1, [pc, #40]	@ (8004058 <HAL_RCC_ClockConfig+0x1c0>)
 8004030:	5ccb      	ldrb	r3, [r1, r3]
 8004032:	fa22 f303 	lsr.w	r3, r2, r3
 8004036:	4a09      	ldr	r2, [pc, #36]	@ (800405c <HAL_RCC_ClockConfig+0x1c4>)
 8004038:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800403a:	4b09      	ldr	r3, [pc, #36]	@ (8004060 <HAL_RCC_ClockConfig+0x1c8>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4618      	mov	r0, r3
 8004040:	f7fd ff9e 	bl	8001f80 <HAL_InitTick>

  return HAL_OK;
 8004044:	2300      	movs	r3, #0
}
 8004046:	4618      	mov	r0, r3
 8004048:	3710      	adds	r7, #16
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}
 800404e:	bf00      	nop
 8004050:	40023c00 	.word	0x40023c00
 8004054:	40023800 	.word	0x40023800
 8004058:	08006cdc 	.word	0x08006cdc
 800405c:	20000000 	.word	0x20000000
 8004060:	20000004 	.word	0x20000004

08004064 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004064:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004068:	b090      	sub	sp, #64	@ 0x40
 800406a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800406c:	2300      	movs	r3, #0
 800406e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004070:	2300      	movs	r3, #0
 8004072:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004074:	2300      	movs	r3, #0
 8004076:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8004078:	2300      	movs	r3, #0
 800407a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800407c:	4b59      	ldr	r3, [pc, #356]	@ (80041e4 <HAL_RCC_GetSysClockFreq+0x180>)
 800407e:	689b      	ldr	r3, [r3, #8]
 8004080:	f003 030c 	and.w	r3, r3, #12
 8004084:	2b08      	cmp	r3, #8
 8004086:	d00d      	beq.n	80040a4 <HAL_RCC_GetSysClockFreq+0x40>
 8004088:	2b08      	cmp	r3, #8
 800408a:	f200 80a1 	bhi.w	80041d0 <HAL_RCC_GetSysClockFreq+0x16c>
 800408e:	2b00      	cmp	r3, #0
 8004090:	d002      	beq.n	8004098 <HAL_RCC_GetSysClockFreq+0x34>
 8004092:	2b04      	cmp	r3, #4
 8004094:	d003      	beq.n	800409e <HAL_RCC_GetSysClockFreq+0x3a>
 8004096:	e09b      	b.n	80041d0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004098:	4b53      	ldr	r3, [pc, #332]	@ (80041e8 <HAL_RCC_GetSysClockFreq+0x184>)
 800409a:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 800409c:	e09b      	b.n	80041d6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800409e:	4b53      	ldr	r3, [pc, #332]	@ (80041ec <HAL_RCC_GetSysClockFreq+0x188>)
 80040a0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80040a2:	e098      	b.n	80041d6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80040a4:	4b4f      	ldr	r3, [pc, #316]	@ (80041e4 <HAL_RCC_GetSysClockFreq+0x180>)
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80040ac:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80040ae:	4b4d      	ldr	r3, [pc, #308]	@ (80041e4 <HAL_RCC_GetSysClockFreq+0x180>)
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d028      	beq.n	800410c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040ba:	4b4a      	ldr	r3, [pc, #296]	@ (80041e4 <HAL_RCC_GetSysClockFreq+0x180>)
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	099b      	lsrs	r3, r3, #6
 80040c0:	2200      	movs	r2, #0
 80040c2:	623b      	str	r3, [r7, #32]
 80040c4:	627a      	str	r2, [r7, #36]	@ 0x24
 80040c6:	6a3b      	ldr	r3, [r7, #32]
 80040c8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80040cc:	2100      	movs	r1, #0
 80040ce:	4b47      	ldr	r3, [pc, #284]	@ (80041ec <HAL_RCC_GetSysClockFreq+0x188>)
 80040d0:	fb03 f201 	mul.w	r2, r3, r1
 80040d4:	2300      	movs	r3, #0
 80040d6:	fb00 f303 	mul.w	r3, r0, r3
 80040da:	4413      	add	r3, r2
 80040dc:	4a43      	ldr	r2, [pc, #268]	@ (80041ec <HAL_RCC_GetSysClockFreq+0x188>)
 80040de:	fba0 1202 	umull	r1, r2, r0, r2
 80040e2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80040e4:	460a      	mov	r2, r1
 80040e6:	62ba      	str	r2, [r7, #40]	@ 0x28
 80040e8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80040ea:	4413      	add	r3, r2
 80040ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80040ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040f0:	2200      	movs	r2, #0
 80040f2:	61bb      	str	r3, [r7, #24]
 80040f4:	61fa      	str	r2, [r7, #28]
 80040f6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80040fa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80040fe:	f7fc fcdd 	bl	8000abc <__aeabi_uldivmod>
 8004102:	4602      	mov	r2, r0
 8004104:	460b      	mov	r3, r1
 8004106:	4613      	mov	r3, r2
 8004108:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800410a:	e053      	b.n	80041b4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800410c:	4b35      	ldr	r3, [pc, #212]	@ (80041e4 <HAL_RCC_GetSysClockFreq+0x180>)
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	099b      	lsrs	r3, r3, #6
 8004112:	2200      	movs	r2, #0
 8004114:	613b      	str	r3, [r7, #16]
 8004116:	617a      	str	r2, [r7, #20]
 8004118:	693b      	ldr	r3, [r7, #16]
 800411a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800411e:	f04f 0b00 	mov.w	fp, #0
 8004122:	4652      	mov	r2, sl
 8004124:	465b      	mov	r3, fp
 8004126:	f04f 0000 	mov.w	r0, #0
 800412a:	f04f 0100 	mov.w	r1, #0
 800412e:	0159      	lsls	r1, r3, #5
 8004130:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004134:	0150      	lsls	r0, r2, #5
 8004136:	4602      	mov	r2, r0
 8004138:	460b      	mov	r3, r1
 800413a:	ebb2 080a 	subs.w	r8, r2, sl
 800413e:	eb63 090b 	sbc.w	r9, r3, fp
 8004142:	f04f 0200 	mov.w	r2, #0
 8004146:	f04f 0300 	mov.w	r3, #0
 800414a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800414e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004152:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004156:	ebb2 0408 	subs.w	r4, r2, r8
 800415a:	eb63 0509 	sbc.w	r5, r3, r9
 800415e:	f04f 0200 	mov.w	r2, #0
 8004162:	f04f 0300 	mov.w	r3, #0
 8004166:	00eb      	lsls	r3, r5, #3
 8004168:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800416c:	00e2      	lsls	r2, r4, #3
 800416e:	4614      	mov	r4, r2
 8004170:	461d      	mov	r5, r3
 8004172:	eb14 030a 	adds.w	r3, r4, sl
 8004176:	603b      	str	r3, [r7, #0]
 8004178:	eb45 030b 	adc.w	r3, r5, fp
 800417c:	607b      	str	r3, [r7, #4]
 800417e:	f04f 0200 	mov.w	r2, #0
 8004182:	f04f 0300 	mov.w	r3, #0
 8004186:	e9d7 4500 	ldrd	r4, r5, [r7]
 800418a:	4629      	mov	r1, r5
 800418c:	028b      	lsls	r3, r1, #10
 800418e:	4621      	mov	r1, r4
 8004190:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004194:	4621      	mov	r1, r4
 8004196:	028a      	lsls	r2, r1, #10
 8004198:	4610      	mov	r0, r2
 800419a:	4619      	mov	r1, r3
 800419c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800419e:	2200      	movs	r2, #0
 80041a0:	60bb      	str	r3, [r7, #8]
 80041a2:	60fa      	str	r2, [r7, #12]
 80041a4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80041a8:	f7fc fc88 	bl	8000abc <__aeabi_uldivmod>
 80041ac:	4602      	mov	r2, r0
 80041ae:	460b      	mov	r3, r1
 80041b0:	4613      	mov	r3, r2
 80041b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80041b4:	4b0b      	ldr	r3, [pc, #44]	@ (80041e4 <HAL_RCC_GetSysClockFreq+0x180>)
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	0c1b      	lsrs	r3, r3, #16
 80041ba:	f003 0303 	and.w	r3, r3, #3
 80041be:	3301      	adds	r3, #1
 80041c0:	005b      	lsls	r3, r3, #1
 80041c2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 80041c4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80041c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80041cc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80041ce:	e002      	b.n	80041d6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80041d0:	4b05      	ldr	r3, [pc, #20]	@ (80041e8 <HAL_RCC_GetSysClockFreq+0x184>)
 80041d2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80041d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80041d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80041d8:	4618      	mov	r0, r3
 80041da:	3740      	adds	r7, #64	@ 0x40
 80041dc:	46bd      	mov	sp, r7
 80041de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80041e2:	bf00      	nop
 80041e4:	40023800 	.word	0x40023800
 80041e8:	00f42400 	.word	0x00f42400
 80041ec:	017d7840 	.word	0x017d7840

080041f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80041f0:	b480      	push	{r7}
 80041f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80041f4:	4b03      	ldr	r3, [pc, #12]	@ (8004204 <HAL_RCC_GetHCLKFreq+0x14>)
 80041f6:	681b      	ldr	r3, [r3, #0]
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	46bd      	mov	sp, r7
 80041fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004200:	4770      	bx	lr
 8004202:	bf00      	nop
 8004204:	20000000 	.word	0x20000000

08004208 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800420c:	f7ff fff0 	bl	80041f0 <HAL_RCC_GetHCLKFreq>
 8004210:	4602      	mov	r2, r0
 8004212:	4b05      	ldr	r3, [pc, #20]	@ (8004228 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004214:	689b      	ldr	r3, [r3, #8]
 8004216:	0a9b      	lsrs	r3, r3, #10
 8004218:	f003 0307 	and.w	r3, r3, #7
 800421c:	4903      	ldr	r1, [pc, #12]	@ (800422c <HAL_RCC_GetPCLK1Freq+0x24>)
 800421e:	5ccb      	ldrb	r3, [r1, r3]
 8004220:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004224:	4618      	mov	r0, r3
 8004226:	bd80      	pop	{r7, pc}
 8004228:	40023800 	.word	0x40023800
 800422c:	08006cec 	.word	0x08006cec

08004230 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004234:	f7ff ffdc 	bl	80041f0 <HAL_RCC_GetHCLKFreq>
 8004238:	4602      	mov	r2, r0
 800423a:	4b05      	ldr	r3, [pc, #20]	@ (8004250 <HAL_RCC_GetPCLK2Freq+0x20>)
 800423c:	689b      	ldr	r3, [r3, #8]
 800423e:	0b5b      	lsrs	r3, r3, #13
 8004240:	f003 0307 	and.w	r3, r3, #7
 8004244:	4903      	ldr	r1, [pc, #12]	@ (8004254 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004246:	5ccb      	ldrb	r3, [r1, r3]
 8004248:	fa22 f303 	lsr.w	r3, r2, r3
}
 800424c:	4618      	mov	r0, r3
 800424e:	bd80      	pop	{r7, pc}
 8004250:	40023800 	.word	0x40023800
 8004254:	08006cec 	.word	0x08006cec

08004258 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b082      	sub	sp, #8
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d101      	bne.n	800426a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004266:	2301      	movs	r3, #1
 8004268:	e07b      	b.n	8004362 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800426e:	2b00      	cmp	r3, #0
 8004270:	d108      	bne.n	8004284 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800427a:	d009      	beq.n	8004290 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2200      	movs	r2, #0
 8004280:	61da      	str	r2, [r3, #28]
 8004282:	e005      	b.n	8004290 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2200      	movs	r2, #0
 8004288:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2200      	movs	r2, #0
 800428e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2200      	movs	r2, #0
 8004294:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800429c:	b2db      	uxtb	r3, r3
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d106      	bne.n	80042b0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2200      	movs	r2, #0
 80042a6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80042aa:	6878      	ldr	r0, [r7, #4]
 80042ac:	f7fd fbf6 	bl	8001a9c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2202      	movs	r2, #2
 80042b4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	681a      	ldr	r2, [r3, #0]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80042c6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	689b      	ldr	r3, [r3, #8]
 80042d4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80042d8:	431a      	orrs	r2, r3
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	68db      	ldr	r3, [r3, #12]
 80042de:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80042e2:	431a      	orrs	r2, r3
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	691b      	ldr	r3, [r3, #16]
 80042e8:	f003 0302 	and.w	r3, r3, #2
 80042ec:	431a      	orrs	r2, r3
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	695b      	ldr	r3, [r3, #20]
 80042f2:	f003 0301 	and.w	r3, r3, #1
 80042f6:	431a      	orrs	r2, r3
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	699b      	ldr	r3, [r3, #24]
 80042fc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004300:	431a      	orrs	r2, r3
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	69db      	ldr	r3, [r3, #28]
 8004306:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800430a:	431a      	orrs	r2, r3
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6a1b      	ldr	r3, [r3, #32]
 8004310:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004314:	ea42 0103 	orr.w	r1, r2, r3
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800431c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	430a      	orrs	r2, r1
 8004326:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	699b      	ldr	r3, [r3, #24]
 800432c:	0c1b      	lsrs	r3, r3, #16
 800432e:	f003 0104 	and.w	r1, r3, #4
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004336:	f003 0210 	and.w	r2, r3, #16
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	430a      	orrs	r2, r1
 8004340:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	69da      	ldr	r2, [r3, #28]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004350:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2200      	movs	r2, #0
 8004356:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2201      	movs	r2, #1
 800435c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004360:	2300      	movs	r3, #0
}
 8004362:	4618      	mov	r0, r3
 8004364:	3708      	adds	r7, #8
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}

0800436a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800436a:	b580      	push	{r7, lr}
 800436c:	b082      	sub	sp, #8
 800436e:	af00      	add	r7, sp, #0
 8004370:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d101      	bne.n	800437c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004378:	2301      	movs	r3, #1
 800437a:	e041      	b.n	8004400 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004382:	b2db      	uxtb	r3, r3
 8004384:	2b00      	cmp	r3, #0
 8004386:	d106      	bne.n	8004396 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2200      	movs	r2, #0
 800438c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004390:	6878      	ldr	r0, [r7, #4]
 8004392:	f7fd fbd3 	bl	8001b3c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2202      	movs	r2, #2
 800439a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681a      	ldr	r2, [r3, #0]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	3304      	adds	r3, #4
 80043a6:	4619      	mov	r1, r3
 80043a8:	4610      	mov	r0, r2
 80043aa:	f000 fbad 	bl	8004b08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2201      	movs	r2, #1
 80043b2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2201      	movs	r2, #1
 80043ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2201      	movs	r2, #1
 80043c2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2201      	movs	r2, #1
 80043ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2201      	movs	r2, #1
 80043d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2201      	movs	r2, #1
 80043da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2201      	movs	r2, #1
 80043e2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2201      	movs	r2, #1
 80043ea:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2201      	movs	r2, #1
 80043f2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2201      	movs	r2, #1
 80043fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80043fe:	2300      	movs	r3, #0
}
 8004400:	4618      	mov	r0, r3
 8004402:	3708      	adds	r7, #8
 8004404:	46bd      	mov	sp, r7
 8004406:	bd80      	pop	{r7, pc}

08004408 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b084      	sub	sp, #16
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
 8004410:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d109      	bne.n	800442c <HAL_TIM_PWM_Start+0x24>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800441e:	b2db      	uxtb	r3, r3
 8004420:	2b01      	cmp	r3, #1
 8004422:	bf14      	ite	ne
 8004424:	2301      	movne	r3, #1
 8004426:	2300      	moveq	r3, #0
 8004428:	b2db      	uxtb	r3, r3
 800442a:	e022      	b.n	8004472 <HAL_TIM_PWM_Start+0x6a>
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	2b04      	cmp	r3, #4
 8004430:	d109      	bne.n	8004446 <HAL_TIM_PWM_Start+0x3e>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004438:	b2db      	uxtb	r3, r3
 800443a:	2b01      	cmp	r3, #1
 800443c:	bf14      	ite	ne
 800443e:	2301      	movne	r3, #1
 8004440:	2300      	moveq	r3, #0
 8004442:	b2db      	uxtb	r3, r3
 8004444:	e015      	b.n	8004472 <HAL_TIM_PWM_Start+0x6a>
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	2b08      	cmp	r3, #8
 800444a:	d109      	bne.n	8004460 <HAL_TIM_PWM_Start+0x58>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004452:	b2db      	uxtb	r3, r3
 8004454:	2b01      	cmp	r3, #1
 8004456:	bf14      	ite	ne
 8004458:	2301      	movne	r3, #1
 800445a:	2300      	moveq	r3, #0
 800445c:	b2db      	uxtb	r3, r3
 800445e:	e008      	b.n	8004472 <HAL_TIM_PWM_Start+0x6a>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004466:	b2db      	uxtb	r3, r3
 8004468:	2b01      	cmp	r3, #1
 800446a:	bf14      	ite	ne
 800446c:	2301      	movne	r3, #1
 800446e:	2300      	moveq	r3, #0
 8004470:	b2db      	uxtb	r3, r3
 8004472:	2b00      	cmp	r3, #0
 8004474:	d001      	beq.n	800447a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004476:	2301      	movs	r3, #1
 8004478:	e068      	b.n	800454c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d104      	bne.n	800448a <HAL_TIM_PWM_Start+0x82>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2202      	movs	r2, #2
 8004484:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004488:	e013      	b.n	80044b2 <HAL_TIM_PWM_Start+0xaa>
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	2b04      	cmp	r3, #4
 800448e:	d104      	bne.n	800449a <HAL_TIM_PWM_Start+0x92>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2202      	movs	r2, #2
 8004494:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004498:	e00b      	b.n	80044b2 <HAL_TIM_PWM_Start+0xaa>
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	2b08      	cmp	r3, #8
 800449e:	d104      	bne.n	80044aa <HAL_TIM_PWM_Start+0xa2>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2202      	movs	r2, #2
 80044a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80044a8:	e003      	b.n	80044b2 <HAL_TIM_PWM_Start+0xaa>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2202      	movs	r2, #2
 80044ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	2201      	movs	r2, #1
 80044b8:	6839      	ldr	r1, [r7, #0]
 80044ba:	4618      	mov	r0, r3
 80044bc:	f000 fe5a 	bl	8005174 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a23      	ldr	r2, [pc, #140]	@ (8004554 <HAL_TIM_PWM_Start+0x14c>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d107      	bne.n	80044da <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80044d8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4a1d      	ldr	r2, [pc, #116]	@ (8004554 <HAL_TIM_PWM_Start+0x14c>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d018      	beq.n	8004516 <HAL_TIM_PWM_Start+0x10e>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044ec:	d013      	beq.n	8004516 <HAL_TIM_PWM_Start+0x10e>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4a19      	ldr	r2, [pc, #100]	@ (8004558 <HAL_TIM_PWM_Start+0x150>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d00e      	beq.n	8004516 <HAL_TIM_PWM_Start+0x10e>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4a17      	ldr	r2, [pc, #92]	@ (800455c <HAL_TIM_PWM_Start+0x154>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d009      	beq.n	8004516 <HAL_TIM_PWM_Start+0x10e>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4a16      	ldr	r2, [pc, #88]	@ (8004560 <HAL_TIM_PWM_Start+0x158>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d004      	beq.n	8004516 <HAL_TIM_PWM_Start+0x10e>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a14      	ldr	r2, [pc, #80]	@ (8004564 <HAL_TIM_PWM_Start+0x15c>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d111      	bne.n	800453a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	689b      	ldr	r3, [r3, #8]
 800451c:	f003 0307 	and.w	r3, r3, #7
 8004520:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	2b06      	cmp	r3, #6
 8004526:	d010      	beq.n	800454a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	681a      	ldr	r2, [r3, #0]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f042 0201 	orr.w	r2, r2, #1
 8004536:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004538:	e007      	b.n	800454a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	681a      	ldr	r2, [r3, #0]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f042 0201 	orr.w	r2, r2, #1
 8004548:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800454a:	2300      	movs	r3, #0
}
 800454c:	4618      	mov	r0, r3
 800454e:	3710      	adds	r7, #16
 8004550:	46bd      	mov	sp, r7
 8004552:	bd80      	pop	{r7, pc}
 8004554:	40010000 	.word	0x40010000
 8004558:	40000400 	.word	0x40000400
 800455c:	40000800 	.word	0x40000800
 8004560:	40000c00 	.word	0x40000c00
 8004564:	40014000 	.word	0x40014000

08004568 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b082      	sub	sp, #8
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d101      	bne.n	800457a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004576:	2301      	movs	r3, #1
 8004578:	e041      	b.n	80045fe <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004580:	b2db      	uxtb	r3, r3
 8004582:	2b00      	cmp	r3, #0
 8004584:	d106      	bne.n	8004594 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2200      	movs	r2, #0
 800458a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	f7fd fb12 	bl	8001bb8 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2202      	movs	r2, #2
 8004598:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681a      	ldr	r2, [r3, #0]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	3304      	adds	r3, #4
 80045a4:	4619      	mov	r1, r3
 80045a6:	4610      	mov	r0, r2
 80045a8:	f000 faae 	bl	8004b08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2201      	movs	r2, #1
 80045b0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2201      	movs	r2, #1
 80045b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2201      	movs	r2, #1
 80045c0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2201      	movs	r2, #1
 80045c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2201      	movs	r2, #1
 80045d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2201      	movs	r2, #1
 80045d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2201      	movs	r2, #1
 80045e0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2201      	movs	r2, #1
 80045e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2201      	movs	r2, #1
 80045f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2201      	movs	r2, #1
 80045f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80045fc:	2300      	movs	r3, #0
}
 80045fe:	4618      	mov	r0, r3
 8004600:	3708      	adds	r7, #8
 8004602:	46bd      	mov	sp, r7
 8004604:	bd80      	pop	{r7, pc}

08004606 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004606:	b580      	push	{r7, lr}
 8004608:	b084      	sub	sp, #16
 800460a:	af00      	add	r7, sp, #0
 800460c:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	68db      	ldr	r3, [r3, #12]
 8004614:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	691b      	ldr	r3, [r3, #16]
 800461c:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800461e:	68bb      	ldr	r3, [r7, #8]
 8004620:	f003 0302 	and.w	r3, r3, #2
 8004624:	2b00      	cmp	r3, #0
 8004626:	d020      	beq.n	800466a <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	f003 0302 	and.w	r3, r3, #2
 800462e:	2b00      	cmp	r3, #0
 8004630:	d01b      	beq.n	800466a <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f06f 0202 	mvn.w	r2, #2
 800463a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2201      	movs	r2, #1
 8004640:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	699b      	ldr	r3, [r3, #24]
 8004648:	f003 0303 	and.w	r3, r3, #3
 800464c:	2b00      	cmp	r3, #0
 800464e:	d003      	beq.n	8004658 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004650:	6878      	ldr	r0, [r7, #4]
 8004652:	f000 fa3b 	bl	8004acc <HAL_TIM_IC_CaptureCallback>
 8004656:	e005      	b.n	8004664 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004658:	6878      	ldr	r0, [r7, #4]
 800465a:	f000 fa2d 	bl	8004ab8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800465e:	6878      	ldr	r0, [r7, #4]
 8004660:	f000 fa3e 	bl	8004ae0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2200      	movs	r2, #0
 8004668:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	f003 0304 	and.w	r3, r3, #4
 8004670:	2b00      	cmp	r3, #0
 8004672:	d020      	beq.n	80046b6 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	f003 0304 	and.w	r3, r3, #4
 800467a:	2b00      	cmp	r3, #0
 800467c:	d01b      	beq.n	80046b6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f06f 0204 	mvn.w	r2, #4
 8004686:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2202      	movs	r2, #2
 800468c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	699b      	ldr	r3, [r3, #24]
 8004694:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004698:	2b00      	cmp	r3, #0
 800469a:	d003      	beq.n	80046a4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800469c:	6878      	ldr	r0, [r7, #4]
 800469e:	f000 fa15 	bl	8004acc <HAL_TIM_IC_CaptureCallback>
 80046a2:	e005      	b.n	80046b0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046a4:	6878      	ldr	r0, [r7, #4]
 80046a6:	f000 fa07 	bl	8004ab8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046aa:	6878      	ldr	r0, [r7, #4]
 80046ac:	f000 fa18 	bl	8004ae0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2200      	movs	r2, #0
 80046b4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	f003 0308 	and.w	r3, r3, #8
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d020      	beq.n	8004702 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	f003 0308 	and.w	r3, r3, #8
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d01b      	beq.n	8004702 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f06f 0208 	mvn.w	r2, #8
 80046d2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2204      	movs	r2, #4
 80046d8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	69db      	ldr	r3, [r3, #28]
 80046e0:	f003 0303 	and.w	r3, r3, #3
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d003      	beq.n	80046f0 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046e8:	6878      	ldr	r0, [r7, #4]
 80046ea:	f000 f9ef 	bl	8004acc <HAL_TIM_IC_CaptureCallback>
 80046ee:	e005      	b.n	80046fc <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046f0:	6878      	ldr	r0, [r7, #4]
 80046f2:	f000 f9e1 	bl	8004ab8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046f6:	6878      	ldr	r0, [r7, #4]
 80046f8:	f000 f9f2 	bl	8004ae0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2200      	movs	r2, #0
 8004700:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	f003 0310 	and.w	r3, r3, #16
 8004708:	2b00      	cmp	r3, #0
 800470a:	d020      	beq.n	800474e <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	f003 0310 	and.w	r3, r3, #16
 8004712:	2b00      	cmp	r3, #0
 8004714:	d01b      	beq.n	800474e <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f06f 0210 	mvn.w	r2, #16
 800471e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2208      	movs	r2, #8
 8004724:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	69db      	ldr	r3, [r3, #28]
 800472c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004730:	2b00      	cmp	r3, #0
 8004732:	d003      	beq.n	800473c <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004734:	6878      	ldr	r0, [r7, #4]
 8004736:	f000 f9c9 	bl	8004acc <HAL_TIM_IC_CaptureCallback>
 800473a:	e005      	b.n	8004748 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800473c:	6878      	ldr	r0, [r7, #4]
 800473e:	f000 f9bb 	bl	8004ab8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004742:	6878      	ldr	r0, [r7, #4]
 8004744:	f000 f9cc 	bl	8004ae0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2200      	movs	r2, #0
 800474c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	f003 0301 	and.w	r3, r3, #1
 8004754:	2b00      	cmp	r3, #0
 8004756:	d00c      	beq.n	8004772 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	f003 0301 	and.w	r3, r3, #1
 800475e:	2b00      	cmp	r3, #0
 8004760:	d007      	beq.n	8004772 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f06f 0201 	mvn.w	r2, #1
 800476a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800476c:	6878      	ldr	r0, [r7, #4]
 800476e:	f000 f999 	bl	8004aa4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004772:	68bb      	ldr	r3, [r7, #8]
 8004774:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004778:	2b00      	cmp	r3, #0
 800477a:	d00c      	beq.n	8004796 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004782:	2b00      	cmp	r3, #0
 8004784:	d007      	beq.n	8004796 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800478e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004790:	6878      	ldr	r0, [r7, #4]
 8004792:	f000 fd8d 	bl	80052b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004796:	68bb      	ldr	r3, [r7, #8]
 8004798:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800479c:	2b00      	cmp	r3, #0
 800479e:	d00c      	beq.n	80047ba <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d007      	beq.n	80047ba <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80047b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80047b4:	6878      	ldr	r0, [r7, #4]
 80047b6:	f000 f99d 	bl	8004af4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80047ba:	68bb      	ldr	r3, [r7, #8]
 80047bc:	f003 0320 	and.w	r3, r3, #32
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d00c      	beq.n	80047de <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	f003 0320 	and.w	r3, r3, #32
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d007      	beq.n	80047de <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f06f 0220 	mvn.w	r2, #32
 80047d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80047d8:	6878      	ldr	r0, [r7, #4]
 80047da:	f000 fd5f 	bl	800529c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80047de:	bf00      	nop
 80047e0:	3710      	adds	r7, #16
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bd80      	pop	{r7, pc}

080047e6 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80047e6:	b580      	push	{r7, lr}
 80047e8:	b086      	sub	sp, #24
 80047ea:	af00      	add	r7, sp, #0
 80047ec:	60f8      	str	r0, [r7, #12]
 80047ee:	60b9      	str	r1, [r7, #8]
 80047f0:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80047f2:	2300      	movs	r3, #0
 80047f4:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80047fc:	2b01      	cmp	r3, #1
 80047fe:	d101      	bne.n	8004804 <HAL_TIM_IC_ConfigChannel+0x1e>
 8004800:	2302      	movs	r3, #2
 8004802:	e088      	b.n	8004916 <HAL_TIM_IC_ConfigChannel+0x130>
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	2201      	movs	r2, #1
 8004808:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d11b      	bne.n	800484a <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004816:	68bb      	ldr	r3, [r7, #8]
 8004818:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8004822:	f000 fb89 	bl	8004f38 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	699a      	ldr	r2, [r3, #24]
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f022 020c 	bic.w	r2, r2, #12
 8004834:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	6999      	ldr	r1, [r3, #24]
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	689a      	ldr	r2, [r3, #8]
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	430a      	orrs	r2, r1
 8004846:	619a      	str	r2, [r3, #24]
 8004848:	e060      	b.n	800490c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2b04      	cmp	r3, #4
 800484e:	d11c      	bne.n	800488a <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8004860:	f000 fbd2 	bl	8005008 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	699a      	ldr	r2, [r3, #24]
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8004872:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	6999      	ldr	r1, [r3, #24]
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	689b      	ldr	r3, [r3, #8]
 800487e:	021a      	lsls	r2, r3, #8
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	430a      	orrs	r2, r1
 8004886:	619a      	str	r2, [r3, #24]
 8004888:	e040      	b.n	800490c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2b08      	cmp	r3, #8
 800488e:	d11b      	bne.n	80048c8 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004894:	68bb      	ldr	r3, [r7, #8]
 8004896:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004898:	68bb      	ldr	r3, [r7, #8]
 800489a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80048a0:	f000 fbef 	bl	8005082 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	69da      	ldr	r2, [r3, #28]
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f022 020c 	bic.w	r2, r2, #12
 80048b2:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	69d9      	ldr	r1, [r3, #28]
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	689a      	ldr	r2, [r3, #8]
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	430a      	orrs	r2, r1
 80048c4:	61da      	str	r2, [r3, #28]
 80048c6:	e021      	b.n	800490c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2b0c      	cmp	r3, #12
 80048cc:	d11c      	bne.n	8004908 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80048d6:	68bb      	ldr	r3, [r7, #8]
 80048d8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80048de:	f000 fc0c 	bl	80050fa <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	69da      	ldr	r2, [r3, #28]
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80048f0:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	69d9      	ldr	r1, [r3, #28]
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	689b      	ldr	r3, [r3, #8]
 80048fc:	021a      	lsls	r2, r3, #8
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	430a      	orrs	r2, r1
 8004904:	61da      	str	r2, [r3, #28]
 8004906:	e001      	b.n	800490c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8004908:	2301      	movs	r3, #1
 800490a:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	2200      	movs	r2, #0
 8004910:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004914:	7dfb      	ldrb	r3, [r7, #23]
}
 8004916:	4618      	mov	r0, r3
 8004918:	3718      	adds	r7, #24
 800491a:	46bd      	mov	sp, r7
 800491c:	bd80      	pop	{r7, pc}
	...

08004920 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b086      	sub	sp, #24
 8004924:	af00      	add	r7, sp, #0
 8004926:	60f8      	str	r0, [r7, #12]
 8004928:	60b9      	str	r1, [r7, #8]
 800492a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800492c:	2300      	movs	r3, #0
 800492e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004936:	2b01      	cmp	r3, #1
 8004938:	d101      	bne.n	800493e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800493a:	2302      	movs	r3, #2
 800493c:	e0ae      	b.n	8004a9c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	2201      	movs	r2, #1
 8004942:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2b0c      	cmp	r3, #12
 800494a:	f200 809f 	bhi.w	8004a8c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800494e:	a201      	add	r2, pc, #4	@ (adr r2, 8004954 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004950:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004954:	08004989 	.word	0x08004989
 8004958:	08004a8d 	.word	0x08004a8d
 800495c:	08004a8d 	.word	0x08004a8d
 8004960:	08004a8d 	.word	0x08004a8d
 8004964:	080049c9 	.word	0x080049c9
 8004968:	08004a8d 	.word	0x08004a8d
 800496c:	08004a8d 	.word	0x08004a8d
 8004970:	08004a8d 	.word	0x08004a8d
 8004974:	08004a0b 	.word	0x08004a0b
 8004978:	08004a8d 	.word	0x08004a8d
 800497c:	08004a8d 	.word	0x08004a8d
 8004980:	08004a8d 	.word	0x08004a8d
 8004984:	08004a4b 	.word	0x08004a4b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	68b9      	ldr	r1, [r7, #8]
 800498e:	4618      	mov	r0, r3
 8004990:	f000 f946 	bl	8004c20 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	699a      	ldr	r2, [r3, #24]
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f042 0208 	orr.w	r2, r2, #8
 80049a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	699a      	ldr	r2, [r3, #24]
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f022 0204 	bic.w	r2, r2, #4
 80049b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	6999      	ldr	r1, [r3, #24]
 80049ba:	68bb      	ldr	r3, [r7, #8]
 80049bc:	691a      	ldr	r2, [r3, #16]
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	430a      	orrs	r2, r1
 80049c4:	619a      	str	r2, [r3, #24]
      break;
 80049c6:	e064      	b.n	8004a92 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	68b9      	ldr	r1, [r7, #8]
 80049ce:	4618      	mov	r0, r3
 80049d0:	f000 f98c 	bl	8004cec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	699a      	ldr	r2, [r3, #24]
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80049e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	699a      	ldr	r2, [r3, #24]
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80049f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	6999      	ldr	r1, [r3, #24]
 80049fa:	68bb      	ldr	r3, [r7, #8]
 80049fc:	691b      	ldr	r3, [r3, #16]
 80049fe:	021a      	lsls	r2, r3, #8
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	430a      	orrs	r2, r1
 8004a06:	619a      	str	r2, [r3, #24]
      break;
 8004a08:	e043      	b.n	8004a92 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	68b9      	ldr	r1, [r7, #8]
 8004a10:	4618      	mov	r0, r3
 8004a12:	f000 f9d7 	bl	8004dc4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	69da      	ldr	r2, [r3, #28]
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f042 0208 	orr.w	r2, r2, #8
 8004a24:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	69da      	ldr	r2, [r3, #28]
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f022 0204 	bic.w	r2, r2, #4
 8004a34:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	69d9      	ldr	r1, [r3, #28]
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	691a      	ldr	r2, [r3, #16]
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	430a      	orrs	r2, r1
 8004a46:	61da      	str	r2, [r3, #28]
      break;
 8004a48:	e023      	b.n	8004a92 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	68b9      	ldr	r1, [r7, #8]
 8004a50:	4618      	mov	r0, r3
 8004a52:	f000 fa21 	bl	8004e98 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	69da      	ldr	r2, [r3, #28]
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004a64:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	69da      	ldr	r2, [r3, #28]
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004a74:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	69d9      	ldr	r1, [r3, #28]
 8004a7c:	68bb      	ldr	r3, [r7, #8]
 8004a7e:	691b      	ldr	r3, [r3, #16]
 8004a80:	021a      	lsls	r2, r3, #8
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	430a      	orrs	r2, r1
 8004a88:	61da      	str	r2, [r3, #28]
      break;
 8004a8a:	e002      	b.n	8004a92 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	75fb      	strb	r3, [r7, #23]
      break;
 8004a90:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	2200      	movs	r2, #0
 8004a96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004a9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	3718      	adds	r7, #24
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	bd80      	pop	{r7, pc}

08004aa4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b083      	sub	sp, #12
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004aac:	bf00      	nop
 8004aae:	370c      	adds	r7, #12
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab6:	4770      	bx	lr

08004ab8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	b083      	sub	sp, #12
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004ac0:	bf00      	nop
 8004ac2:	370c      	adds	r7, #12
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aca:	4770      	bx	lr

08004acc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004acc:	b480      	push	{r7}
 8004ace:	b083      	sub	sp, #12
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004ad4:	bf00      	nop
 8004ad6:	370c      	adds	r7, #12
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ade:	4770      	bx	lr

08004ae0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	b083      	sub	sp, #12
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004ae8:	bf00      	nop
 8004aea:	370c      	adds	r7, #12
 8004aec:	46bd      	mov	sp, r7
 8004aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af2:	4770      	bx	lr

08004af4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004af4:	b480      	push	{r7}
 8004af6:	b083      	sub	sp, #12
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004afc:	bf00      	nop
 8004afe:	370c      	adds	r7, #12
 8004b00:	46bd      	mov	sp, r7
 8004b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b06:	4770      	bx	lr

08004b08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	b085      	sub	sp, #20
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
 8004b10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	4a3a      	ldr	r2, [pc, #232]	@ (8004c04 <TIM_Base_SetConfig+0xfc>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d00f      	beq.n	8004b40 <TIM_Base_SetConfig+0x38>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b26:	d00b      	beq.n	8004b40 <TIM_Base_SetConfig+0x38>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	4a37      	ldr	r2, [pc, #220]	@ (8004c08 <TIM_Base_SetConfig+0x100>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d007      	beq.n	8004b40 <TIM_Base_SetConfig+0x38>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	4a36      	ldr	r2, [pc, #216]	@ (8004c0c <TIM_Base_SetConfig+0x104>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d003      	beq.n	8004b40 <TIM_Base_SetConfig+0x38>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	4a35      	ldr	r2, [pc, #212]	@ (8004c10 <TIM_Base_SetConfig+0x108>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d108      	bne.n	8004b52 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b46:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	68fa      	ldr	r2, [r7, #12]
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	4a2b      	ldr	r2, [pc, #172]	@ (8004c04 <TIM_Base_SetConfig+0xfc>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d01b      	beq.n	8004b92 <TIM_Base_SetConfig+0x8a>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b60:	d017      	beq.n	8004b92 <TIM_Base_SetConfig+0x8a>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	4a28      	ldr	r2, [pc, #160]	@ (8004c08 <TIM_Base_SetConfig+0x100>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d013      	beq.n	8004b92 <TIM_Base_SetConfig+0x8a>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	4a27      	ldr	r2, [pc, #156]	@ (8004c0c <TIM_Base_SetConfig+0x104>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d00f      	beq.n	8004b92 <TIM_Base_SetConfig+0x8a>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	4a26      	ldr	r2, [pc, #152]	@ (8004c10 <TIM_Base_SetConfig+0x108>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d00b      	beq.n	8004b92 <TIM_Base_SetConfig+0x8a>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	4a25      	ldr	r2, [pc, #148]	@ (8004c14 <TIM_Base_SetConfig+0x10c>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d007      	beq.n	8004b92 <TIM_Base_SetConfig+0x8a>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	4a24      	ldr	r2, [pc, #144]	@ (8004c18 <TIM_Base_SetConfig+0x110>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d003      	beq.n	8004b92 <TIM_Base_SetConfig+0x8a>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	4a23      	ldr	r2, [pc, #140]	@ (8004c1c <TIM_Base_SetConfig+0x114>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d108      	bne.n	8004ba4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b98:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	68db      	ldr	r3, [r3, #12]
 8004b9e:	68fa      	ldr	r2, [r7, #12]
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	695b      	ldr	r3, [r3, #20]
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	68fa      	ldr	r2, [r7, #12]
 8004bb6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	689a      	ldr	r2, [r3, #8]
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	681a      	ldr	r2, [r3, #0]
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	4a0e      	ldr	r2, [pc, #56]	@ (8004c04 <TIM_Base_SetConfig+0xfc>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d103      	bne.n	8004bd8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	691a      	ldr	r2, [r3, #16]
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2201      	movs	r2, #1
 8004bdc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	691b      	ldr	r3, [r3, #16]
 8004be2:	f003 0301 	and.w	r3, r3, #1
 8004be6:	2b01      	cmp	r3, #1
 8004be8:	d105      	bne.n	8004bf6 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	691b      	ldr	r3, [r3, #16]
 8004bee:	f023 0201 	bic.w	r2, r3, #1
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	611a      	str	r2, [r3, #16]
  }
}
 8004bf6:	bf00      	nop
 8004bf8:	3714      	adds	r7, #20
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c00:	4770      	bx	lr
 8004c02:	bf00      	nop
 8004c04:	40010000 	.word	0x40010000
 8004c08:	40000400 	.word	0x40000400
 8004c0c:	40000800 	.word	0x40000800
 8004c10:	40000c00 	.word	0x40000c00
 8004c14:	40014000 	.word	0x40014000
 8004c18:	40014400 	.word	0x40014400
 8004c1c:	40014800 	.word	0x40014800

08004c20 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004c20:	b480      	push	{r7}
 8004c22:	b087      	sub	sp, #28
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
 8004c28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6a1b      	ldr	r3, [r3, #32]
 8004c2e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6a1b      	ldr	r3, [r3, #32]
 8004c34:	f023 0201 	bic.w	r2, r3, #1
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	699b      	ldr	r3, [r3, #24]
 8004c46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	f023 0303 	bic.w	r3, r3, #3
 8004c56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	68fa      	ldr	r2, [r7, #12]
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004c62:	697b      	ldr	r3, [r7, #20]
 8004c64:	f023 0302 	bic.w	r3, r3, #2
 8004c68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	689b      	ldr	r3, [r3, #8]
 8004c6e:	697a      	ldr	r2, [r7, #20]
 8004c70:	4313      	orrs	r3, r2
 8004c72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	4a1c      	ldr	r2, [pc, #112]	@ (8004ce8 <TIM_OC1_SetConfig+0xc8>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d10c      	bne.n	8004c96 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004c7c:	697b      	ldr	r3, [r7, #20]
 8004c7e:	f023 0308 	bic.w	r3, r3, #8
 8004c82:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	68db      	ldr	r3, [r3, #12]
 8004c88:	697a      	ldr	r2, [r7, #20]
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004c8e:	697b      	ldr	r3, [r7, #20]
 8004c90:	f023 0304 	bic.w	r3, r3, #4
 8004c94:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	4a13      	ldr	r2, [pc, #76]	@ (8004ce8 <TIM_OC1_SetConfig+0xc8>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d111      	bne.n	8004cc2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004c9e:	693b      	ldr	r3, [r7, #16]
 8004ca0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004ca4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004ca6:	693b      	ldr	r3, [r7, #16]
 8004ca8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004cac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	695b      	ldr	r3, [r3, #20]
 8004cb2:	693a      	ldr	r2, [r7, #16]
 8004cb4:	4313      	orrs	r3, r2
 8004cb6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	699b      	ldr	r3, [r3, #24]
 8004cbc:	693a      	ldr	r2, [r7, #16]
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	693a      	ldr	r2, [r7, #16]
 8004cc6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	68fa      	ldr	r2, [r7, #12]
 8004ccc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	685a      	ldr	r2, [r3, #4]
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	697a      	ldr	r2, [r7, #20]
 8004cda:	621a      	str	r2, [r3, #32]
}
 8004cdc:	bf00      	nop
 8004cde:	371c      	adds	r7, #28
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce6:	4770      	bx	lr
 8004ce8:	40010000 	.word	0x40010000

08004cec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004cec:	b480      	push	{r7}
 8004cee:	b087      	sub	sp, #28
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
 8004cf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6a1b      	ldr	r3, [r3, #32]
 8004cfa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6a1b      	ldr	r3, [r3, #32]
 8004d00:	f023 0210 	bic.w	r2, r3, #16
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	699b      	ldr	r3, [r3, #24]
 8004d12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004d1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d22:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	021b      	lsls	r3, r3, #8
 8004d2a:	68fa      	ldr	r2, [r7, #12]
 8004d2c:	4313      	orrs	r3, r2
 8004d2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004d30:	697b      	ldr	r3, [r7, #20]
 8004d32:	f023 0320 	bic.w	r3, r3, #32
 8004d36:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	689b      	ldr	r3, [r3, #8]
 8004d3c:	011b      	lsls	r3, r3, #4
 8004d3e:	697a      	ldr	r2, [r7, #20]
 8004d40:	4313      	orrs	r3, r2
 8004d42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	4a1e      	ldr	r2, [pc, #120]	@ (8004dc0 <TIM_OC2_SetConfig+0xd4>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d10d      	bne.n	8004d68 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004d4c:	697b      	ldr	r3, [r7, #20]
 8004d4e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004d52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	68db      	ldr	r3, [r3, #12]
 8004d58:	011b      	lsls	r3, r3, #4
 8004d5a:	697a      	ldr	r2, [r7, #20]
 8004d5c:	4313      	orrs	r3, r2
 8004d5e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004d60:	697b      	ldr	r3, [r7, #20]
 8004d62:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004d66:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	4a15      	ldr	r2, [pc, #84]	@ (8004dc0 <TIM_OC2_SetConfig+0xd4>)
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d113      	bne.n	8004d98 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004d70:	693b      	ldr	r3, [r7, #16]
 8004d72:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004d76:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004d78:	693b      	ldr	r3, [r7, #16]
 8004d7a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004d7e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	695b      	ldr	r3, [r3, #20]
 8004d84:	009b      	lsls	r3, r3, #2
 8004d86:	693a      	ldr	r2, [r7, #16]
 8004d88:	4313      	orrs	r3, r2
 8004d8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	699b      	ldr	r3, [r3, #24]
 8004d90:	009b      	lsls	r3, r3, #2
 8004d92:	693a      	ldr	r2, [r7, #16]
 8004d94:	4313      	orrs	r3, r2
 8004d96:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	693a      	ldr	r2, [r7, #16]
 8004d9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	68fa      	ldr	r2, [r7, #12]
 8004da2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	685a      	ldr	r2, [r3, #4]
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	697a      	ldr	r2, [r7, #20]
 8004db0:	621a      	str	r2, [r3, #32]
}
 8004db2:	bf00      	nop
 8004db4:	371c      	adds	r7, #28
 8004db6:	46bd      	mov	sp, r7
 8004db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbc:	4770      	bx	lr
 8004dbe:	bf00      	nop
 8004dc0:	40010000 	.word	0x40010000

08004dc4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	b087      	sub	sp, #28
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
 8004dcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6a1b      	ldr	r3, [r3, #32]
 8004dd2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6a1b      	ldr	r3, [r3, #32]
 8004dd8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	69db      	ldr	r3, [r3, #28]
 8004dea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004df2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	f023 0303 	bic.w	r3, r3, #3
 8004dfa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	68fa      	ldr	r2, [r7, #12]
 8004e02:	4313      	orrs	r3, r2
 8004e04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004e06:	697b      	ldr	r3, [r7, #20]
 8004e08:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004e0c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	689b      	ldr	r3, [r3, #8]
 8004e12:	021b      	lsls	r3, r3, #8
 8004e14:	697a      	ldr	r2, [r7, #20]
 8004e16:	4313      	orrs	r3, r2
 8004e18:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	4a1d      	ldr	r2, [pc, #116]	@ (8004e94 <TIM_OC3_SetConfig+0xd0>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d10d      	bne.n	8004e3e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004e22:	697b      	ldr	r3, [r7, #20]
 8004e24:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004e28:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	68db      	ldr	r3, [r3, #12]
 8004e2e:	021b      	lsls	r3, r3, #8
 8004e30:	697a      	ldr	r2, [r7, #20]
 8004e32:	4313      	orrs	r3, r2
 8004e34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004e36:	697b      	ldr	r3, [r7, #20]
 8004e38:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004e3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	4a14      	ldr	r2, [pc, #80]	@ (8004e94 <TIM_OC3_SetConfig+0xd0>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d113      	bne.n	8004e6e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004e46:	693b      	ldr	r3, [r7, #16]
 8004e48:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004e4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004e4e:	693b      	ldr	r3, [r7, #16]
 8004e50:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004e54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	695b      	ldr	r3, [r3, #20]
 8004e5a:	011b      	lsls	r3, r3, #4
 8004e5c:	693a      	ldr	r2, [r7, #16]
 8004e5e:	4313      	orrs	r3, r2
 8004e60:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	699b      	ldr	r3, [r3, #24]
 8004e66:	011b      	lsls	r3, r3, #4
 8004e68:	693a      	ldr	r2, [r7, #16]
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	693a      	ldr	r2, [r7, #16]
 8004e72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	68fa      	ldr	r2, [r7, #12]
 8004e78:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	685a      	ldr	r2, [r3, #4]
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	697a      	ldr	r2, [r7, #20]
 8004e86:	621a      	str	r2, [r3, #32]
}
 8004e88:	bf00      	nop
 8004e8a:	371c      	adds	r7, #28
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e92:	4770      	bx	lr
 8004e94:	40010000 	.word	0x40010000

08004e98 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e98:	b480      	push	{r7}
 8004e9a:	b087      	sub	sp, #28
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
 8004ea0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6a1b      	ldr	r3, [r3, #32]
 8004ea6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6a1b      	ldr	r3, [r3, #32]
 8004eac:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	69db      	ldr	r3, [r3, #28]
 8004ebe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004ec6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ece:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	021b      	lsls	r3, r3, #8
 8004ed6:	68fa      	ldr	r2, [r7, #12]
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004edc:	693b      	ldr	r3, [r7, #16]
 8004ede:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004ee2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	689b      	ldr	r3, [r3, #8]
 8004ee8:	031b      	lsls	r3, r3, #12
 8004eea:	693a      	ldr	r2, [r7, #16]
 8004eec:	4313      	orrs	r3, r2
 8004eee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	4a10      	ldr	r2, [pc, #64]	@ (8004f34 <TIM_OC4_SetConfig+0x9c>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d109      	bne.n	8004f0c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004ef8:	697b      	ldr	r3, [r7, #20]
 8004efa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004efe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	695b      	ldr	r3, [r3, #20]
 8004f04:	019b      	lsls	r3, r3, #6
 8004f06:	697a      	ldr	r2, [r7, #20]
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	697a      	ldr	r2, [r7, #20]
 8004f10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	68fa      	ldr	r2, [r7, #12]
 8004f16:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	685a      	ldr	r2, [r3, #4]
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	693a      	ldr	r2, [r7, #16]
 8004f24:	621a      	str	r2, [r3, #32]
}
 8004f26:	bf00      	nop
 8004f28:	371c      	adds	r7, #28
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f30:	4770      	bx	lr
 8004f32:	bf00      	nop
 8004f34:	40010000 	.word	0x40010000

08004f38 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004f38:	b480      	push	{r7}
 8004f3a:	b087      	sub	sp, #28
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	60f8      	str	r0, [r7, #12]
 8004f40:	60b9      	str	r1, [r7, #8]
 8004f42:	607a      	str	r2, [r7, #4]
 8004f44:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	6a1b      	ldr	r3, [r3, #32]
 8004f4a:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	6a1b      	ldr	r3, [r3, #32]
 8004f50:	f023 0201 	bic.w	r2, r3, #1
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	699b      	ldr	r3, [r3, #24]
 8004f5c:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	4a24      	ldr	r2, [pc, #144]	@ (8004ff4 <TIM_TI1_SetConfig+0xbc>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d013      	beq.n	8004f8e <TIM_TI1_SetConfig+0x56>
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f6c:	d00f      	beq.n	8004f8e <TIM_TI1_SetConfig+0x56>
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	4a21      	ldr	r2, [pc, #132]	@ (8004ff8 <TIM_TI1_SetConfig+0xc0>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d00b      	beq.n	8004f8e <TIM_TI1_SetConfig+0x56>
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	4a20      	ldr	r2, [pc, #128]	@ (8004ffc <TIM_TI1_SetConfig+0xc4>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d007      	beq.n	8004f8e <TIM_TI1_SetConfig+0x56>
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	4a1f      	ldr	r2, [pc, #124]	@ (8005000 <TIM_TI1_SetConfig+0xc8>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d003      	beq.n	8004f8e <TIM_TI1_SetConfig+0x56>
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	4a1e      	ldr	r2, [pc, #120]	@ (8005004 <TIM_TI1_SetConfig+0xcc>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d101      	bne.n	8004f92 <TIM_TI1_SetConfig+0x5a>
 8004f8e:	2301      	movs	r3, #1
 8004f90:	e000      	b.n	8004f94 <TIM_TI1_SetConfig+0x5c>
 8004f92:	2300      	movs	r3, #0
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d008      	beq.n	8004faa <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004f98:	697b      	ldr	r3, [r7, #20]
 8004f9a:	f023 0303 	bic.w	r3, r3, #3
 8004f9e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004fa0:	697a      	ldr	r2, [r7, #20]
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	617b      	str	r3, [r7, #20]
 8004fa8:	e003      	b.n	8004fb2 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004faa:	697b      	ldr	r3, [r7, #20]
 8004fac:	f043 0301 	orr.w	r3, r3, #1
 8004fb0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004fb2:	697b      	ldr	r3, [r7, #20]
 8004fb4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004fb8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	011b      	lsls	r3, r3, #4
 8004fbe:	b2db      	uxtb	r3, r3
 8004fc0:	697a      	ldr	r2, [r7, #20]
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004fc6:	693b      	ldr	r3, [r7, #16]
 8004fc8:	f023 030a 	bic.w	r3, r3, #10
 8004fcc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004fce:	68bb      	ldr	r3, [r7, #8]
 8004fd0:	f003 030a 	and.w	r3, r3, #10
 8004fd4:	693a      	ldr	r2, [r7, #16]
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	697a      	ldr	r2, [r7, #20]
 8004fde:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	693a      	ldr	r2, [r7, #16]
 8004fe4:	621a      	str	r2, [r3, #32]
}
 8004fe6:	bf00      	nop
 8004fe8:	371c      	adds	r7, #28
 8004fea:	46bd      	mov	sp, r7
 8004fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff0:	4770      	bx	lr
 8004ff2:	bf00      	nop
 8004ff4:	40010000 	.word	0x40010000
 8004ff8:	40000400 	.word	0x40000400
 8004ffc:	40000800 	.word	0x40000800
 8005000:	40000c00 	.word	0x40000c00
 8005004:	40014000 	.word	0x40014000

08005008 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005008:	b480      	push	{r7}
 800500a:	b087      	sub	sp, #28
 800500c:	af00      	add	r7, sp, #0
 800500e:	60f8      	str	r0, [r7, #12]
 8005010:	60b9      	str	r1, [r7, #8]
 8005012:	607a      	str	r2, [r7, #4]
 8005014:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	6a1b      	ldr	r3, [r3, #32]
 800501a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	6a1b      	ldr	r3, [r3, #32]
 8005020:	f023 0210 	bic.w	r2, r3, #16
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	699b      	ldr	r3, [r3, #24]
 800502c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800502e:	693b      	ldr	r3, [r7, #16]
 8005030:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005034:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	021b      	lsls	r3, r3, #8
 800503a:	693a      	ldr	r2, [r7, #16]
 800503c:	4313      	orrs	r3, r2
 800503e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005040:	693b      	ldr	r3, [r7, #16]
 8005042:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005046:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	031b      	lsls	r3, r3, #12
 800504c:	b29b      	uxth	r3, r3
 800504e:	693a      	ldr	r2, [r7, #16]
 8005050:	4313      	orrs	r3, r2
 8005052:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005054:	697b      	ldr	r3, [r7, #20]
 8005056:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800505a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800505c:	68bb      	ldr	r3, [r7, #8]
 800505e:	011b      	lsls	r3, r3, #4
 8005060:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8005064:	697a      	ldr	r2, [r7, #20]
 8005066:	4313      	orrs	r3, r2
 8005068:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	693a      	ldr	r2, [r7, #16]
 800506e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	697a      	ldr	r2, [r7, #20]
 8005074:	621a      	str	r2, [r3, #32]
}
 8005076:	bf00      	nop
 8005078:	371c      	adds	r7, #28
 800507a:	46bd      	mov	sp, r7
 800507c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005080:	4770      	bx	lr

08005082 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005082:	b480      	push	{r7}
 8005084:	b087      	sub	sp, #28
 8005086:	af00      	add	r7, sp, #0
 8005088:	60f8      	str	r0, [r7, #12]
 800508a:	60b9      	str	r1, [r7, #8]
 800508c:	607a      	str	r2, [r7, #4]
 800508e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	6a1b      	ldr	r3, [r3, #32]
 8005094:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	6a1b      	ldr	r3, [r3, #32]
 800509a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	69db      	ldr	r3, [r3, #28]
 80050a6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80050a8:	693b      	ldr	r3, [r7, #16]
 80050aa:	f023 0303 	bic.w	r3, r3, #3
 80050ae:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80050b0:	693a      	ldr	r2, [r7, #16]
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	4313      	orrs	r3, r2
 80050b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80050b8:	693b      	ldr	r3, [r7, #16]
 80050ba:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80050be:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	011b      	lsls	r3, r3, #4
 80050c4:	b2db      	uxtb	r3, r3
 80050c6:	693a      	ldr	r2, [r7, #16]
 80050c8:	4313      	orrs	r3, r2
 80050ca:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80050cc:	697b      	ldr	r3, [r7, #20]
 80050ce:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 80050d2:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	021b      	lsls	r3, r3, #8
 80050d8:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 80050dc:	697a      	ldr	r2, [r7, #20]
 80050de:	4313      	orrs	r3, r2
 80050e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	693a      	ldr	r2, [r7, #16]
 80050e6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	697a      	ldr	r2, [r7, #20]
 80050ec:	621a      	str	r2, [r3, #32]
}
 80050ee:	bf00      	nop
 80050f0:	371c      	adds	r7, #28
 80050f2:	46bd      	mov	sp, r7
 80050f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f8:	4770      	bx	lr

080050fa <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80050fa:	b480      	push	{r7}
 80050fc:	b087      	sub	sp, #28
 80050fe:	af00      	add	r7, sp, #0
 8005100:	60f8      	str	r0, [r7, #12]
 8005102:	60b9      	str	r1, [r7, #8]
 8005104:	607a      	str	r2, [r7, #4]
 8005106:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	6a1b      	ldr	r3, [r3, #32]
 800510c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	6a1b      	ldr	r3, [r3, #32]
 8005112:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	69db      	ldr	r3, [r3, #28]
 800511e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005120:	693b      	ldr	r3, [r7, #16]
 8005122:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005126:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	021b      	lsls	r3, r3, #8
 800512c:	693a      	ldr	r2, [r7, #16]
 800512e:	4313      	orrs	r3, r2
 8005130:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005132:	693b      	ldr	r3, [r7, #16]
 8005134:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005138:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	031b      	lsls	r3, r3, #12
 800513e:	b29b      	uxth	r3, r3
 8005140:	693a      	ldr	r2, [r7, #16]
 8005142:	4313      	orrs	r3, r2
 8005144:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005146:	697b      	ldr	r3, [r7, #20]
 8005148:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 800514c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800514e:	68bb      	ldr	r3, [r7, #8]
 8005150:	031b      	lsls	r3, r3, #12
 8005152:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8005156:	697a      	ldr	r2, [r7, #20]
 8005158:	4313      	orrs	r3, r2
 800515a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	693a      	ldr	r2, [r7, #16]
 8005160:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	697a      	ldr	r2, [r7, #20]
 8005166:	621a      	str	r2, [r3, #32]
}
 8005168:	bf00      	nop
 800516a:	371c      	adds	r7, #28
 800516c:	46bd      	mov	sp, r7
 800516e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005172:	4770      	bx	lr

08005174 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005174:	b480      	push	{r7}
 8005176:	b087      	sub	sp, #28
 8005178:	af00      	add	r7, sp, #0
 800517a:	60f8      	str	r0, [r7, #12]
 800517c:	60b9      	str	r1, [r7, #8]
 800517e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	f003 031f 	and.w	r3, r3, #31
 8005186:	2201      	movs	r2, #1
 8005188:	fa02 f303 	lsl.w	r3, r2, r3
 800518c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	6a1a      	ldr	r2, [r3, #32]
 8005192:	697b      	ldr	r3, [r7, #20]
 8005194:	43db      	mvns	r3, r3
 8005196:	401a      	ands	r2, r3
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	6a1a      	ldr	r2, [r3, #32]
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	f003 031f 	and.w	r3, r3, #31
 80051a6:	6879      	ldr	r1, [r7, #4]
 80051a8:	fa01 f303 	lsl.w	r3, r1, r3
 80051ac:	431a      	orrs	r2, r3
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	621a      	str	r2, [r3, #32]
}
 80051b2:	bf00      	nop
 80051b4:	371c      	adds	r7, #28
 80051b6:	46bd      	mov	sp, r7
 80051b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051bc:	4770      	bx	lr
	...

080051c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80051c0:	b480      	push	{r7}
 80051c2:	b085      	sub	sp, #20
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
 80051c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80051d0:	2b01      	cmp	r3, #1
 80051d2:	d101      	bne.n	80051d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80051d4:	2302      	movs	r3, #2
 80051d6:	e050      	b.n	800527a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2201      	movs	r2, #1
 80051dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2202      	movs	r2, #2
 80051e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	689b      	ldr	r3, [r3, #8]
 80051f6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	68fa      	ldr	r2, [r7, #12]
 8005206:	4313      	orrs	r3, r2
 8005208:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	68fa      	ldr	r2, [r7, #12]
 8005210:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	4a1c      	ldr	r2, [pc, #112]	@ (8005288 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d018      	beq.n	800524e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005224:	d013      	beq.n	800524e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4a18      	ldr	r2, [pc, #96]	@ (800528c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800522c:	4293      	cmp	r3, r2
 800522e:	d00e      	beq.n	800524e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	4a16      	ldr	r2, [pc, #88]	@ (8005290 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d009      	beq.n	800524e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	4a15      	ldr	r2, [pc, #84]	@ (8005294 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d004      	beq.n	800524e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	4a13      	ldr	r2, [pc, #76]	@ (8005298 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d10c      	bne.n	8005268 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800524e:	68bb      	ldr	r3, [r7, #8]
 8005250:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005254:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	685b      	ldr	r3, [r3, #4]
 800525a:	68ba      	ldr	r2, [r7, #8]
 800525c:	4313      	orrs	r3, r2
 800525e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	68ba      	ldr	r2, [r7, #8]
 8005266:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2201      	movs	r2, #1
 800526c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2200      	movs	r2, #0
 8005274:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005278:	2300      	movs	r3, #0
}
 800527a:	4618      	mov	r0, r3
 800527c:	3714      	adds	r7, #20
 800527e:	46bd      	mov	sp, r7
 8005280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005284:	4770      	bx	lr
 8005286:	bf00      	nop
 8005288:	40010000 	.word	0x40010000
 800528c:	40000400 	.word	0x40000400
 8005290:	40000800 	.word	0x40000800
 8005294:	40000c00 	.word	0x40000c00
 8005298:	40014000 	.word	0x40014000

0800529c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800529c:	b480      	push	{r7}
 800529e:	b083      	sub	sp, #12
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80052a4:	bf00      	nop
 80052a6:	370c      	adds	r7, #12
 80052a8:	46bd      	mov	sp, r7
 80052aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ae:	4770      	bx	lr

080052b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80052b0:	b480      	push	{r7}
 80052b2:	b083      	sub	sp, #12
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80052b8:	bf00      	nop
 80052ba:	370c      	adds	r7, #12
 80052bc:	46bd      	mov	sp, r7
 80052be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c2:	4770      	bx	lr

080052c4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b082      	sub	sp, #8
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d101      	bne.n	80052d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80052d2:	2301      	movs	r3, #1
 80052d4:	e042      	b.n	800535c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80052dc:	b2db      	uxtb	r3, r3
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d106      	bne.n	80052f0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2200      	movs	r2, #0
 80052e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80052ea:	6878      	ldr	r0, [r7, #4]
 80052ec:	f7fc fd16 	bl	8001d1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2224      	movs	r2, #36	@ 0x24
 80052f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	68da      	ldr	r2, [r3, #12]
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005306:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005308:	6878      	ldr	r0, [r7, #4]
 800530a:	f000 fd69 	bl	8005de0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	691a      	ldr	r2, [r3, #16]
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800531c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	695a      	ldr	r2, [r3, #20]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800532c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	68da      	ldr	r2, [r3, #12]
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800533c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2200      	movs	r2, #0
 8005342:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2220      	movs	r2, #32
 8005348:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2220      	movs	r2, #32
 8005350:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2200      	movs	r2, #0
 8005358:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800535a:	2300      	movs	r3, #0
}
 800535c:	4618      	mov	r0, r3
 800535e:	3708      	adds	r7, #8
 8005360:	46bd      	mov	sp, r7
 8005362:	bd80      	pop	{r7, pc}

08005364 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b08a      	sub	sp, #40	@ 0x28
 8005368:	af02      	add	r7, sp, #8
 800536a:	60f8      	str	r0, [r7, #12]
 800536c:	60b9      	str	r1, [r7, #8]
 800536e:	603b      	str	r3, [r7, #0]
 8005370:	4613      	mov	r3, r2
 8005372:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005374:	2300      	movs	r3, #0
 8005376:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800537e:	b2db      	uxtb	r3, r3
 8005380:	2b20      	cmp	r3, #32
 8005382:	d175      	bne.n	8005470 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d002      	beq.n	8005390 <HAL_UART_Transmit+0x2c>
 800538a:	88fb      	ldrh	r3, [r7, #6]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d101      	bne.n	8005394 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005390:	2301      	movs	r3, #1
 8005392:	e06e      	b.n	8005472 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	2200      	movs	r2, #0
 8005398:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	2221      	movs	r2, #33	@ 0x21
 800539e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80053a2:	f7fc fe31 	bl	8002008 <HAL_GetTick>
 80053a6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	88fa      	ldrh	r2, [r7, #6]
 80053ac:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	88fa      	ldrh	r2, [r7, #6]
 80053b2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	689b      	ldr	r3, [r3, #8]
 80053b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80053bc:	d108      	bne.n	80053d0 <HAL_UART_Transmit+0x6c>
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	691b      	ldr	r3, [r3, #16]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d104      	bne.n	80053d0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80053c6:	2300      	movs	r3, #0
 80053c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80053ca:	68bb      	ldr	r3, [r7, #8]
 80053cc:	61bb      	str	r3, [r7, #24]
 80053ce:	e003      	b.n	80053d8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80053d0:	68bb      	ldr	r3, [r7, #8]
 80053d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80053d4:	2300      	movs	r3, #0
 80053d6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80053d8:	e02e      	b.n	8005438 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	9300      	str	r3, [sp, #0]
 80053de:	697b      	ldr	r3, [r7, #20]
 80053e0:	2200      	movs	r2, #0
 80053e2:	2180      	movs	r1, #128	@ 0x80
 80053e4:	68f8      	ldr	r0, [r7, #12]
 80053e6:	f000 fb05 	bl	80059f4 <UART_WaitOnFlagUntilTimeout>
 80053ea:	4603      	mov	r3, r0
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d005      	beq.n	80053fc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	2220      	movs	r2, #32
 80053f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80053f8:	2303      	movs	r3, #3
 80053fa:	e03a      	b.n	8005472 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80053fc:	69fb      	ldr	r3, [r7, #28]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d10b      	bne.n	800541a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005402:	69bb      	ldr	r3, [r7, #24]
 8005404:	881b      	ldrh	r3, [r3, #0]
 8005406:	461a      	mov	r2, r3
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005410:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005412:	69bb      	ldr	r3, [r7, #24]
 8005414:	3302      	adds	r3, #2
 8005416:	61bb      	str	r3, [r7, #24]
 8005418:	e007      	b.n	800542a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800541a:	69fb      	ldr	r3, [r7, #28]
 800541c:	781a      	ldrb	r2, [r3, #0]
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005424:	69fb      	ldr	r3, [r7, #28]
 8005426:	3301      	adds	r3, #1
 8005428:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800542e:	b29b      	uxth	r3, r3
 8005430:	3b01      	subs	r3, #1
 8005432:	b29a      	uxth	r2, r3
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800543c:	b29b      	uxth	r3, r3
 800543e:	2b00      	cmp	r3, #0
 8005440:	d1cb      	bne.n	80053da <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	9300      	str	r3, [sp, #0]
 8005446:	697b      	ldr	r3, [r7, #20]
 8005448:	2200      	movs	r2, #0
 800544a:	2140      	movs	r1, #64	@ 0x40
 800544c:	68f8      	ldr	r0, [r7, #12]
 800544e:	f000 fad1 	bl	80059f4 <UART_WaitOnFlagUntilTimeout>
 8005452:	4603      	mov	r3, r0
 8005454:	2b00      	cmp	r3, #0
 8005456:	d005      	beq.n	8005464 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	2220      	movs	r2, #32
 800545c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005460:	2303      	movs	r3, #3
 8005462:	e006      	b.n	8005472 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	2220      	movs	r2, #32
 8005468:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800546c:	2300      	movs	r3, #0
 800546e:	e000      	b.n	8005472 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005470:	2302      	movs	r3, #2
  }
}
 8005472:	4618      	mov	r0, r3
 8005474:	3720      	adds	r7, #32
 8005476:	46bd      	mov	sp, r7
 8005478:	bd80      	pop	{r7, pc}
	...

0800547c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b0ba      	sub	sp, #232	@ 0xe8
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	68db      	ldr	r3, [r3, #12]
 8005494:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	695b      	ldr	r3, [r3, #20]
 800549e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80054a2:	2300      	movs	r3, #0
 80054a4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80054a8:	2300      	movs	r3, #0
 80054aa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80054ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80054b2:	f003 030f 	and.w	r3, r3, #15
 80054b6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80054ba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d10f      	bne.n	80054e2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80054c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80054c6:	f003 0320 	and.w	r3, r3, #32
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d009      	beq.n	80054e2 <HAL_UART_IRQHandler+0x66>
 80054ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80054d2:	f003 0320 	and.w	r3, r3, #32
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d003      	beq.n	80054e2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80054da:	6878      	ldr	r0, [r7, #4]
 80054dc:	f000 fbc2 	bl	8005c64 <UART_Receive_IT>
      return;
 80054e0:	e25b      	b.n	800599a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80054e2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	f000 80de 	beq.w	80056a8 <HAL_UART_IRQHandler+0x22c>
 80054ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80054f0:	f003 0301 	and.w	r3, r3, #1
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d106      	bne.n	8005506 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80054f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80054fc:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005500:	2b00      	cmp	r3, #0
 8005502:	f000 80d1 	beq.w	80056a8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005506:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800550a:	f003 0301 	and.w	r3, r3, #1
 800550e:	2b00      	cmp	r3, #0
 8005510:	d00b      	beq.n	800552a <HAL_UART_IRQHandler+0xae>
 8005512:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005516:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800551a:	2b00      	cmp	r3, #0
 800551c:	d005      	beq.n	800552a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005522:	f043 0201 	orr.w	r2, r3, #1
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800552a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800552e:	f003 0304 	and.w	r3, r3, #4
 8005532:	2b00      	cmp	r3, #0
 8005534:	d00b      	beq.n	800554e <HAL_UART_IRQHandler+0xd2>
 8005536:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800553a:	f003 0301 	and.w	r3, r3, #1
 800553e:	2b00      	cmp	r3, #0
 8005540:	d005      	beq.n	800554e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005546:	f043 0202 	orr.w	r2, r3, #2
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800554e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005552:	f003 0302 	and.w	r3, r3, #2
 8005556:	2b00      	cmp	r3, #0
 8005558:	d00b      	beq.n	8005572 <HAL_UART_IRQHandler+0xf6>
 800555a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800555e:	f003 0301 	and.w	r3, r3, #1
 8005562:	2b00      	cmp	r3, #0
 8005564:	d005      	beq.n	8005572 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800556a:	f043 0204 	orr.w	r2, r3, #4
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005572:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005576:	f003 0308 	and.w	r3, r3, #8
 800557a:	2b00      	cmp	r3, #0
 800557c:	d011      	beq.n	80055a2 <HAL_UART_IRQHandler+0x126>
 800557e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005582:	f003 0320 	and.w	r3, r3, #32
 8005586:	2b00      	cmp	r3, #0
 8005588:	d105      	bne.n	8005596 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800558a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800558e:	f003 0301 	and.w	r3, r3, #1
 8005592:	2b00      	cmp	r3, #0
 8005594:	d005      	beq.n	80055a2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800559a:	f043 0208 	orr.w	r2, r3, #8
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	f000 81f2 	beq.w	8005990 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80055ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80055b0:	f003 0320 	and.w	r3, r3, #32
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d008      	beq.n	80055ca <HAL_UART_IRQHandler+0x14e>
 80055b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80055bc:	f003 0320 	and.w	r3, r3, #32
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d002      	beq.n	80055ca <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80055c4:	6878      	ldr	r0, [r7, #4]
 80055c6:	f000 fb4d 	bl	8005c64 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	695b      	ldr	r3, [r3, #20]
 80055d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055d4:	2b40      	cmp	r3, #64	@ 0x40
 80055d6:	bf0c      	ite	eq
 80055d8:	2301      	moveq	r3, #1
 80055da:	2300      	movne	r3, #0
 80055dc:	b2db      	uxtb	r3, r3
 80055de:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055e6:	f003 0308 	and.w	r3, r3, #8
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d103      	bne.n	80055f6 <HAL_UART_IRQHandler+0x17a>
 80055ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d04f      	beq.n	8005696 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80055f6:	6878      	ldr	r0, [r7, #4]
 80055f8:	f000 fa55 	bl	8005aa6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	695b      	ldr	r3, [r3, #20]
 8005602:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005606:	2b40      	cmp	r3, #64	@ 0x40
 8005608:	d141      	bne.n	800568e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	3314      	adds	r3, #20
 8005610:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005614:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005618:	e853 3f00 	ldrex	r3, [r3]
 800561c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005620:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005624:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005628:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	3314      	adds	r3, #20
 8005632:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005636:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800563a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800563e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005642:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005646:	e841 2300 	strex	r3, r2, [r1]
 800564a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800564e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005652:	2b00      	cmp	r3, #0
 8005654:	d1d9      	bne.n	800560a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800565a:	2b00      	cmp	r3, #0
 800565c:	d013      	beq.n	8005686 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005662:	4a7e      	ldr	r2, [pc, #504]	@ (800585c <HAL_UART_IRQHandler+0x3e0>)
 8005664:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800566a:	4618      	mov	r0, r3
 800566c:	f7fc fe7d 	bl	800236a <HAL_DMA_Abort_IT>
 8005670:	4603      	mov	r3, r0
 8005672:	2b00      	cmp	r3, #0
 8005674:	d016      	beq.n	80056a4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800567a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800567c:	687a      	ldr	r2, [r7, #4]
 800567e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005680:	4610      	mov	r0, r2
 8005682:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005684:	e00e      	b.n	80056a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005686:	6878      	ldr	r0, [r7, #4]
 8005688:	f000 f99e 	bl	80059c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800568c:	e00a      	b.n	80056a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800568e:	6878      	ldr	r0, [r7, #4]
 8005690:	f000 f99a 	bl	80059c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005694:	e006      	b.n	80056a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	f000 f996 	bl	80059c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2200      	movs	r2, #0
 80056a0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80056a2:	e175      	b.n	8005990 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056a4:	bf00      	nop
    return;
 80056a6:	e173      	b.n	8005990 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056ac:	2b01      	cmp	r3, #1
 80056ae:	f040 814f 	bne.w	8005950 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80056b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80056b6:	f003 0310 	and.w	r3, r3, #16
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	f000 8148 	beq.w	8005950 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80056c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80056c4:	f003 0310 	and.w	r3, r3, #16
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	f000 8141 	beq.w	8005950 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80056ce:	2300      	movs	r3, #0
 80056d0:	60bb      	str	r3, [r7, #8]
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	60bb      	str	r3, [r7, #8]
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	685b      	ldr	r3, [r3, #4]
 80056e0:	60bb      	str	r3, [r7, #8]
 80056e2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	695b      	ldr	r3, [r3, #20]
 80056ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056ee:	2b40      	cmp	r3, #64	@ 0x40
 80056f0:	f040 80b6 	bne.w	8005860 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	685b      	ldr	r3, [r3, #4]
 80056fc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005700:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005704:	2b00      	cmp	r3, #0
 8005706:	f000 8145 	beq.w	8005994 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800570e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005712:	429a      	cmp	r2, r3
 8005714:	f080 813e 	bcs.w	8005994 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800571e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005724:	69db      	ldr	r3, [r3, #28]
 8005726:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800572a:	f000 8088 	beq.w	800583e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	330c      	adds	r3, #12
 8005734:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005738:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800573c:	e853 3f00 	ldrex	r3, [r3]
 8005740:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005744:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005748:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800574c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	330c      	adds	r3, #12
 8005756:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800575a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800575e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005762:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005766:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800576a:	e841 2300 	strex	r3, r2, [r1]
 800576e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005772:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005776:	2b00      	cmp	r3, #0
 8005778:	d1d9      	bne.n	800572e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	3314      	adds	r3, #20
 8005780:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005782:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005784:	e853 3f00 	ldrex	r3, [r3]
 8005788:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800578a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800578c:	f023 0301 	bic.w	r3, r3, #1
 8005790:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	3314      	adds	r3, #20
 800579a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800579e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80057a2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057a4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80057a6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80057aa:	e841 2300 	strex	r3, r2, [r1]
 80057ae:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80057b0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d1e1      	bne.n	800577a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	3314      	adds	r3, #20
 80057bc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057be:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80057c0:	e853 3f00 	ldrex	r3, [r3]
 80057c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80057c6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80057c8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80057cc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	3314      	adds	r3, #20
 80057d6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80057da:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80057dc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057de:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80057e0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80057e2:	e841 2300 	strex	r3, r2, [r1]
 80057e6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80057e8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d1e3      	bne.n	80057b6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2220      	movs	r2, #32
 80057f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2200      	movs	r2, #0
 80057fa:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	330c      	adds	r3, #12
 8005802:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005804:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005806:	e853 3f00 	ldrex	r3, [r3]
 800580a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800580c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800580e:	f023 0310 	bic.w	r3, r3, #16
 8005812:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	330c      	adds	r3, #12
 800581c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005820:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005822:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005824:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005826:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005828:	e841 2300 	strex	r3, r2, [r1]
 800582c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800582e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005830:	2b00      	cmp	r3, #0
 8005832:	d1e3      	bne.n	80057fc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005838:	4618      	mov	r0, r3
 800583a:	f7fc fd26 	bl	800228a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2202      	movs	r2, #2
 8005842:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800584c:	b29b      	uxth	r3, r3
 800584e:	1ad3      	subs	r3, r2, r3
 8005850:	b29b      	uxth	r3, r3
 8005852:	4619      	mov	r1, r3
 8005854:	6878      	ldr	r0, [r7, #4]
 8005856:	f000 f8c1 	bl	80059dc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800585a:	e09b      	b.n	8005994 <HAL_UART_IRQHandler+0x518>
 800585c:	08005b6d 	.word	0x08005b6d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005868:	b29b      	uxth	r3, r3
 800586a:	1ad3      	subs	r3, r2, r3
 800586c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005874:	b29b      	uxth	r3, r3
 8005876:	2b00      	cmp	r3, #0
 8005878:	f000 808e 	beq.w	8005998 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800587c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005880:	2b00      	cmp	r3, #0
 8005882:	f000 8089 	beq.w	8005998 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	330c      	adds	r3, #12
 800588c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800588e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005890:	e853 3f00 	ldrex	r3, [r3]
 8005894:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005896:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005898:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800589c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	330c      	adds	r3, #12
 80058a6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80058aa:	647a      	str	r2, [r7, #68]	@ 0x44
 80058ac:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058ae:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80058b0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80058b2:	e841 2300 	strex	r3, r2, [r1]
 80058b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80058b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d1e3      	bne.n	8005886 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	3314      	adds	r3, #20
 80058c4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058c8:	e853 3f00 	ldrex	r3, [r3]
 80058cc:	623b      	str	r3, [r7, #32]
   return(result);
 80058ce:	6a3b      	ldr	r3, [r7, #32]
 80058d0:	f023 0301 	bic.w	r3, r3, #1
 80058d4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	3314      	adds	r3, #20
 80058de:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80058e2:	633a      	str	r2, [r7, #48]	@ 0x30
 80058e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058e6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80058e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80058ea:	e841 2300 	strex	r3, r2, [r1]
 80058ee:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80058f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d1e3      	bne.n	80058be <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2220      	movs	r2, #32
 80058fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2200      	movs	r2, #0
 8005902:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	330c      	adds	r3, #12
 800590a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800590c:	693b      	ldr	r3, [r7, #16]
 800590e:	e853 3f00 	ldrex	r3, [r3]
 8005912:	60fb      	str	r3, [r7, #12]
   return(result);
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	f023 0310 	bic.w	r3, r3, #16
 800591a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	330c      	adds	r3, #12
 8005924:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005928:	61fa      	str	r2, [r7, #28]
 800592a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800592c:	69b9      	ldr	r1, [r7, #24]
 800592e:	69fa      	ldr	r2, [r7, #28]
 8005930:	e841 2300 	strex	r3, r2, [r1]
 8005934:	617b      	str	r3, [r7, #20]
   return(result);
 8005936:	697b      	ldr	r3, [r7, #20]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d1e3      	bne.n	8005904 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2202      	movs	r2, #2
 8005940:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005942:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005946:	4619      	mov	r1, r3
 8005948:	6878      	ldr	r0, [r7, #4]
 800594a:	f000 f847 	bl	80059dc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800594e:	e023      	b.n	8005998 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005950:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005954:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005958:	2b00      	cmp	r3, #0
 800595a:	d009      	beq.n	8005970 <HAL_UART_IRQHandler+0x4f4>
 800595c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005960:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005964:	2b00      	cmp	r3, #0
 8005966:	d003      	beq.n	8005970 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005968:	6878      	ldr	r0, [r7, #4]
 800596a:	f000 f913 	bl	8005b94 <UART_Transmit_IT>
    return;
 800596e:	e014      	b.n	800599a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005970:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005974:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005978:	2b00      	cmp	r3, #0
 800597a:	d00e      	beq.n	800599a <HAL_UART_IRQHandler+0x51e>
 800597c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005980:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005984:	2b00      	cmp	r3, #0
 8005986:	d008      	beq.n	800599a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005988:	6878      	ldr	r0, [r7, #4]
 800598a:	f000 f953 	bl	8005c34 <UART_EndTransmit_IT>
    return;
 800598e:	e004      	b.n	800599a <HAL_UART_IRQHandler+0x51e>
    return;
 8005990:	bf00      	nop
 8005992:	e002      	b.n	800599a <HAL_UART_IRQHandler+0x51e>
      return;
 8005994:	bf00      	nop
 8005996:	e000      	b.n	800599a <HAL_UART_IRQHandler+0x51e>
      return;
 8005998:	bf00      	nop
  }
}
 800599a:	37e8      	adds	r7, #232	@ 0xe8
 800599c:	46bd      	mov	sp, r7
 800599e:	bd80      	pop	{r7, pc}

080059a0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80059a0:	b480      	push	{r7}
 80059a2:	b083      	sub	sp, #12
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80059a8:	bf00      	nop
 80059aa:	370c      	adds	r7, #12
 80059ac:	46bd      	mov	sp, r7
 80059ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b2:	4770      	bx	lr

080059b4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80059b4:	b480      	push	{r7}
 80059b6:	b083      	sub	sp, #12
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80059bc:	bf00      	nop
 80059be:	370c      	adds	r7, #12
 80059c0:	46bd      	mov	sp, r7
 80059c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c6:	4770      	bx	lr

080059c8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80059c8:	b480      	push	{r7}
 80059ca:	b083      	sub	sp, #12
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80059d0:	bf00      	nop
 80059d2:	370c      	adds	r7, #12
 80059d4:	46bd      	mov	sp, r7
 80059d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059da:	4770      	bx	lr

080059dc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80059dc:	b480      	push	{r7}
 80059de:	b083      	sub	sp, #12
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
 80059e4:	460b      	mov	r3, r1
 80059e6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80059e8:	bf00      	nop
 80059ea:	370c      	adds	r7, #12
 80059ec:	46bd      	mov	sp, r7
 80059ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f2:	4770      	bx	lr

080059f4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b086      	sub	sp, #24
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	60f8      	str	r0, [r7, #12]
 80059fc:	60b9      	str	r1, [r7, #8]
 80059fe:	603b      	str	r3, [r7, #0]
 8005a00:	4613      	mov	r3, r2
 8005a02:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a04:	e03b      	b.n	8005a7e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a06:	6a3b      	ldr	r3, [r7, #32]
 8005a08:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005a0c:	d037      	beq.n	8005a7e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a0e:	f7fc fafb 	bl	8002008 <HAL_GetTick>
 8005a12:	4602      	mov	r2, r0
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	1ad3      	subs	r3, r2, r3
 8005a18:	6a3a      	ldr	r2, [r7, #32]
 8005a1a:	429a      	cmp	r2, r3
 8005a1c:	d302      	bcc.n	8005a24 <UART_WaitOnFlagUntilTimeout+0x30>
 8005a1e:	6a3b      	ldr	r3, [r7, #32]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d101      	bne.n	8005a28 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005a24:	2303      	movs	r3, #3
 8005a26:	e03a      	b.n	8005a9e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	68db      	ldr	r3, [r3, #12]
 8005a2e:	f003 0304 	and.w	r3, r3, #4
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d023      	beq.n	8005a7e <UART_WaitOnFlagUntilTimeout+0x8a>
 8005a36:	68bb      	ldr	r3, [r7, #8]
 8005a38:	2b80      	cmp	r3, #128	@ 0x80
 8005a3a:	d020      	beq.n	8005a7e <UART_WaitOnFlagUntilTimeout+0x8a>
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	2b40      	cmp	r3, #64	@ 0x40
 8005a40:	d01d      	beq.n	8005a7e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f003 0308 	and.w	r3, r3, #8
 8005a4c:	2b08      	cmp	r3, #8
 8005a4e:	d116      	bne.n	8005a7e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005a50:	2300      	movs	r3, #0
 8005a52:	617b      	str	r3, [r7, #20]
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	617b      	str	r3, [r7, #20]
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	685b      	ldr	r3, [r3, #4]
 8005a62:	617b      	str	r3, [r7, #20]
 8005a64:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005a66:	68f8      	ldr	r0, [r7, #12]
 8005a68:	f000 f81d 	bl	8005aa6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	2208      	movs	r2, #8
 8005a70:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	2200      	movs	r2, #0
 8005a76:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	e00f      	b.n	8005a9e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	681a      	ldr	r2, [r3, #0]
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	4013      	ands	r3, r2
 8005a88:	68ba      	ldr	r2, [r7, #8]
 8005a8a:	429a      	cmp	r2, r3
 8005a8c:	bf0c      	ite	eq
 8005a8e:	2301      	moveq	r3, #1
 8005a90:	2300      	movne	r3, #0
 8005a92:	b2db      	uxtb	r3, r3
 8005a94:	461a      	mov	r2, r3
 8005a96:	79fb      	ldrb	r3, [r7, #7]
 8005a98:	429a      	cmp	r2, r3
 8005a9a:	d0b4      	beq.n	8005a06 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005a9c:	2300      	movs	r3, #0
}
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	3718      	adds	r7, #24
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	bd80      	pop	{r7, pc}

08005aa6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005aa6:	b480      	push	{r7}
 8005aa8:	b095      	sub	sp, #84	@ 0x54
 8005aaa:	af00      	add	r7, sp, #0
 8005aac:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	330c      	adds	r3, #12
 8005ab4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ab6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ab8:	e853 3f00 	ldrex	r3, [r3]
 8005abc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005abe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ac0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005ac4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	330c      	adds	r3, #12
 8005acc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005ace:	643a      	str	r2, [r7, #64]	@ 0x40
 8005ad0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ad2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005ad4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005ad6:	e841 2300 	strex	r3, r2, [r1]
 8005ada:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005adc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d1e5      	bne.n	8005aae <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	3314      	adds	r3, #20
 8005ae8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aea:	6a3b      	ldr	r3, [r7, #32]
 8005aec:	e853 3f00 	ldrex	r3, [r3]
 8005af0:	61fb      	str	r3, [r7, #28]
   return(result);
 8005af2:	69fb      	ldr	r3, [r7, #28]
 8005af4:	f023 0301 	bic.w	r3, r3, #1
 8005af8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	3314      	adds	r3, #20
 8005b00:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005b02:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005b04:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b06:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005b08:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005b0a:	e841 2300 	strex	r3, r2, [r1]
 8005b0e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005b10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d1e5      	bne.n	8005ae2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b1a:	2b01      	cmp	r3, #1
 8005b1c:	d119      	bne.n	8005b52 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	330c      	adds	r3, #12
 8005b24:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	e853 3f00 	ldrex	r3, [r3]
 8005b2c:	60bb      	str	r3, [r7, #8]
   return(result);
 8005b2e:	68bb      	ldr	r3, [r7, #8]
 8005b30:	f023 0310 	bic.w	r3, r3, #16
 8005b34:	647b      	str	r3, [r7, #68]	@ 0x44
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	330c      	adds	r3, #12
 8005b3c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005b3e:	61ba      	str	r2, [r7, #24]
 8005b40:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b42:	6979      	ldr	r1, [r7, #20]
 8005b44:	69ba      	ldr	r2, [r7, #24]
 8005b46:	e841 2300 	strex	r3, r2, [r1]
 8005b4a:	613b      	str	r3, [r7, #16]
   return(result);
 8005b4c:	693b      	ldr	r3, [r7, #16]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d1e5      	bne.n	8005b1e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2220      	movs	r2, #32
 8005b56:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005b60:	bf00      	nop
 8005b62:	3754      	adds	r7, #84	@ 0x54
 8005b64:	46bd      	mov	sp, r7
 8005b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6a:	4770      	bx	lr

08005b6c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b084      	sub	sp, #16
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b78:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	2200      	movs	r2, #0
 8005b84:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005b86:	68f8      	ldr	r0, [r7, #12]
 8005b88:	f7ff ff1e 	bl	80059c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005b8c:	bf00      	nop
 8005b8e:	3710      	adds	r7, #16
 8005b90:	46bd      	mov	sp, r7
 8005b92:	bd80      	pop	{r7, pc}

08005b94 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005b94:	b480      	push	{r7}
 8005b96:	b085      	sub	sp, #20
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005ba2:	b2db      	uxtb	r3, r3
 8005ba4:	2b21      	cmp	r3, #33	@ 0x21
 8005ba6:	d13e      	bne.n	8005c26 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	689b      	ldr	r3, [r3, #8]
 8005bac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005bb0:	d114      	bne.n	8005bdc <UART_Transmit_IT+0x48>
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	691b      	ldr	r3, [r3, #16]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d110      	bne.n	8005bdc <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6a1b      	ldr	r3, [r3, #32]
 8005bbe:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	881b      	ldrh	r3, [r3, #0]
 8005bc4:	461a      	mov	r2, r3
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005bce:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6a1b      	ldr	r3, [r3, #32]
 8005bd4:	1c9a      	adds	r2, r3, #2
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	621a      	str	r2, [r3, #32]
 8005bda:	e008      	b.n	8005bee <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6a1b      	ldr	r3, [r3, #32]
 8005be0:	1c59      	adds	r1, r3, #1
 8005be2:	687a      	ldr	r2, [r7, #4]
 8005be4:	6211      	str	r1, [r2, #32]
 8005be6:	781a      	ldrb	r2, [r3, #0]
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005bf2:	b29b      	uxth	r3, r3
 8005bf4:	3b01      	subs	r3, #1
 8005bf6:	b29b      	uxth	r3, r3
 8005bf8:	687a      	ldr	r2, [r7, #4]
 8005bfa:	4619      	mov	r1, r3
 8005bfc:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d10f      	bne.n	8005c22 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	68da      	ldr	r2, [r3, #12]
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005c10:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	68da      	ldr	r2, [r3, #12]
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005c20:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005c22:	2300      	movs	r3, #0
 8005c24:	e000      	b.n	8005c28 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005c26:	2302      	movs	r3, #2
  }
}
 8005c28:	4618      	mov	r0, r3
 8005c2a:	3714      	adds	r7, #20
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c32:	4770      	bx	lr

08005c34 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b082      	sub	sp, #8
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	68da      	ldr	r2, [r3, #12]
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005c4a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2220      	movs	r2, #32
 8005c50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005c54:	6878      	ldr	r0, [r7, #4]
 8005c56:	f7ff fea3 	bl	80059a0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005c5a:	2300      	movs	r3, #0
}
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	3708      	adds	r7, #8
 8005c60:	46bd      	mov	sp, r7
 8005c62:	bd80      	pop	{r7, pc}

08005c64 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b08c      	sub	sp, #48	@ 0x30
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005c72:	b2db      	uxtb	r3, r3
 8005c74:	2b22      	cmp	r3, #34	@ 0x22
 8005c76:	f040 80ae 	bne.w	8005dd6 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	689b      	ldr	r3, [r3, #8]
 8005c7e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c82:	d117      	bne.n	8005cb4 <UART_Receive_IT+0x50>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	691b      	ldr	r3, [r3, #16]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d113      	bne.n	8005cb4 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c94:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	685b      	ldr	r3, [r3, #4]
 8005c9c:	b29b      	uxth	r3, r3
 8005c9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ca2:	b29a      	uxth	r2, r3
 8005ca4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ca6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cac:	1c9a      	adds	r2, r3, #2
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	629a      	str	r2, [r3, #40]	@ 0x28
 8005cb2:	e026      	b.n	8005d02 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005cba:	2300      	movs	r3, #0
 8005cbc:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	689b      	ldr	r3, [r3, #8]
 8005cc2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005cc6:	d007      	beq.n	8005cd8 <UART_Receive_IT+0x74>
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	689b      	ldr	r3, [r3, #8]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d10a      	bne.n	8005ce6 <UART_Receive_IT+0x82>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	691b      	ldr	r3, [r3, #16]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d106      	bne.n	8005ce6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	685b      	ldr	r3, [r3, #4]
 8005cde:	b2da      	uxtb	r2, r3
 8005ce0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ce2:	701a      	strb	r2, [r3, #0]
 8005ce4:	e008      	b.n	8005cf8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	685b      	ldr	r3, [r3, #4]
 8005cec:	b2db      	uxtb	r3, r3
 8005cee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005cf2:	b2da      	uxtb	r2, r3
 8005cf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cf6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cfc:	1c5a      	adds	r2, r3, #1
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005d06:	b29b      	uxth	r3, r3
 8005d08:	3b01      	subs	r3, #1
 8005d0a:	b29b      	uxth	r3, r3
 8005d0c:	687a      	ldr	r2, [r7, #4]
 8005d0e:	4619      	mov	r1, r3
 8005d10:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d15d      	bne.n	8005dd2 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	68da      	ldr	r2, [r3, #12]
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f022 0220 	bic.w	r2, r2, #32
 8005d24:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	68da      	ldr	r2, [r3, #12]
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005d34:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	695a      	ldr	r2, [r3, #20]
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f022 0201 	bic.w	r2, r2, #1
 8005d44:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2220      	movs	r2, #32
 8005d4a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2200      	movs	r2, #0
 8005d52:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d58:	2b01      	cmp	r3, #1
 8005d5a:	d135      	bne.n	8005dc8 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2200      	movs	r2, #0
 8005d60:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	330c      	adds	r3, #12
 8005d68:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d6a:	697b      	ldr	r3, [r7, #20]
 8005d6c:	e853 3f00 	ldrex	r3, [r3]
 8005d70:	613b      	str	r3, [r7, #16]
   return(result);
 8005d72:	693b      	ldr	r3, [r7, #16]
 8005d74:	f023 0310 	bic.w	r3, r3, #16
 8005d78:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	330c      	adds	r3, #12
 8005d80:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d82:	623a      	str	r2, [r7, #32]
 8005d84:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d86:	69f9      	ldr	r1, [r7, #28]
 8005d88:	6a3a      	ldr	r2, [r7, #32]
 8005d8a:	e841 2300 	strex	r3, r2, [r1]
 8005d8e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005d90:	69bb      	ldr	r3, [r7, #24]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d1e5      	bne.n	8005d62 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f003 0310 	and.w	r3, r3, #16
 8005da0:	2b10      	cmp	r3, #16
 8005da2:	d10a      	bne.n	8005dba <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005da4:	2300      	movs	r3, #0
 8005da6:	60fb      	str	r3, [r7, #12]
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	60fb      	str	r3, [r7, #12]
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	685b      	ldr	r3, [r3, #4]
 8005db6:	60fb      	str	r3, [r7, #12]
 8005db8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005dbe:	4619      	mov	r1, r3
 8005dc0:	6878      	ldr	r0, [r7, #4]
 8005dc2:	f7ff fe0b 	bl	80059dc <HAL_UARTEx_RxEventCallback>
 8005dc6:	e002      	b.n	8005dce <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005dc8:	6878      	ldr	r0, [r7, #4]
 8005dca:	f7ff fdf3 	bl	80059b4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005dce:	2300      	movs	r3, #0
 8005dd0:	e002      	b.n	8005dd8 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	e000      	b.n	8005dd8 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005dd6:	2302      	movs	r3, #2
  }
}
 8005dd8:	4618      	mov	r0, r3
 8005dda:	3730      	adds	r7, #48	@ 0x30
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	bd80      	pop	{r7, pc}

08005de0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005de0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005de4:	b0c0      	sub	sp, #256	@ 0x100
 8005de6:	af00      	add	r7, sp, #0
 8005de8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005dec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	691b      	ldr	r3, [r3, #16]
 8005df4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005df8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dfc:	68d9      	ldr	r1, [r3, #12]
 8005dfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e02:	681a      	ldr	r2, [r3, #0]
 8005e04:	ea40 0301 	orr.w	r3, r0, r1
 8005e08:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005e0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e0e:	689a      	ldr	r2, [r3, #8]
 8005e10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e14:	691b      	ldr	r3, [r3, #16]
 8005e16:	431a      	orrs	r2, r3
 8005e18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e1c:	695b      	ldr	r3, [r3, #20]
 8005e1e:	431a      	orrs	r2, r3
 8005e20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e24:	69db      	ldr	r3, [r3, #28]
 8005e26:	4313      	orrs	r3, r2
 8005e28:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005e2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	68db      	ldr	r3, [r3, #12]
 8005e34:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005e38:	f021 010c 	bic.w	r1, r1, #12
 8005e3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e40:	681a      	ldr	r2, [r3, #0]
 8005e42:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005e46:	430b      	orrs	r3, r1
 8005e48:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005e4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	695b      	ldr	r3, [r3, #20]
 8005e52:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005e56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e5a:	6999      	ldr	r1, [r3, #24]
 8005e5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e60:	681a      	ldr	r2, [r3, #0]
 8005e62:	ea40 0301 	orr.w	r3, r0, r1
 8005e66:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005e68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e6c:	681a      	ldr	r2, [r3, #0]
 8005e6e:	4b8f      	ldr	r3, [pc, #572]	@ (80060ac <UART_SetConfig+0x2cc>)
 8005e70:	429a      	cmp	r2, r3
 8005e72:	d005      	beq.n	8005e80 <UART_SetConfig+0xa0>
 8005e74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e78:	681a      	ldr	r2, [r3, #0]
 8005e7a:	4b8d      	ldr	r3, [pc, #564]	@ (80060b0 <UART_SetConfig+0x2d0>)
 8005e7c:	429a      	cmp	r2, r3
 8005e7e:	d104      	bne.n	8005e8a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005e80:	f7fe f9d6 	bl	8004230 <HAL_RCC_GetPCLK2Freq>
 8005e84:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005e88:	e003      	b.n	8005e92 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005e8a:	f7fe f9bd 	bl	8004208 <HAL_RCC_GetPCLK1Freq>
 8005e8e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005e92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e96:	69db      	ldr	r3, [r3, #28]
 8005e98:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005e9c:	f040 810c 	bne.w	80060b8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005ea0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005eaa:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005eae:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005eb2:	4622      	mov	r2, r4
 8005eb4:	462b      	mov	r3, r5
 8005eb6:	1891      	adds	r1, r2, r2
 8005eb8:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005eba:	415b      	adcs	r3, r3
 8005ebc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005ebe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005ec2:	4621      	mov	r1, r4
 8005ec4:	eb12 0801 	adds.w	r8, r2, r1
 8005ec8:	4629      	mov	r1, r5
 8005eca:	eb43 0901 	adc.w	r9, r3, r1
 8005ece:	f04f 0200 	mov.w	r2, #0
 8005ed2:	f04f 0300 	mov.w	r3, #0
 8005ed6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005eda:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005ede:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005ee2:	4690      	mov	r8, r2
 8005ee4:	4699      	mov	r9, r3
 8005ee6:	4623      	mov	r3, r4
 8005ee8:	eb18 0303 	adds.w	r3, r8, r3
 8005eec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005ef0:	462b      	mov	r3, r5
 8005ef2:	eb49 0303 	adc.w	r3, r9, r3
 8005ef6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005efa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005efe:	685b      	ldr	r3, [r3, #4]
 8005f00:	2200      	movs	r2, #0
 8005f02:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005f06:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005f0a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005f0e:	460b      	mov	r3, r1
 8005f10:	18db      	adds	r3, r3, r3
 8005f12:	653b      	str	r3, [r7, #80]	@ 0x50
 8005f14:	4613      	mov	r3, r2
 8005f16:	eb42 0303 	adc.w	r3, r2, r3
 8005f1a:	657b      	str	r3, [r7, #84]	@ 0x54
 8005f1c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005f20:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005f24:	f7fa fdca 	bl	8000abc <__aeabi_uldivmod>
 8005f28:	4602      	mov	r2, r0
 8005f2a:	460b      	mov	r3, r1
 8005f2c:	4b61      	ldr	r3, [pc, #388]	@ (80060b4 <UART_SetConfig+0x2d4>)
 8005f2e:	fba3 2302 	umull	r2, r3, r3, r2
 8005f32:	095b      	lsrs	r3, r3, #5
 8005f34:	011c      	lsls	r4, r3, #4
 8005f36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005f40:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005f44:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005f48:	4642      	mov	r2, r8
 8005f4a:	464b      	mov	r3, r9
 8005f4c:	1891      	adds	r1, r2, r2
 8005f4e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005f50:	415b      	adcs	r3, r3
 8005f52:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005f54:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005f58:	4641      	mov	r1, r8
 8005f5a:	eb12 0a01 	adds.w	sl, r2, r1
 8005f5e:	4649      	mov	r1, r9
 8005f60:	eb43 0b01 	adc.w	fp, r3, r1
 8005f64:	f04f 0200 	mov.w	r2, #0
 8005f68:	f04f 0300 	mov.w	r3, #0
 8005f6c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005f70:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005f74:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005f78:	4692      	mov	sl, r2
 8005f7a:	469b      	mov	fp, r3
 8005f7c:	4643      	mov	r3, r8
 8005f7e:	eb1a 0303 	adds.w	r3, sl, r3
 8005f82:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005f86:	464b      	mov	r3, r9
 8005f88:	eb4b 0303 	adc.w	r3, fp, r3
 8005f8c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005f90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f94:	685b      	ldr	r3, [r3, #4]
 8005f96:	2200      	movs	r2, #0
 8005f98:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005f9c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005fa0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005fa4:	460b      	mov	r3, r1
 8005fa6:	18db      	adds	r3, r3, r3
 8005fa8:	643b      	str	r3, [r7, #64]	@ 0x40
 8005faa:	4613      	mov	r3, r2
 8005fac:	eb42 0303 	adc.w	r3, r2, r3
 8005fb0:	647b      	str	r3, [r7, #68]	@ 0x44
 8005fb2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005fb6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005fba:	f7fa fd7f 	bl	8000abc <__aeabi_uldivmod>
 8005fbe:	4602      	mov	r2, r0
 8005fc0:	460b      	mov	r3, r1
 8005fc2:	4611      	mov	r1, r2
 8005fc4:	4b3b      	ldr	r3, [pc, #236]	@ (80060b4 <UART_SetConfig+0x2d4>)
 8005fc6:	fba3 2301 	umull	r2, r3, r3, r1
 8005fca:	095b      	lsrs	r3, r3, #5
 8005fcc:	2264      	movs	r2, #100	@ 0x64
 8005fce:	fb02 f303 	mul.w	r3, r2, r3
 8005fd2:	1acb      	subs	r3, r1, r3
 8005fd4:	00db      	lsls	r3, r3, #3
 8005fd6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005fda:	4b36      	ldr	r3, [pc, #216]	@ (80060b4 <UART_SetConfig+0x2d4>)
 8005fdc:	fba3 2302 	umull	r2, r3, r3, r2
 8005fe0:	095b      	lsrs	r3, r3, #5
 8005fe2:	005b      	lsls	r3, r3, #1
 8005fe4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005fe8:	441c      	add	r4, r3
 8005fea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005fee:	2200      	movs	r2, #0
 8005ff0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005ff4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005ff8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005ffc:	4642      	mov	r2, r8
 8005ffe:	464b      	mov	r3, r9
 8006000:	1891      	adds	r1, r2, r2
 8006002:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006004:	415b      	adcs	r3, r3
 8006006:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006008:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800600c:	4641      	mov	r1, r8
 800600e:	1851      	adds	r1, r2, r1
 8006010:	6339      	str	r1, [r7, #48]	@ 0x30
 8006012:	4649      	mov	r1, r9
 8006014:	414b      	adcs	r3, r1
 8006016:	637b      	str	r3, [r7, #52]	@ 0x34
 8006018:	f04f 0200 	mov.w	r2, #0
 800601c:	f04f 0300 	mov.w	r3, #0
 8006020:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006024:	4659      	mov	r1, fp
 8006026:	00cb      	lsls	r3, r1, #3
 8006028:	4651      	mov	r1, sl
 800602a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800602e:	4651      	mov	r1, sl
 8006030:	00ca      	lsls	r2, r1, #3
 8006032:	4610      	mov	r0, r2
 8006034:	4619      	mov	r1, r3
 8006036:	4603      	mov	r3, r0
 8006038:	4642      	mov	r2, r8
 800603a:	189b      	adds	r3, r3, r2
 800603c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006040:	464b      	mov	r3, r9
 8006042:	460a      	mov	r2, r1
 8006044:	eb42 0303 	adc.w	r3, r2, r3
 8006048:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800604c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006050:	685b      	ldr	r3, [r3, #4]
 8006052:	2200      	movs	r2, #0
 8006054:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006058:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800605c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006060:	460b      	mov	r3, r1
 8006062:	18db      	adds	r3, r3, r3
 8006064:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006066:	4613      	mov	r3, r2
 8006068:	eb42 0303 	adc.w	r3, r2, r3
 800606c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800606e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006072:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006076:	f7fa fd21 	bl	8000abc <__aeabi_uldivmod>
 800607a:	4602      	mov	r2, r0
 800607c:	460b      	mov	r3, r1
 800607e:	4b0d      	ldr	r3, [pc, #52]	@ (80060b4 <UART_SetConfig+0x2d4>)
 8006080:	fba3 1302 	umull	r1, r3, r3, r2
 8006084:	095b      	lsrs	r3, r3, #5
 8006086:	2164      	movs	r1, #100	@ 0x64
 8006088:	fb01 f303 	mul.w	r3, r1, r3
 800608c:	1ad3      	subs	r3, r2, r3
 800608e:	00db      	lsls	r3, r3, #3
 8006090:	3332      	adds	r3, #50	@ 0x32
 8006092:	4a08      	ldr	r2, [pc, #32]	@ (80060b4 <UART_SetConfig+0x2d4>)
 8006094:	fba2 2303 	umull	r2, r3, r2, r3
 8006098:	095b      	lsrs	r3, r3, #5
 800609a:	f003 0207 	and.w	r2, r3, #7
 800609e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4422      	add	r2, r4
 80060a6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80060a8:	e106      	b.n	80062b8 <UART_SetConfig+0x4d8>
 80060aa:	bf00      	nop
 80060ac:	40011000 	.word	0x40011000
 80060b0:	40011400 	.word	0x40011400
 80060b4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80060b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80060bc:	2200      	movs	r2, #0
 80060be:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80060c2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80060c6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80060ca:	4642      	mov	r2, r8
 80060cc:	464b      	mov	r3, r9
 80060ce:	1891      	adds	r1, r2, r2
 80060d0:	6239      	str	r1, [r7, #32]
 80060d2:	415b      	adcs	r3, r3
 80060d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80060d6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80060da:	4641      	mov	r1, r8
 80060dc:	1854      	adds	r4, r2, r1
 80060de:	4649      	mov	r1, r9
 80060e0:	eb43 0501 	adc.w	r5, r3, r1
 80060e4:	f04f 0200 	mov.w	r2, #0
 80060e8:	f04f 0300 	mov.w	r3, #0
 80060ec:	00eb      	lsls	r3, r5, #3
 80060ee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80060f2:	00e2      	lsls	r2, r4, #3
 80060f4:	4614      	mov	r4, r2
 80060f6:	461d      	mov	r5, r3
 80060f8:	4643      	mov	r3, r8
 80060fa:	18e3      	adds	r3, r4, r3
 80060fc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006100:	464b      	mov	r3, r9
 8006102:	eb45 0303 	adc.w	r3, r5, r3
 8006106:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800610a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800610e:	685b      	ldr	r3, [r3, #4]
 8006110:	2200      	movs	r2, #0
 8006112:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006116:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800611a:	f04f 0200 	mov.w	r2, #0
 800611e:	f04f 0300 	mov.w	r3, #0
 8006122:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006126:	4629      	mov	r1, r5
 8006128:	008b      	lsls	r3, r1, #2
 800612a:	4621      	mov	r1, r4
 800612c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006130:	4621      	mov	r1, r4
 8006132:	008a      	lsls	r2, r1, #2
 8006134:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006138:	f7fa fcc0 	bl	8000abc <__aeabi_uldivmod>
 800613c:	4602      	mov	r2, r0
 800613e:	460b      	mov	r3, r1
 8006140:	4b60      	ldr	r3, [pc, #384]	@ (80062c4 <UART_SetConfig+0x4e4>)
 8006142:	fba3 2302 	umull	r2, r3, r3, r2
 8006146:	095b      	lsrs	r3, r3, #5
 8006148:	011c      	lsls	r4, r3, #4
 800614a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800614e:	2200      	movs	r2, #0
 8006150:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006154:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006158:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800615c:	4642      	mov	r2, r8
 800615e:	464b      	mov	r3, r9
 8006160:	1891      	adds	r1, r2, r2
 8006162:	61b9      	str	r1, [r7, #24]
 8006164:	415b      	adcs	r3, r3
 8006166:	61fb      	str	r3, [r7, #28]
 8006168:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800616c:	4641      	mov	r1, r8
 800616e:	1851      	adds	r1, r2, r1
 8006170:	6139      	str	r1, [r7, #16]
 8006172:	4649      	mov	r1, r9
 8006174:	414b      	adcs	r3, r1
 8006176:	617b      	str	r3, [r7, #20]
 8006178:	f04f 0200 	mov.w	r2, #0
 800617c:	f04f 0300 	mov.w	r3, #0
 8006180:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006184:	4659      	mov	r1, fp
 8006186:	00cb      	lsls	r3, r1, #3
 8006188:	4651      	mov	r1, sl
 800618a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800618e:	4651      	mov	r1, sl
 8006190:	00ca      	lsls	r2, r1, #3
 8006192:	4610      	mov	r0, r2
 8006194:	4619      	mov	r1, r3
 8006196:	4603      	mov	r3, r0
 8006198:	4642      	mov	r2, r8
 800619a:	189b      	adds	r3, r3, r2
 800619c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80061a0:	464b      	mov	r3, r9
 80061a2:	460a      	mov	r2, r1
 80061a4:	eb42 0303 	adc.w	r3, r2, r3
 80061a8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80061ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061b0:	685b      	ldr	r3, [r3, #4]
 80061b2:	2200      	movs	r2, #0
 80061b4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80061b6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80061b8:	f04f 0200 	mov.w	r2, #0
 80061bc:	f04f 0300 	mov.w	r3, #0
 80061c0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80061c4:	4649      	mov	r1, r9
 80061c6:	008b      	lsls	r3, r1, #2
 80061c8:	4641      	mov	r1, r8
 80061ca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80061ce:	4641      	mov	r1, r8
 80061d0:	008a      	lsls	r2, r1, #2
 80061d2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80061d6:	f7fa fc71 	bl	8000abc <__aeabi_uldivmod>
 80061da:	4602      	mov	r2, r0
 80061dc:	460b      	mov	r3, r1
 80061de:	4611      	mov	r1, r2
 80061e0:	4b38      	ldr	r3, [pc, #224]	@ (80062c4 <UART_SetConfig+0x4e4>)
 80061e2:	fba3 2301 	umull	r2, r3, r3, r1
 80061e6:	095b      	lsrs	r3, r3, #5
 80061e8:	2264      	movs	r2, #100	@ 0x64
 80061ea:	fb02 f303 	mul.w	r3, r2, r3
 80061ee:	1acb      	subs	r3, r1, r3
 80061f0:	011b      	lsls	r3, r3, #4
 80061f2:	3332      	adds	r3, #50	@ 0x32
 80061f4:	4a33      	ldr	r2, [pc, #204]	@ (80062c4 <UART_SetConfig+0x4e4>)
 80061f6:	fba2 2303 	umull	r2, r3, r2, r3
 80061fa:	095b      	lsrs	r3, r3, #5
 80061fc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006200:	441c      	add	r4, r3
 8006202:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006206:	2200      	movs	r2, #0
 8006208:	673b      	str	r3, [r7, #112]	@ 0x70
 800620a:	677a      	str	r2, [r7, #116]	@ 0x74
 800620c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006210:	4642      	mov	r2, r8
 8006212:	464b      	mov	r3, r9
 8006214:	1891      	adds	r1, r2, r2
 8006216:	60b9      	str	r1, [r7, #8]
 8006218:	415b      	adcs	r3, r3
 800621a:	60fb      	str	r3, [r7, #12]
 800621c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006220:	4641      	mov	r1, r8
 8006222:	1851      	adds	r1, r2, r1
 8006224:	6039      	str	r1, [r7, #0]
 8006226:	4649      	mov	r1, r9
 8006228:	414b      	adcs	r3, r1
 800622a:	607b      	str	r3, [r7, #4]
 800622c:	f04f 0200 	mov.w	r2, #0
 8006230:	f04f 0300 	mov.w	r3, #0
 8006234:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006238:	4659      	mov	r1, fp
 800623a:	00cb      	lsls	r3, r1, #3
 800623c:	4651      	mov	r1, sl
 800623e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006242:	4651      	mov	r1, sl
 8006244:	00ca      	lsls	r2, r1, #3
 8006246:	4610      	mov	r0, r2
 8006248:	4619      	mov	r1, r3
 800624a:	4603      	mov	r3, r0
 800624c:	4642      	mov	r2, r8
 800624e:	189b      	adds	r3, r3, r2
 8006250:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006252:	464b      	mov	r3, r9
 8006254:	460a      	mov	r2, r1
 8006256:	eb42 0303 	adc.w	r3, r2, r3
 800625a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800625c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006260:	685b      	ldr	r3, [r3, #4]
 8006262:	2200      	movs	r2, #0
 8006264:	663b      	str	r3, [r7, #96]	@ 0x60
 8006266:	667a      	str	r2, [r7, #100]	@ 0x64
 8006268:	f04f 0200 	mov.w	r2, #0
 800626c:	f04f 0300 	mov.w	r3, #0
 8006270:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006274:	4649      	mov	r1, r9
 8006276:	008b      	lsls	r3, r1, #2
 8006278:	4641      	mov	r1, r8
 800627a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800627e:	4641      	mov	r1, r8
 8006280:	008a      	lsls	r2, r1, #2
 8006282:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006286:	f7fa fc19 	bl	8000abc <__aeabi_uldivmod>
 800628a:	4602      	mov	r2, r0
 800628c:	460b      	mov	r3, r1
 800628e:	4b0d      	ldr	r3, [pc, #52]	@ (80062c4 <UART_SetConfig+0x4e4>)
 8006290:	fba3 1302 	umull	r1, r3, r3, r2
 8006294:	095b      	lsrs	r3, r3, #5
 8006296:	2164      	movs	r1, #100	@ 0x64
 8006298:	fb01 f303 	mul.w	r3, r1, r3
 800629c:	1ad3      	subs	r3, r2, r3
 800629e:	011b      	lsls	r3, r3, #4
 80062a0:	3332      	adds	r3, #50	@ 0x32
 80062a2:	4a08      	ldr	r2, [pc, #32]	@ (80062c4 <UART_SetConfig+0x4e4>)
 80062a4:	fba2 2303 	umull	r2, r3, r2, r3
 80062a8:	095b      	lsrs	r3, r3, #5
 80062aa:	f003 020f 	and.w	r2, r3, #15
 80062ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	4422      	add	r2, r4
 80062b6:	609a      	str	r2, [r3, #8]
}
 80062b8:	bf00      	nop
 80062ba:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80062be:	46bd      	mov	sp, r7
 80062c0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80062c4:	51eb851f 	.word	0x51eb851f

080062c8 <siprintf>:
 80062c8:	b40e      	push	{r1, r2, r3}
 80062ca:	b500      	push	{lr}
 80062cc:	b09c      	sub	sp, #112	@ 0x70
 80062ce:	ab1d      	add	r3, sp, #116	@ 0x74
 80062d0:	9002      	str	r0, [sp, #8]
 80062d2:	9006      	str	r0, [sp, #24]
 80062d4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80062d8:	4809      	ldr	r0, [pc, #36]	@ (8006300 <siprintf+0x38>)
 80062da:	9107      	str	r1, [sp, #28]
 80062dc:	9104      	str	r1, [sp, #16]
 80062de:	4909      	ldr	r1, [pc, #36]	@ (8006304 <siprintf+0x3c>)
 80062e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80062e4:	9105      	str	r1, [sp, #20]
 80062e6:	6800      	ldr	r0, [r0, #0]
 80062e8:	9301      	str	r3, [sp, #4]
 80062ea:	a902      	add	r1, sp, #8
 80062ec:	f000 f89c 	bl	8006428 <_svfiprintf_r>
 80062f0:	9b02      	ldr	r3, [sp, #8]
 80062f2:	2200      	movs	r2, #0
 80062f4:	701a      	strb	r2, [r3, #0]
 80062f6:	b01c      	add	sp, #112	@ 0x70
 80062f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80062fc:	b003      	add	sp, #12
 80062fe:	4770      	bx	lr
 8006300:	2000000c 	.word	0x2000000c
 8006304:	ffff0208 	.word	0xffff0208

08006308 <memset>:
 8006308:	4402      	add	r2, r0
 800630a:	4603      	mov	r3, r0
 800630c:	4293      	cmp	r3, r2
 800630e:	d100      	bne.n	8006312 <memset+0xa>
 8006310:	4770      	bx	lr
 8006312:	f803 1b01 	strb.w	r1, [r3], #1
 8006316:	e7f9      	b.n	800630c <memset+0x4>

08006318 <__errno>:
 8006318:	4b01      	ldr	r3, [pc, #4]	@ (8006320 <__errno+0x8>)
 800631a:	6818      	ldr	r0, [r3, #0]
 800631c:	4770      	bx	lr
 800631e:	bf00      	nop
 8006320:	2000000c 	.word	0x2000000c

08006324 <__libc_init_array>:
 8006324:	b570      	push	{r4, r5, r6, lr}
 8006326:	4d0d      	ldr	r5, [pc, #52]	@ (800635c <__libc_init_array+0x38>)
 8006328:	4c0d      	ldr	r4, [pc, #52]	@ (8006360 <__libc_init_array+0x3c>)
 800632a:	1b64      	subs	r4, r4, r5
 800632c:	10a4      	asrs	r4, r4, #2
 800632e:	2600      	movs	r6, #0
 8006330:	42a6      	cmp	r6, r4
 8006332:	d109      	bne.n	8006348 <__libc_init_array+0x24>
 8006334:	4d0b      	ldr	r5, [pc, #44]	@ (8006364 <__libc_init_array+0x40>)
 8006336:	4c0c      	ldr	r4, [pc, #48]	@ (8006368 <__libc_init_array+0x44>)
 8006338:	f000 fc66 	bl	8006c08 <_init>
 800633c:	1b64      	subs	r4, r4, r5
 800633e:	10a4      	asrs	r4, r4, #2
 8006340:	2600      	movs	r6, #0
 8006342:	42a6      	cmp	r6, r4
 8006344:	d105      	bne.n	8006352 <__libc_init_array+0x2e>
 8006346:	bd70      	pop	{r4, r5, r6, pc}
 8006348:	f855 3b04 	ldr.w	r3, [r5], #4
 800634c:	4798      	blx	r3
 800634e:	3601      	adds	r6, #1
 8006350:	e7ee      	b.n	8006330 <__libc_init_array+0xc>
 8006352:	f855 3b04 	ldr.w	r3, [r5], #4
 8006356:	4798      	blx	r3
 8006358:	3601      	adds	r6, #1
 800635a:	e7f2      	b.n	8006342 <__libc_init_array+0x1e>
 800635c:	08006d30 	.word	0x08006d30
 8006360:	08006d30 	.word	0x08006d30
 8006364:	08006d30 	.word	0x08006d30
 8006368:	08006d34 	.word	0x08006d34

0800636c <__retarget_lock_acquire_recursive>:
 800636c:	4770      	bx	lr

0800636e <__retarget_lock_release_recursive>:
 800636e:	4770      	bx	lr

08006370 <__ssputs_r>:
 8006370:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006374:	688e      	ldr	r6, [r1, #8]
 8006376:	461f      	mov	r7, r3
 8006378:	42be      	cmp	r6, r7
 800637a:	680b      	ldr	r3, [r1, #0]
 800637c:	4682      	mov	sl, r0
 800637e:	460c      	mov	r4, r1
 8006380:	4690      	mov	r8, r2
 8006382:	d82d      	bhi.n	80063e0 <__ssputs_r+0x70>
 8006384:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006388:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800638c:	d026      	beq.n	80063dc <__ssputs_r+0x6c>
 800638e:	6965      	ldr	r5, [r4, #20]
 8006390:	6909      	ldr	r1, [r1, #16]
 8006392:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006396:	eba3 0901 	sub.w	r9, r3, r1
 800639a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800639e:	1c7b      	adds	r3, r7, #1
 80063a0:	444b      	add	r3, r9
 80063a2:	106d      	asrs	r5, r5, #1
 80063a4:	429d      	cmp	r5, r3
 80063a6:	bf38      	it	cc
 80063a8:	461d      	movcc	r5, r3
 80063aa:	0553      	lsls	r3, r2, #21
 80063ac:	d527      	bpl.n	80063fe <__ssputs_r+0x8e>
 80063ae:	4629      	mov	r1, r5
 80063b0:	f000 f958 	bl	8006664 <_malloc_r>
 80063b4:	4606      	mov	r6, r0
 80063b6:	b360      	cbz	r0, 8006412 <__ssputs_r+0xa2>
 80063b8:	6921      	ldr	r1, [r4, #16]
 80063ba:	464a      	mov	r2, r9
 80063bc:	f000 fbc4 	bl	8006b48 <memcpy>
 80063c0:	89a3      	ldrh	r3, [r4, #12]
 80063c2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80063c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80063ca:	81a3      	strh	r3, [r4, #12]
 80063cc:	6126      	str	r6, [r4, #16]
 80063ce:	6165      	str	r5, [r4, #20]
 80063d0:	444e      	add	r6, r9
 80063d2:	eba5 0509 	sub.w	r5, r5, r9
 80063d6:	6026      	str	r6, [r4, #0]
 80063d8:	60a5      	str	r5, [r4, #8]
 80063da:	463e      	mov	r6, r7
 80063dc:	42be      	cmp	r6, r7
 80063de:	d900      	bls.n	80063e2 <__ssputs_r+0x72>
 80063e0:	463e      	mov	r6, r7
 80063e2:	6820      	ldr	r0, [r4, #0]
 80063e4:	4632      	mov	r2, r6
 80063e6:	4641      	mov	r1, r8
 80063e8:	f000 fb84 	bl	8006af4 <memmove>
 80063ec:	68a3      	ldr	r3, [r4, #8]
 80063ee:	1b9b      	subs	r3, r3, r6
 80063f0:	60a3      	str	r3, [r4, #8]
 80063f2:	6823      	ldr	r3, [r4, #0]
 80063f4:	4433      	add	r3, r6
 80063f6:	6023      	str	r3, [r4, #0]
 80063f8:	2000      	movs	r0, #0
 80063fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063fe:	462a      	mov	r2, r5
 8006400:	f000 fb4a 	bl	8006a98 <_realloc_r>
 8006404:	4606      	mov	r6, r0
 8006406:	2800      	cmp	r0, #0
 8006408:	d1e0      	bne.n	80063cc <__ssputs_r+0x5c>
 800640a:	6921      	ldr	r1, [r4, #16]
 800640c:	4650      	mov	r0, sl
 800640e:	f000 fba9 	bl	8006b64 <_free_r>
 8006412:	230c      	movs	r3, #12
 8006414:	f8ca 3000 	str.w	r3, [sl]
 8006418:	89a3      	ldrh	r3, [r4, #12]
 800641a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800641e:	81a3      	strh	r3, [r4, #12]
 8006420:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006424:	e7e9      	b.n	80063fa <__ssputs_r+0x8a>
	...

08006428 <_svfiprintf_r>:
 8006428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800642c:	4698      	mov	r8, r3
 800642e:	898b      	ldrh	r3, [r1, #12]
 8006430:	061b      	lsls	r3, r3, #24
 8006432:	b09d      	sub	sp, #116	@ 0x74
 8006434:	4607      	mov	r7, r0
 8006436:	460d      	mov	r5, r1
 8006438:	4614      	mov	r4, r2
 800643a:	d510      	bpl.n	800645e <_svfiprintf_r+0x36>
 800643c:	690b      	ldr	r3, [r1, #16]
 800643e:	b973      	cbnz	r3, 800645e <_svfiprintf_r+0x36>
 8006440:	2140      	movs	r1, #64	@ 0x40
 8006442:	f000 f90f 	bl	8006664 <_malloc_r>
 8006446:	6028      	str	r0, [r5, #0]
 8006448:	6128      	str	r0, [r5, #16]
 800644a:	b930      	cbnz	r0, 800645a <_svfiprintf_r+0x32>
 800644c:	230c      	movs	r3, #12
 800644e:	603b      	str	r3, [r7, #0]
 8006450:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006454:	b01d      	add	sp, #116	@ 0x74
 8006456:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800645a:	2340      	movs	r3, #64	@ 0x40
 800645c:	616b      	str	r3, [r5, #20]
 800645e:	2300      	movs	r3, #0
 8006460:	9309      	str	r3, [sp, #36]	@ 0x24
 8006462:	2320      	movs	r3, #32
 8006464:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006468:	f8cd 800c 	str.w	r8, [sp, #12]
 800646c:	2330      	movs	r3, #48	@ 0x30
 800646e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800660c <_svfiprintf_r+0x1e4>
 8006472:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006476:	f04f 0901 	mov.w	r9, #1
 800647a:	4623      	mov	r3, r4
 800647c:	469a      	mov	sl, r3
 800647e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006482:	b10a      	cbz	r2, 8006488 <_svfiprintf_r+0x60>
 8006484:	2a25      	cmp	r2, #37	@ 0x25
 8006486:	d1f9      	bne.n	800647c <_svfiprintf_r+0x54>
 8006488:	ebba 0b04 	subs.w	fp, sl, r4
 800648c:	d00b      	beq.n	80064a6 <_svfiprintf_r+0x7e>
 800648e:	465b      	mov	r3, fp
 8006490:	4622      	mov	r2, r4
 8006492:	4629      	mov	r1, r5
 8006494:	4638      	mov	r0, r7
 8006496:	f7ff ff6b 	bl	8006370 <__ssputs_r>
 800649a:	3001      	adds	r0, #1
 800649c:	f000 80a7 	beq.w	80065ee <_svfiprintf_r+0x1c6>
 80064a0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80064a2:	445a      	add	r2, fp
 80064a4:	9209      	str	r2, [sp, #36]	@ 0x24
 80064a6:	f89a 3000 	ldrb.w	r3, [sl]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	f000 809f 	beq.w	80065ee <_svfiprintf_r+0x1c6>
 80064b0:	2300      	movs	r3, #0
 80064b2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80064b6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80064ba:	f10a 0a01 	add.w	sl, sl, #1
 80064be:	9304      	str	r3, [sp, #16]
 80064c0:	9307      	str	r3, [sp, #28]
 80064c2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80064c6:	931a      	str	r3, [sp, #104]	@ 0x68
 80064c8:	4654      	mov	r4, sl
 80064ca:	2205      	movs	r2, #5
 80064cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80064d0:	484e      	ldr	r0, [pc, #312]	@ (800660c <_svfiprintf_r+0x1e4>)
 80064d2:	f7f9 fe85 	bl	80001e0 <memchr>
 80064d6:	9a04      	ldr	r2, [sp, #16]
 80064d8:	b9d8      	cbnz	r0, 8006512 <_svfiprintf_r+0xea>
 80064da:	06d0      	lsls	r0, r2, #27
 80064dc:	bf44      	itt	mi
 80064de:	2320      	movmi	r3, #32
 80064e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80064e4:	0711      	lsls	r1, r2, #28
 80064e6:	bf44      	itt	mi
 80064e8:	232b      	movmi	r3, #43	@ 0x2b
 80064ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80064ee:	f89a 3000 	ldrb.w	r3, [sl]
 80064f2:	2b2a      	cmp	r3, #42	@ 0x2a
 80064f4:	d015      	beq.n	8006522 <_svfiprintf_r+0xfa>
 80064f6:	9a07      	ldr	r2, [sp, #28]
 80064f8:	4654      	mov	r4, sl
 80064fa:	2000      	movs	r0, #0
 80064fc:	f04f 0c0a 	mov.w	ip, #10
 8006500:	4621      	mov	r1, r4
 8006502:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006506:	3b30      	subs	r3, #48	@ 0x30
 8006508:	2b09      	cmp	r3, #9
 800650a:	d94b      	bls.n	80065a4 <_svfiprintf_r+0x17c>
 800650c:	b1b0      	cbz	r0, 800653c <_svfiprintf_r+0x114>
 800650e:	9207      	str	r2, [sp, #28]
 8006510:	e014      	b.n	800653c <_svfiprintf_r+0x114>
 8006512:	eba0 0308 	sub.w	r3, r0, r8
 8006516:	fa09 f303 	lsl.w	r3, r9, r3
 800651a:	4313      	orrs	r3, r2
 800651c:	9304      	str	r3, [sp, #16]
 800651e:	46a2      	mov	sl, r4
 8006520:	e7d2      	b.n	80064c8 <_svfiprintf_r+0xa0>
 8006522:	9b03      	ldr	r3, [sp, #12]
 8006524:	1d19      	adds	r1, r3, #4
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	9103      	str	r1, [sp, #12]
 800652a:	2b00      	cmp	r3, #0
 800652c:	bfbb      	ittet	lt
 800652e:	425b      	neglt	r3, r3
 8006530:	f042 0202 	orrlt.w	r2, r2, #2
 8006534:	9307      	strge	r3, [sp, #28]
 8006536:	9307      	strlt	r3, [sp, #28]
 8006538:	bfb8      	it	lt
 800653a:	9204      	strlt	r2, [sp, #16]
 800653c:	7823      	ldrb	r3, [r4, #0]
 800653e:	2b2e      	cmp	r3, #46	@ 0x2e
 8006540:	d10a      	bne.n	8006558 <_svfiprintf_r+0x130>
 8006542:	7863      	ldrb	r3, [r4, #1]
 8006544:	2b2a      	cmp	r3, #42	@ 0x2a
 8006546:	d132      	bne.n	80065ae <_svfiprintf_r+0x186>
 8006548:	9b03      	ldr	r3, [sp, #12]
 800654a:	1d1a      	adds	r2, r3, #4
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	9203      	str	r2, [sp, #12]
 8006550:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006554:	3402      	adds	r4, #2
 8006556:	9305      	str	r3, [sp, #20]
 8006558:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800661c <_svfiprintf_r+0x1f4>
 800655c:	7821      	ldrb	r1, [r4, #0]
 800655e:	2203      	movs	r2, #3
 8006560:	4650      	mov	r0, sl
 8006562:	f7f9 fe3d 	bl	80001e0 <memchr>
 8006566:	b138      	cbz	r0, 8006578 <_svfiprintf_r+0x150>
 8006568:	9b04      	ldr	r3, [sp, #16]
 800656a:	eba0 000a 	sub.w	r0, r0, sl
 800656e:	2240      	movs	r2, #64	@ 0x40
 8006570:	4082      	lsls	r2, r0
 8006572:	4313      	orrs	r3, r2
 8006574:	3401      	adds	r4, #1
 8006576:	9304      	str	r3, [sp, #16]
 8006578:	f814 1b01 	ldrb.w	r1, [r4], #1
 800657c:	4824      	ldr	r0, [pc, #144]	@ (8006610 <_svfiprintf_r+0x1e8>)
 800657e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006582:	2206      	movs	r2, #6
 8006584:	f7f9 fe2c 	bl	80001e0 <memchr>
 8006588:	2800      	cmp	r0, #0
 800658a:	d036      	beq.n	80065fa <_svfiprintf_r+0x1d2>
 800658c:	4b21      	ldr	r3, [pc, #132]	@ (8006614 <_svfiprintf_r+0x1ec>)
 800658e:	bb1b      	cbnz	r3, 80065d8 <_svfiprintf_r+0x1b0>
 8006590:	9b03      	ldr	r3, [sp, #12]
 8006592:	3307      	adds	r3, #7
 8006594:	f023 0307 	bic.w	r3, r3, #7
 8006598:	3308      	adds	r3, #8
 800659a:	9303      	str	r3, [sp, #12]
 800659c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800659e:	4433      	add	r3, r6
 80065a0:	9309      	str	r3, [sp, #36]	@ 0x24
 80065a2:	e76a      	b.n	800647a <_svfiprintf_r+0x52>
 80065a4:	fb0c 3202 	mla	r2, ip, r2, r3
 80065a8:	460c      	mov	r4, r1
 80065aa:	2001      	movs	r0, #1
 80065ac:	e7a8      	b.n	8006500 <_svfiprintf_r+0xd8>
 80065ae:	2300      	movs	r3, #0
 80065b0:	3401      	adds	r4, #1
 80065b2:	9305      	str	r3, [sp, #20]
 80065b4:	4619      	mov	r1, r3
 80065b6:	f04f 0c0a 	mov.w	ip, #10
 80065ba:	4620      	mov	r0, r4
 80065bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80065c0:	3a30      	subs	r2, #48	@ 0x30
 80065c2:	2a09      	cmp	r2, #9
 80065c4:	d903      	bls.n	80065ce <_svfiprintf_r+0x1a6>
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d0c6      	beq.n	8006558 <_svfiprintf_r+0x130>
 80065ca:	9105      	str	r1, [sp, #20]
 80065cc:	e7c4      	b.n	8006558 <_svfiprintf_r+0x130>
 80065ce:	fb0c 2101 	mla	r1, ip, r1, r2
 80065d2:	4604      	mov	r4, r0
 80065d4:	2301      	movs	r3, #1
 80065d6:	e7f0      	b.n	80065ba <_svfiprintf_r+0x192>
 80065d8:	ab03      	add	r3, sp, #12
 80065da:	9300      	str	r3, [sp, #0]
 80065dc:	462a      	mov	r2, r5
 80065de:	4b0e      	ldr	r3, [pc, #56]	@ (8006618 <_svfiprintf_r+0x1f0>)
 80065e0:	a904      	add	r1, sp, #16
 80065e2:	4638      	mov	r0, r7
 80065e4:	f3af 8000 	nop.w
 80065e8:	1c42      	adds	r2, r0, #1
 80065ea:	4606      	mov	r6, r0
 80065ec:	d1d6      	bne.n	800659c <_svfiprintf_r+0x174>
 80065ee:	89ab      	ldrh	r3, [r5, #12]
 80065f0:	065b      	lsls	r3, r3, #25
 80065f2:	f53f af2d 	bmi.w	8006450 <_svfiprintf_r+0x28>
 80065f6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80065f8:	e72c      	b.n	8006454 <_svfiprintf_r+0x2c>
 80065fa:	ab03      	add	r3, sp, #12
 80065fc:	9300      	str	r3, [sp, #0]
 80065fe:	462a      	mov	r2, r5
 8006600:	4b05      	ldr	r3, [pc, #20]	@ (8006618 <_svfiprintf_r+0x1f0>)
 8006602:	a904      	add	r1, sp, #16
 8006604:	4638      	mov	r0, r7
 8006606:	f000 f91b 	bl	8006840 <_printf_i>
 800660a:	e7ed      	b.n	80065e8 <_svfiprintf_r+0x1c0>
 800660c:	08006cf4 	.word	0x08006cf4
 8006610:	08006cfe 	.word	0x08006cfe
 8006614:	00000000 	.word	0x00000000
 8006618:	08006371 	.word	0x08006371
 800661c:	08006cfa 	.word	0x08006cfa

08006620 <sbrk_aligned>:
 8006620:	b570      	push	{r4, r5, r6, lr}
 8006622:	4e0f      	ldr	r6, [pc, #60]	@ (8006660 <sbrk_aligned+0x40>)
 8006624:	460c      	mov	r4, r1
 8006626:	6831      	ldr	r1, [r6, #0]
 8006628:	4605      	mov	r5, r0
 800662a:	b911      	cbnz	r1, 8006632 <sbrk_aligned+0x12>
 800662c:	f000 fa7c 	bl	8006b28 <_sbrk_r>
 8006630:	6030      	str	r0, [r6, #0]
 8006632:	4621      	mov	r1, r4
 8006634:	4628      	mov	r0, r5
 8006636:	f000 fa77 	bl	8006b28 <_sbrk_r>
 800663a:	1c43      	adds	r3, r0, #1
 800663c:	d103      	bne.n	8006646 <sbrk_aligned+0x26>
 800663e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8006642:	4620      	mov	r0, r4
 8006644:	bd70      	pop	{r4, r5, r6, pc}
 8006646:	1cc4      	adds	r4, r0, #3
 8006648:	f024 0403 	bic.w	r4, r4, #3
 800664c:	42a0      	cmp	r0, r4
 800664e:	d0f8      	beq.n	8006642 <sbrk_aligned+0x22>
 8006650:	1a21      	subs	r1, r4, r0
 8006652:	4628      	mov	r0, r5
 8006654:	f000 fa68 	bl	8006b28 <_sbrk_r>
 8006658:	3001      	adds	r0, #1
 800665a:	d1f2      	bne.n	8006642 <sbrk_aligned+0x22>
 800665c:	e7ef      	b.n	800663e <sbrk_aligned+0x1e>
 800665e:	bf00      	nop
 8006660:	2000047c 	.word	0x2000047c

08006664 <_malloc_r>:
 8006664:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006668:	1ccd      	adds	r5, r1, #3
 800666a:	f025 0503 	bic.w	r5, r5, #3
 800666e:	3508      	adds	r5, #8
 8006670:	2d0c      	cmp	r5, #12
 8006672:	bf38      	it	cc
 8006674:	250c      	movcc	r5, #12
 8006676:	2d00      	cmp	r5, #0
 8006678:	4606      	mov	r6, r0
 800667a:	db01      	blt.n	8006680 <_malloc_r+0x1c>
 800667c:	42a9      	cmp	r1, r5
 800667e:	d904      	bls.n	800668a <_malloc_r+0x26>
 8006680:	230c      	movs	r3, #12
 8006682:	6033      	str	r3, [r6, #0]
 8006684:	2000      	movs	r0, #0
 8006686:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800668a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006760 <_malloc_r+0xfc>
 800668e:	f000 f9f7 	bl	8006a80 <__malloc_lock>
 8006692:	f8d8 3000 	ldr.w	r3, [r8]
 8006696:	461c      	mov	r4, r3
 8006698:	bb44      	cbnz	r4, 80066ec <_malloc_r+0x88>
 800669a:	4629      	mov	r1, r5
 800669c:	4630      	mov	r0, r6
 800669e:	f7ff ffbf 	bl	8006620 <sbrk_aligned>
 80066a2:	1c43      	adds	r3, r0, #1
 80066a4:	4604      	mov	r4, r0
 80066a6:	d158      	bne.n	800675a <_malloc_r+0xf6>
 80066a8:	f8d8 4000 	ldr.w	r4, [r8]
 80066ac:	4627      	mov	r7, r4
 80066ae:	2f00      	cmp	r7, #0
 80066b0:	d143      	bne.n	800673a <_malloc_r+0xd6>
 80066b2:	2c00      	cmp	r4, #0
 80066b4:	d04b      	beq.n	800674e <_malloc_r+0xea>
 80066b6:	6823      	ldr	r3, [r4, #0]
 80066b8:	4639      	mov	r1, r7
 80066ba:	4630      	mov	r0, r6
 80066bc:	eb04 0903 	add.w	r9, r4, r3
 80066c0:	f000 fa32 	bl	8006b28 <_sbrk_r>
 80066c4:	4581      	cmp	r9, r0
 80066c6:	d142      	bne.n	800674e <_malloc_r+0xea>
 80066c8:	6821      	ldr	r1, [r4, #0]
 80066ca:	1a6d      	subs	r5, r5, r1
 80066cc:	4629      	mov	r1, r5
 80066ce:	4630      	mov	r0, r6
 80066d0:	f7ff ffa6 	bl	8006620 <sbrk_aligned>
 80066d4:	3001      	adds	r0, #1
 80066d6:	d03a      	beq.n	800674e <_malloc_r+0xea>
 80066d8:	6823      	ldr	r3, [r4, #0]
 80066da:	442b      	add	r3, r5
 80066dc:	6023      	str	r3, [r4, #0]
 80066de:	f8d8 3000 	ldr.w	r3, [r8]
 80066e2:	685a      	ldr	r2, [r3, #4]
 80066e4:	bb62      	cbnz	r2, 8006740 <_malloc_r+0xdc>
 80066e6:	f8c8 7000 	str.w	r7, [r8]
 80066ea:	e00f      	b.n	800670c <_malloc_r+0xa8>
 80066ec:	6822      	ldr	r2, [r4, #0]
 80066ee:	1b52      	subs	r2, r2, r5
 80066f0:	d420      	bmi.n	8006734 <_malloc_r+0xd0>
 80066f2:	2a0b      	cmp	r2, #11
 80066f4:	d917      	bls.n	8006726 <_malloc_r+0xc2>
 80066f6:	1961      	adds	r1, r4, r5
 80066f8:	42a3      	cmp	r3, r4
 80066fa:	6025      	str	r5, [r4, #0]
 80066fc:	bf18      	it	ne
 80066fe:	6059      	strne	r1, [r3, #4]
 8006700:	6863      	ldr	r3, [r4, #4]
 8006702:	bf08      	it	eq
 8006704:	f8c8 1000 	streq.w	r1, [r8]
 8006708:	5162      	str	r2, [r4, r5]
 800670a:	604b      	str	r3, [r1, #4]
 800670c:	4630      	mov	r0, r6
 800670e:	f000 f9bd 	bl	8006a8c <__malloc_unlock>
 8006712:	f104 000b 	add.w	r0, r4, #11
 8006716:	1d23      	adds	r3, r4, #4
 8006718:	f020 0007 	bic.w	r0, r0, #7
 800671c:	1ac2      	subs	r2, r0, r3
 800671e:	bf1c      	itt	ne
 8006720:	1a1b      	subne	r3, r3, r0
 8006722:	50a3      	strne	r3, [r4, r2]
 8006724:	e7af      	b.n	8006686 <_malloc_r+0x22>
 8006726:	6862      	ldr	r2, [r4, #4]
 8006728:	42a3      	cmp	r3, r4
 800672a:	bf0c      	ite	eq
 800672c:	f8c8 2000 	streq.w	r2, [r8]
 8006730:	605a      	strne	r2, [r3, #4]
 8006732:	e7eb      	b.n	800670c <_malloc_r+0xa8>
 8006734:	4623      	mov	r3, r4
 8006736:	6864      	ldr	r4, [r4, #4]
 8006738:	e7ae      	b.n	8006698 <_malloc_r+0x34>
 800673a:	463c      	mov	r4, r7
 800673c:	687f      	ldr	r7, [r7, #4]
 800673e:	e7b6      	b.n	80066ae <_malloc_r+0x4a>
 8006740:	461a      	mov	r2, r3
 8006742:	685b      	ldr	r3, [r3, #4]
 8006744:	42a3      	cmp	r3, r4
 8006746:	d1fb      	bne.n	8006740 <_malloc_r+0xdc>
 8006748:	2300      	movs	r3, #0
 800674a:	6053      	str	r3, [r2, #4]
 800674c:	e7de      	b.n	800670c <_malloc_r+0xa8>
 800674e:	230c      	movs	r3, #12
 8006750:	6033      	str	r3, [r6, #0]
 8006752:	4630      	mov	r0, r6
 8006754:	f000 f99a 	bl	8006a8c <__malloc_unlock>
 8006758:	e794      	b.n	8006684 <_malloc_r+0x20>
 800675a:	6005      	str	r5, [r0, #0]
 800675c:	e7d6      	b.n	800670c <_malloc_r+0xa8>
 800675e:	bf00      	nop
 8006760:	20000480 	.word	0x20000480

08006764 <_printf_common>:
 8006764:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006768:	4616      	mov	r6, r2
 800676a:	4698      	mov	r8, r3
 800676c:	688a      	ldr	r2, [r1, #8]
 800676e:	690b      	ldr	r3, [r1, #16]
 8006770:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006774:	4293      	cmp	r3, r2
 8006776:	bfb8      	it	lt
 8006778:	4613      	movlt	r3, r2
 800677a:	6033      	str	r3, [r6, #0]
 800677c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006780:	4607      	mov	r7, r0
 8006782:	460c      	mov	r4, r1
 8006784:	b10a      	cbz	r2, 800678a <_printf_common+0x26>
 8006786:	3301      	adds	r3, #1
 8006788:	6033      	str	r3, [r6, #0]
 800678a:	6823      	ldr	r3, [r4, #0]
 800678c:	0699      	lsls	r1, r3, #26
 800678e:	bf42      	ittt	mi
 8006790:	6833      	ldrmi	r3, [r6, #0]
 8006792:	3302      	addmi	r3, #2
 8006794:	6033      	strmi	r3, [r6, #0]
 8006796:	6825      	ldr	r5, [r4, #0]
 8006798:	f015 0506 	ands.w	r5, r5, #6
 800679c:	d106      	bne.n	80067ac <_printf_common+0x48>
 800679e:	f104 0a19 	add.w	sl, r4, #25
 80067a2:	68e3      	ldr	r3, [r4, #12]
 80067a4:	6832      	ldr	r2, [r6, #0]
 80067a6:	1a9b      	subs	r3, r3, r2
 80067a8:	42ab      	cmp	r3, r5
 80067aa:	dc26      	bgt.n	80067fa <_printf_common+0x96>
 80067ac:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80067b0:	6822      	ldr	r2, [r4, #0]
 80067b2:	3b00      	subs	r3, #0
 80067b4:	bf18      	it	ne
 80067b6:	2301      	movne	r3, #1
 80067b8:	0692      	lsls	r2, r2, #26
 80067ba:	d42b      	bmi.n	8006814 <_printf_common+0xb0>
 80067bc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80067c0:	4641      	mov	r1, r8
 80067c2:	4638      	mov	r0, r7
 80067c4:	47c8      	blx	r9
 80067c6:	3001      	adds	r0, #1
 80067c8:	d01e      	beq.n	8006808 <_printf_common+0xa4>
 80067ca:	6823      	ldr	r3, [r4, #0]
 80067cc:	6922      	ldr	r2, [r4, #16]
 80067ce:	f003 0306 	and.w	r3, r3, #6
 80067d2:	2b04      	cmp	r3, #4
 80067d4:	bf02      	ittt	eq
 80067d6:	68e5      	ldreq	r5, [r4, #12]
 80067d8:	6833      	ldreq	r3, [r6, #0]
 80067da:	1aed      	subeq	r5, r5, r3
 80067dc:	68a3      	ldr	r3, [r4, #8]
 80067de:	bf0c      	ite	eq
 80067e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80067e4:	2500      	movne	r5, #0
 80067e6:	4293      	cmp	r3, r2
 80067e8:	bfc4      	itt	gt
 80067ea:	1a9b      	subgt	r3, r3, r2
 80067ec:	18ed      	addgt	r5, r5, r3
 80067ee:	2600      	movs	r6, #0
 80067f0:	341a      	adds	r4, #26
 80067f2:	42b5      	cmp	r5, r6
 80067f4:	d11a      	bne.n	800682c <_printf_common+0xc8>
 80067f6:	2000      	movs	r0, #0
 80067f8:	e008      	b.n	800680c <_printf_common+0xa8>
 80067fa:	2301      	movs	r3, #1
 80067fc:	4652      	mov	r2, sl
 80067fe:	4641      	mov	r1, r8
 8006800:	4638      	mov	r0, r7
 8006802:	47c8      	blx	r9
 8006804:	3001      	adds	r0, #1
 8006806:	d103      	bne.n	8006810 <_printf_common+0xac>
 8006808:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800680c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006810:	3501      	adds	r5, #1
 8006812:	e7c6      	b.n	80067a2 <_printf_common+0x3e>
 8006814:	18e1      	adds	r1, r4, r3
 8006816:	1c5a      	adds	r2, r3, #1
 8006818:	2030      	movs	r0, #48	@ 0x30
 800681a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800681e:	4422      	add	r2, r4
 8006820:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006824:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006828:	3302      	adds	r3, #2
 800682a:	e7c7      	b.n	80067bc <_printf_common+0x58>
 800682c:	2301      	movs	r3, #1
 800682e:	4622      	mov	r2, r4
 8006830:	4641      	mov	r1, r8
 8006832:	4638      	mov	r0, r7
 8006834:	47c8      	blx	r9
 8006836:	3001      	adds	r0, #1
 8006838:	d0e6      	beq.n	8006808 <_printf_common+0xa4>
 800683a:	3601      	adds	r6, #1
 800683c:	e7d9      	b.n	80067f2 <_printf_common+0x8e>
	...

08006840 <_printf_i>:
 8006840:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006844:	7e0f      	ldrb	r7, [r1, #24]
 8006846:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006848:	2f78      	cmp	r7, #120	@ 0x78
 800684a:	4691      	mov	r9, r2
 800684c:	4680      	mov	r8, r0
 800684e:	460c      	mov	r4, r1
 8006850:	469a      	mov	sl, r3
 8006852:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006856:	d807      	bhi.n	8006868 <_printf_i+0x28>
 8006858:	2f62      	cmp	r7, #98	@ 0x62
 800685a:	d80a      	bhi.n	8006872 <_printf_i+0x32>
 800685c:	2f00      	cmp	r7, #0
 800685e:	f000 80d2 	beq.w	8006a06 <_printf_i+0x1c6>
 8006862:	2f58      	cmp	r7, #88	@ 0x58
 8006864:	f000 80b9 	beq.w	80069da <_printf_i+0x19a>
 8006868:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800686c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006870:	e03a      	b.n	80068e8 <_printf_i+0xa8>
 8006872:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006876:	2b15      	cmp	r3, #21
 8006878:	d8f6      	bhi.n	8006868 <_printf_i+0x28>
 800687a:	a101      	add	r1, pc, #4	@ (adr r1, 8006880 <_printf_i+0x40>)
 800687c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006880:	080068d9 	.word	0x080068d9
 8006884:	080068ed 	.word	0x080068ed
 8006888:	08006869 	.word	0x08006869
 800688c:	08006869 	.word	0x08006869
 8006890:	08006869 	.word	0x08006869
 8006894:	08006869 	.word	0x08006869
 8006898:	080068ed 	.word	0x080068ed
 800689c:	08006869 	.word	0x08006869
 80068a0:	08006869 	.word	0x08006869
 80068a4:	08006869 	.word	0x08006869
 80068a8:	08006869 	.word	0x08006869
 80068ac:	080069ed 	.word	0x080069ed
 80068b0:	08006917 	.word	0x08006917
 80068b4:	080069a7 	.word	0x080069a7
 80068b8:	08006869 	.word	0x08006869
 80068bc:	08006869 	.word	0x08006869
 80068c0:	08006a0f 	.word	0x08006a0f
 80068c4:	08006869 	.word	0x08006869
 80068c8:	08006917 	.word	0x08006917
 80068cc:	08006869 	.word	0x08006869
 80068d0:	08006869 	.word	0x08006869
 80068d4:	080069af 	.word	0x080069af
 80068d8:	6833      	ldr	r3, [r6, #0]
 80068da:	1d1a      	adds	r2, r3, #4
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	6032      	str	r2, [r6, #0]
 80068e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80068e4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80068e8:	2301      	movs	r3, #1
 80068ea:	e09d      	b.n	8006a28 <_printf_i+0x1e8>
 80068ec:	6833      	ldr	r3, [r6, #0]
 80068ee:	6820      	ldr	r0, [r4, #0]
 80068f0:	1d19      	adds	r1, r3, #4
 80068f2:	6031      	str	r1, [r6, #0]
 80068f4:	0606      	lsls	r6, r0, #24
 80068f6:	d501      	bpl.n	80068fc <_printf_i+0xbc>
 80068f8:	681d      	ldr	r5, [r3, #0]
 80068fa:	e003      	b.n	8006904 <_printf_i+0xc4>
 80068fc:	0645      	lsls	r5, r0, #25
 80068fe:	d5fb      	bpl.n	80068f8 <_printf_i+0xb8>
 8006900:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006904:	2d00      	cmp	r5, #0
 8006906:	da03      	bge.n	8006910 <_printf_i+0xd0>
 8006908:	232d      	movs	r3, #45	@ 0x2d
 800690a:	426d      	negs	r5, r5
 800690c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006910:	4859      	ldr	r0, [pc, #356]	@ (8006a78 <_printf_i+0x238>)
 8006912:	230a      	movs	r3, #10
 8006914:	e011      	b.n	800693a <_printf_i+0xfa>
 8006916:	6821      	ldr	r1, [r4, #0]
 8006918:	6833      	ldr	r3, [r6, #0]
 800691a:	0608      	lsls	r0, r1, #24
 800691c:	f853 5b04 	ldr.w	r5, [r3], #4
 8006920:	d402      	bmi.n	8006928 <_printf_i+0xe8>
 8006922:	0649      	lsls	r1, r1, #25
 8006924:	bf48      	it	mi
 8006926:	b2ad      	uxthmi	r5, r5
 8006928:	2f6f      	cmp	r7, #111	@ 0x6f
 800692a:	4853      	ldr	r0, [pc, #332]	@ (8006a78 <_printf_i+0x238>)
 800692c:	6033      	str	r3, [r6, #0]
 800692e:	bf14      	ite	ne
 8006930:	230a      	movne	r3, #10
 8006932:	2308      	moveq	r3, #8
 8006934:	2100      	movs	r1, #0
 8006936:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800693a:	6866      	ldr	r6, [r4, #4]
 800693c:	60a6      	str	r6, [r4, #8]
 800693e:	2e00      	cmp	r6, #0
 8006940:	bfa2      	ittt	ge
 8006942:	6821      	ldrge	r1, [r4, #0]
 8006944:	f021 0104 	bicge.w	r1, r1, #4
 8006948:	6021      	strge	r1, [r4, #0]
 800694a:	b90d      	cbnz	r5, 8006950 <_printf_i+0x110>
 800694c:	2e00      	cmp	r6, #0
 800694e:	d04b      	beq.n	80069e8 <_printf_i+0x1a8>
 8006950:	4616      	mov	r6, r2
 8006952:	fbb5 f1f3 	udiv	r1, r5, r3
 8006956:	fb03 5711 	mls	r7, r3, r1, r5
 800695a:	5dc7      	ldrb	r7, [r0, r7]
 800695c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006960:	462f      	mov	r7, r5
 8006962:	42bb      	cmp	r3, r7
 8006964:	460d      	mov	r5, r1
 8006966:	d9f4      	bls.n	8006952 <_printf_i+0x112>
 8006968:	2b08      	cmp	r3, #8
 800696a:	d10b      	bne.n	8006984 <_printf_i+0x144>
 800696c:	6823      	ldr	r3, [r4, #0]
 800696e:	07df      	lsls	r7, r3, #31
 8006970:	d508      	bpl.n	8006984 <_printf_i+0x144>
 8006972:	6923      	ldr	r3, [r4, #16]
 8006974:	6861      	ldr	r1, [r4, #4]
 8006976:	4299      	cmp	r1, r3
 8006978:	bfde      	ittt	le
 800697a:	2330      	movle	r3, #48	@ 0x30
 800697c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006980:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8006984:	1b92      	subs	r2, r2, r6
 8006986:	6122      	str	r2, [r4, #16]
 8006988:	f8cd a000 	str.w	sl, [sp]
 800698c:	464b      	mov	r3, r9
 800698e:	aa03      	add	r2, sp, #12
 8006990:	4621      	mov	r1, r4
 8006992:	4640      	mov	r0, r8
 8006994:	f7ff fee6 	bl	8006764 <_printf_common>
 8006998:	3001      	adds	r0, #1
 800699a:	d14a      	bne.n	8006a32 <_printf_i+0x1f2>
 800699c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80069a0:	b004      	add	sp, #16
 80069a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069a6:	6823      	ldr	r3, [r4, #0]
 80069a8:	f043 0320 	orr.w	r3, r3, #32
 80069ac:	6023      	str	r3, [r4, #0]
 80069ae:	4833      	ldr	r0, [pc, #204]	@ (8006a7c <_printf_i+0x23c>)
 80069b0:	2778      	movs	r7, #120	@ 0x78
 80069b2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80069b6:	6823      	ldr	r3, [r4, #0]
 80069b8:	6831      	ldr	r1, [r6, #0]
 80069ba:	061f      	lsls	r7, r3, #24
 80069bc:	f851 5b04 	ldr.w	r5, [r1], #4
 80069c0:	d402      	bmi.n	80069c8 <_printf_i+0x188>
 80069c2:	065f      	lsls	r7, r3, #25
 80069c4:	bf48      	it	mi
 80069c6:	b2ad      	uxthmi	r5, r5
 80069c8:	6031      	str	r1, [r6, #0]
 80069ca:	07d9      	lsls	r1, r3, #31
 80069cc:	bf44      	itt	mi
 80069ce:	f043 0320 	orrmi.w	r3, r3, #32
 80069d2:	6023      	strmi	r3, [r4, #0]
 80069d4:	b11d      	cbz	r5, 80069de <_printf_i+0x19e>
 80069d6:	2310      	movs	r3, #16
 80069d8:	e7ac      	b.n	8006934 <_printf_i+0xf4>
 80069da:	4827      	ldr	r0, [pc, #156]	@ (8006a78 <_printf_i+0x238>)
 80069dc:	e7e9      	b.n	80069b2 <_printf_i+0x172>
 80069de:	6823      	ldr	r3, [r4, #0]
 80069e0:	f023 0320 	bic.w	r3, r3, #32
 80069e4:	6023      	str	r3, [r4, #0]
 80069e6:	e7f6      	b.n	80069d6 <_printf_i+0x196>
 80069e8:	4616      	mov	r6, r2
 80069ea:	e7bd      	b.n	8006968 <_printf_i+0x128>
 80069ec:	6833      	ldr	r3, [r6, #0]
 80069ee:	6825      	ldr	r5, [r4, #0]
 80069f0:	6961      	ldr	r1, [r4, #20]
 80069f2:	1d18      	adds	r0, r3, #4
 80069f4:	6030      	str	r0, [r6, #0]
 80069f6:	062e      	lsls	r6, r5, #24
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	d501      	bpl.n	8006a00 <_printf_i+0x1c0>
 80069fc:	6019      	str	r1, [r3, #0]
 80069fe:	e002      	b.n	8006a06 <_printf_i+0x1c6>
 8006a00:	0668      	lsls	r0, r5, #25
 8006a02:	d5fb      	bpl.n	80069fc <_printf_i+0x1bc>
 8006a04:	8019      	strh	r1, [r3, #0]
 8006a06:	2300      	movs	r3, #0
 8006a08:	6123      	str	r3, [r4, #16]
 8006a0a:	4616      	mov	r6, r2
 8006a0c:	e7bc      	b.n	8006988 <_printf_i+0x148>
 8006a0e:	6833      	ldr	r3, [r6, #0]
 8006a10:	1d1a      	adds	r2, r3, #4
 8006a12:	6032      	str	r2, [r6, #0]
 8006a14:	681e      	ldr	r6, [r3, #0]
 8006a16:	6862      	ldr	r2, [r4, #4]
 8006a18:	2100      	movs	r1, #0
 8006a1a:	4630      	mov	r0, r6
 8006a1c:	f7f9 fbe0 	bl	80001e0 <memchr>
 8006a20:	b108      	cbz	r0, 8006a26 <_printf_i+0x1e6>
 8006a22:	1b80      	subs	r0, r0, r6
 8006a24:	6060      	str	r0, [r4, #4]
 8006a26:	6863      	ldr	r3, [r4, #4]
 8006a28:	6123      	str	r3, [r4, #16]
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006a30:	e7aa      	b.n	8006988 <_printf_i+0x148>
 8006a32:	6923      	ldr	r3, [r4, #16]
 8006a34:	4632      	mov	r2, r6
 8006a36:	4649      	mov	r1, r9
 8006a38:	4640      	mov	r0, r8
 8006a3a:	47d0      	blx	sl
 8006a3c:	3001      	adds	r0, #1
 8006a3e:	d0ad      	beq.n	800699c <_printf_i+0x15c>
 8006a40:	6823      	ldr	r3, [r4, #0]
 8006a42:	079b      	lsls	r3, r3, #30
 8006a44:	d413      	bmi.n	8006a6e <_printf_i+0x22e>
 8006a46:	68e0      	ldr	r0, [r4, #12]
 8006a48:	9b03      	ldr	r3, [sp, #12]
 8006a4a:	4298      	cmp	r0, r3
 8006a4c:	bfb8      	it	lt
 8006a4e:	4618      	movlt	r0, r3
 8006a50:	e7a6      	b.n	80069a0 <_printf_i+0x160>
 8006a52:	2301      	movs	r3, #1
 8006a54:	4632      	mov	r2, r6
 8006a56:	4649      	mov	r1, r9
 8006a58:	4640      	mov	r0, r8
 8006a5a:	47d0      	blx	sl
 8006a5c:	3001      	adds	r0, #1
 8006a5e:	d09d      	beq.n	800699c <_printf_i+0x15c>
 8006a60:	3501      	adds	r5, #1
 8006a62:	68e3      	ldr	r3, [r4, #12]
 8006a64:	9903      	ldr	r1, [sp, #12]
 8006a66:	1a5b      	subs	r3, r3, r1
 8006a68:	42ab      	cmp	r3, r5
 8006a6a:	dcf2      	bgt.n	8006a52 <_printf_i+0x212>
 8006a6c:	e7eb      	b.n	8006a46 <_printf_i+0x206>
 8006a6e:	2500      	movs	r5, #0
 8006a70:	f104 0619 	add.w	r6, r4, #25
 8006a74:	e7f5      	b.n	8006a62 <_printf_i+0x222>
 8006a76:	bf00      	nop
 8006a78:	08006d05 	.word	0x08006d05
 8006a7c:	08006d16 	.word	0x08006d16

08006a80 <__malloc_lock>:
 8006a80:	4801      	ldr	r0, [pc, #4]	@ (8006a88 <__malloc_lock+0x8>)
 8006a82:	f7ff bc73 	b.w	800636c <__retarget_lock_acquire_recursive>
 8006a86:	bf00      	nop
 8006a88:	20000478 	.word	0x20000478

08006a8c <__malloc_unlock>:
 8006a8c:	4801      	ldr	r0, [pc, #4]	@ (8006a94 <__malloc_unlock+0x8>)
 8006a8e:	f7ff bc6e 	b.w	800636e <__retarget_lock_release_recursive>
 8006a92:	bf00      	nop
 8006a94:	20000478 	.word	0x20000478

08006a98 <_realloc_r>:
 8006a98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a9c:	4680      	mov	r8, r0
 8006a9e:	4615      	mov	r5, r2
 8006aa0:	460c      	mov	r4, r1
 8006aa2:	b921      	cbnz	r1, 8006aae <_realloc_r+0x16>
 8006aa4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006aa8:	4611      	mov	r1, r2
 8006aaa:	f7ff bddb 	b.w	8006664 <_malloc_r>
 8006aae:	b92a      	cbnz	r2, 8006abc <_realloc_r+0x24>
 8006ab0:	f000 f858 	bl	8006b64 <_free_r>
 8006ab4:	2400      	movs	r4, #0
 8006ab6:	4620      	mov	r0, r4
 8006ab8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006abc:	f000 f89c 	bl	8006bf8 <_malloc_usable_size_r>
 8006ac0:	4285      	cmp	r5, r0
 8006ac2:	4606      	mov	r6, r0
 8006ac4:	d802      	bhi.n	8006acc <_realloc_r+0x34>
 8006ac6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8006aca:	d8f4      	bhi.n	8006ab6 <_realloc_r+0x1e>
 8006acc:	4629      	mov	r1, r5
 8006ace:	4640      	mov	r0, r8
 8006ad0:	f7ff fdc8 	bl	8006664 <_malloc_r>
 8006ad4:	4607      	mov	r7, r0
 8006ad6:	2800      	cmp	r0, #0
 8006ad8:	d0ec      	beq.n	8006ab4 <_realloc_r+0x1c>
 8006ada:	42b5      	cmp	r5, r6
 8006adc:	462a      	mov	r2, r5
 8006ade:	4621      	mov	r1, r4
 8006ae0:	bf28      	it	cs
 8006ae2:	4632      	movcs	r2, r6
 8006ae4:	f000 f830 	bl	8006b48 <memcpy>
 8006ae8:	4621      	mov	r1, r4
 8006aea:	4640      	mov	r0, r8
 8006aec:	f000 f83a 	bl	8006b64 <_free_r>
 8006af0:	463c      	mov	r4, r7
 8006af2:	e7e0      	b.n	8006ab6 <_realloc_r+0x1e>

08006af4 <memmove>:
 8006af4:	4288      	cmp	r0, r1
 8006af6:	b510      	push	{r4, lr}
 8006af8:	eb01 0402 	add.w	r4, r1, r2
 8006afc:	d902      	bls.n	8006b04 <memmove+0x10>
 8006afe:	4284      	cmp	r4, r0
 8006b00:	4623      	mov	r3, r4
 8006b02:	d807      	bhi.n	8006b14 <memmove+0x20>
 8006b04:	1e43      	subs	r3, r0, #1
 8006b06:	42a1      	cmp	r1, r4
 8006b08:	d008      	beq.n	8006b1c <memmove+0x28>
 8006b0a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006b0e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006b12:	e7f8      	b.n	8006b06 <memmove+0x12>
 8006b14:	4402      	add	r2, r0
 8006b16:	4601      	mov	r1, r0
 8006b18:	428a      	cmp	r2, r1
 8006b1a:	d100      	bne.n	8006b1e <memmove+0x2a>
 8006b1c:	bd10      	pop	{r4, pc}
 8006b1e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006b22:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006b26:	e7f7      	b.n	8006b18 <memmove+0x24>

08006b28 <_sbrk_r>:
 8006b28:	b538      	push	{r3, r4, r5, lr}
 8006b2a:	4d06      	ldr	r5, [pc, #24]	@ (8006b44 <_sbrk_r+0x1c>)
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	4604      	mov	r4, r0
 8006b30:	4608      	mov	r0, r1
 8006b32:	602b      	str	r3, [r5, #0]
 8006b34:	f7fb f990 	bl	8001e58 <_sbrk>
 8006b38:	1c43      	adds	r3, r0, #1
 8006b3a:	d102      	bne.n	8006b42 <_sbrk_r+0x1a>
 8006b3c:	682b      	ldr	r3, [r5, #0]
 8006b3e:	b103      	cbz	r3, 8006b42 <_sbrk_r+0x1a>
 8006b40:	6023      	str	r3, [r4, #0]
 8006b42:	bd38      	pop	{r3, r4, r5, pc}
 8006b44:	20000484 	.word	0x20000484

08006b48 <memcpy>:
 8006b48:	440a      	add	r2, r1
 8006b4a:	4291      	cmp	r1, r2
 8006b4c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8006b50:	d100      	bne.n	8006b54 <memcpy+0xc>
 8006b52:	4770      	bx	lr
 8006b54:	b510      	push	{r4, lr}
 8006b56:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006b5a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006b5e:	4291      	cmp	r1, r2
 8006b60:	d1f9      	bne.n	8006b56 <memcpy+0xe>
 8006b62:	bd10      	pop	{r4, pc}

08006b64 <_free_r>:
 8006b64:	b538      	push	{r3, r4, r5, lr}
 8006b66:	4605      	mov	r5, r0
 8006b68:	2900      	cmp	r1, #0
 8006b6a:	d041      	beq.n	8006bf0 <_free_r+0x8c>
 8006b6c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b70:	1f0c      	subs	r4, r1, #4
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	bfb8      	it	lt
 8006b76:	18e4      	addlt	r4, r4, r3
 8006b78:	f7ff ff82 	bl	8006a80 <__malloc_lock>
 8006b7c:	4a1d      	ldr	r2, [pc, #116]	@ (8006bf4 <_free_r+0x90>)
 8006b7e:	6813      	ldr	r3, [r2, #0]
 8006b80:	b933      	cbnz	r3, 8006b90 <_free_r+0x2c>
 8006b82:	6063      	str	r3, [r4, #4]
 8006b84:	6014      	str	r4, [r2, #0]
 8006b86:	4628      	mov	r0, r5
 8006b88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006b8c:	f7ff bf7e 	b.w	8006a8c <__malloc_unlock>
 8006b90:	42a3      	cmp	r3, r4
 8006b92:	d908      	bls.n	8006ba6 <_free_r+0x42>
 8006b94:	6820      	ldr	r0, [r4, #0]
 8006b96:	1821      	adds	r1, r4, r0
 8006b98:	428b      	cmp	r3, r1
 8006b9a:	bf01      	itttt	eq
 8006b9c:	6819      	ldreq	r1, [r3, #0]
 8006b9e:	685b      	ldreq	r3, [r3, #4]
 8006ba0:	1809      	addeq	r1, r1, r0
 8006ba2:	6021      	streq	r1, [r4, #0]
 8006ba4:	e7ed      	b.n	8006b82 <_free_r+0x1e>
 8006ba6:	461a      	mov	r2, r3
 8006ba8:	685b      	ldr	r3, [r3, #4]
 8006baa:	b10b      	cbz	r3, 8006bb0 <_free_r+0x4c>
 8006bac:	42a3      	cmp	r3, r4
 8006bae:	d9fa      	bls.n	8006ba6 <_free_r+0x42>
 8006bb0:	6811      	ldr	r1, [r2, #0]
 8006bb2:	1850      	adds	r0, r2, r1
 8006bb4:	42a0      	cmp	r0, r4
 8006bb6:	d10b      	bne.n	8006bd0 <_free_r+0x6c>
 8006bb8:	6820      	ldr	r0, [r4, #0]
 8006bba:	4401      	add	r1, r0
 8006bbc:	1850      	adds	r0, r2, r1
 8006bbe:	4283      	cmp	r3, r0
 8006bc0:	6011      	str	r1, [r2, #0]
 8006bc2:	d1e0      	bne.n	8006b86 <_free_r+0x22>
 8006bc4:	6818      	ldr	r0, [r3, #0]
 8006bc6:	685b      	ldr	r3, [r3, #4]
 8006bc8:	6053      	str	r3, [r2, #4]
 8006bca:	4408      	add	r0, r1
 8006bcc:	6010      	str	r0, [r2, #0]
 8006bce:	e7da      	b.n	8006b86 <_free_r+0x22>
 8006bd0:	d902      	bls.n	8006bd8 <_free_r+0x74>
 8006bd2:	230c      	movs	r3, #12
 8006bd4:	602b      	str	r3, [r5, #0]
 8006bd6:	e7d6      	b.n	8006b86 <_free_r+0x22>
 8006bd8:	6820      	ldr	r0, [r4, #0]
 8006bda:	1821      	adds	r1, r4, r0
 8006bdc:	428b      	cmp	r3, r1
 8006bde:	bf04      	itt	eq
 8006be0:	6819      	ldreq	r1, [r3, #0]
 8006be2:	685b      	ldreq	r3, [r3, #4]
 8006be4:	6063      	str	r3, [r4, #4]
 8006be6:	bf04      	itt	eq
 8006be8:	1809      	addeq	r1, r1, r0
 8006bea:	6021      	streq	r1, [r4, #0]
 8006bec:	6054      	str	r4, [r2, #4]
 8006bee:	e7ca      	b.n	8006b86 <_free_r+0x22>
 8006bf0:	bd38      	pop	{r3, r4, r5, pc}
 8006bf2:	bf00      	nop
 8006bf4:	20000480 	.word	0x20000480

08006bf8 <_malloc_usable_size_r>:
 8006bf8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006bfc:	1f18      	subs	r0, r3, #4
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	bfbc      	itt	lt
 8006c02:	580b      	ldrlt	r3, [r1, r0]
 8006c04:	18c0      	addlt	r0, r0, r3
 8006c06:	4770      	bx	lr

08006c08 <_init>:
 8006c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c0a:	bf00      	nop
 8006c0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c0e:	bc08      	pop	{r3}
 8006c10:	469e      	mov	lr, r3
 8006c12:	4770      	bx	lr

08006c14 <_fini>:
 8006c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c16:	bf00      	nop
 8006c18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c1a:	bc08      	pop	{r3}
 8006c1c:	469e      	mov	lr, r3
 8006c1e:	4770      	bx	lr
